App name: LYNC
Landing page: https://lync.world/
App category: 
App insights: 
Autonomous Web3 & AI layer
App documentation: https://docs.lync.world/
Introducing LYNC | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Introducing LYNC
The first mobile centric layer 2 using Move Stack
What is LYNC?
LYNC is the first mobile-centric Layer 2 using Move Stack, designed to bring web3 to over 7 billion mobile users.
It empowers developers with a native toolkit, enabling them to build on-chain products in 90% less time and at a significantly reduced cost.
More about LYNC L2: 
https://x.com/movementlabsxyz/status/1813985778705580109
Why LYNC?
At LYNC, we aim to lead the next major shift from web to mobile in crypto by building the very first mobile centric layer using Move Stack, Becoming a key driver of the transformation that is witnessed in web2 where user adoption has transformed via diverse platforms and simplified infrastructure.
Next
LYNC Account Abstraction SDK
Last updated 
4 months ago
👋
What is LYNC?
Why LYNC?
LYNC Account Abstraction SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
LYNC Account Abstraction SDK
Previous
Introducing LYNC
Next
LYNC Account Abstraction WebGL SDK
Last updated 
8 months ago
LYNC AA SDK is a no-code Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS). LYNC Unity Account Abstraction SDK, your solution to seamless gamer onboarding in Web3 Games! Enable effortless logins via socials, wallets, email, and more. Integrate swiftly into any game on Mac, Windows, Android, iOS, or browser. Simplify the gaming experience with LYNC AA SDK, connecting gamers effortlessly.
Get your API Key
Please get your API key before downloading the SDK from 
here
​
Installation
Download the LYNC Account Abstraction SDK from 
Here​
Example Project: 
https://github.com/LYNC-WORLD/LYNC-Unity-AA/tree/main/Assets/LYNC-AA-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Account Abstraction SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating AA SDK in Unity
There are 3 Example Projects present in the SDK: 
Assets -> LYNC-AA-SDK -> Example / Example-2 / Example-3
You can find the example scene in the folders. Simply pass the API key in lyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Account Abstraction. Attach LYNC Manager Prefab(Assets/LYNC-AA-SDK/LYNC Manager. prefab), on the starting scene.
This will serve as the starting point for your project.
In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose chain
Choose Network (Testnet/ Mainnet)
Pass in the Dapp API Key (
The API key can be generated from the Biconomy Dashboard
 )
Web3 Auth Client ID (
The API key can be generated from the Web3 Auth Dashboard
)
Pass a deep link name (example: lync/gameName etc.)
Integrating Login or Transaction Layer via Account Abstraction in Unity
Login Flow 
No-Code Login Flow:
You can attach the Login Example Script in any scene where you want users to login, by dragging and dropping a Button as a Game Object.
Login Flow with Code:
Login and Transactions can be done once the LyncReady action is triggered.
The Sample Code for Login can be found at loginExample.cs, LoginTransactionExample.cs and ExampleLogin.cs
Make sure to Import LYNC.
Copy
using LYNC;


using LYNC.Wallet;
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            addressTxt.text = "Wallet Address: " + wallet.publicAddress;


            loginDateTxt.text = "Login Date: " + wallet.loginDate.ToString();


            string smartAccountAddress = walletData.SmartAccount;


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


    }
To Check if the user is logged in or not:
Copy
WalletData walletData = WalletData.TryLoadSavedWallet();


if (walletData.WalletConnected){


    // User is already logged in


}


else{


    // Ask user to login


}
To get the User's wallet address, if the user is logged in
Copy
string EOAWalletAddress = walletData.PublicAddress


string SmartAccountAddress = walletData.SmartAccount


string EmailAddress=  walletData.Email;


string UserName = walletData.UserName;


string IdToken = walletData.IdToken;
To Fetch from PlayerPrefs:
Copy
string publicAddress = PlayerPrefs.GetString("_publicAddress");


string smartAccount = PlayerPrefs.GetString("_smartAccount");


string email = PlayerPrefs.GetString("_email");


string userName = PlayerPrefs.GetString("_userName");


string idToken = PlayerPrefs.GetString("_idToken");
To Login directly:
Copy
LyncManager.Instance.WalletAuth.ConnectWallet(loginUrl, (walletData) =>


{


    // Get all the user's wallet data from "walletData"


});
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout();
Transaction Flow 
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee (Function Name: 
SendTransaction
).
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction (Function Name: 
SendUserPaidTransaction
).
Gasless Transaction
The limitation with gasless transaction is that, you can't have a cost required in the smart contract.
To do transactions, TokenExample.cs and LoginTransactionExample.cs can be taken as a reference.
Pass in the Contract Address and Function Name Example: MintNFT(). MintNFT(unit256 id, unit256 amount)
Args are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
To do it from the script:
Copy
LyncManager.Instance.blockchainMiddleware.SendTransaction(contractAddress, functionName, args, onSuccess,onError);
onSuccess: Once the transactions are completed, this handles what to do.
onError: If the transactions failed, this handles what to do.
Setup Gasless Transactions with Biconomy
To enable gasless transactions via Biconomy, Register a new paymaster on the 
Biconomy Dashboard
. 
Make sure you select the version: 1.0.1
Once done, Get the API Key and Pass it to the 
LYNC Manager
.
Setup the gas tank, in Policies create a new one and pass the contract address
That's it, now you can do the gasless transaction on this contract address passing in the LYNC AA SDK.
User Paid Transaction
This will require gamers/ users to have some funds in their wallet on the chain you are using. There are two ways, You can ask users to send some tokens to this smart account or use LYNC on-ramp/ off-ramp for gamers allowing them to add funds via credit/ debit card, Apple Pay, Google Pay etc.
User Paid Transactions are similar to Gasless transactions to use, there is only one more parameter required to send is cost in ethers (ex. 0.1).
Copy
LYNC.LyncManager.Instance.blockchainMiddleware.SendUserPaidTransaction(contractAddress, functionName, arguments,cost, On721TrxCompleted, onError);
You can see the 
Assets/LYNC-AA-SDK/Example-2/TransactionExample.cs
 example script as a reference.
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Example Projects
Pass LYNC API Key​
Get your API Key
Installation
Integrating AA SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via Account Abstraction in Unity
Login Flow 
No-Code Login Flow:
Login Flow with Code:
Transaction Flow 
Gasless Transaction
Setup Gasless Transactions with Biconomy
User Paid Transaction
Some common bugs and their resolutions
Assets -> Import Package -> Custom Package
SDK Folder Structure
Attach loginExample Script
Assets -> LYNC-AA-SDK -> Example-2 -> loginExample.cs
Token Transactions
Biconomy API Key
Contract Address setup
LYNC Account Abstraction WebGL SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
LYNC Account Abstraction WebGL SDK
Previous
LYNC Account Abstraction SDK
Next
Metamask Wallet
Last updated 
8 months ago
LYNC AA SDK is a no-code Unity SDK allowing seamless integration of Account Abstraction. Supported Platforms: WebGL (Browser Games).
Get your API Key
Please get your API key before downloading the SDK from 
here
​
Installation
Download the LYNC Account Abstraction SDK from 
Here

Reference Project: 
https://github.com/LYNC-WORLD/LYNC-Unity-AA-WebGL/releases
​
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Account Abstraction SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating AA SDK in Unity
There are 2 Example Projects present in the SDK: Assets -> LYNC-AA-WEBGL -> Example / Example-2

You can find the example scene in the folders. Simply pass the API key in lyncManager GameObject. To test, Build and Run after adding this scene in (Scene in Build).
You can find the example scene in the folders. Simply pass the API key in lyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use, LYNC Manager Prefab, it needs to be attached to the first scene. This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose chain
Pass in the Dapp API Key (
The API key can be generated from the Biconomy Dashboard
)
Web3 Auth Client ID (
The API key can be generated from the Web3 Auth Dashboard
)
Once done, You can attach the Login Example Script in your Scene by dragging and dropping a Button as a Game Object
To Login with Code:
Copy
using LYNC;


using LYNC.Wallet;




LyncManager.Instance.walletAuth.ConnectWallet(


  wallet =>


  {


      Debug.Log("EOA Address: "+walletData.PublicAddress);


      Debug.Log("Smart Account Address: "+walletData.SmartAccount);


  },


  error =>


  {


    Debug.LogError(error);


  }


);
Get your API Key
Installation
Integrating AA SDK in Unity
Setup the Project
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key​
Metamask Wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get Your API Key 
Installation
Choose blockchain network 
Integrating the Transaction Layer
Integrating Connet Wallet scene into the build 
Products
Metamask Wallet
Previous
LYNC Account Abstraction WebGL SDK
Next
LYNC Metamask PC SDK
Last updated 
8 months ago
LYNC Metamask Wallet SDK is a one-stop solution for game developers to easily integrate Metamask into their game engine and deploy their game on multiple networks with just a few clicks. This SDK allows game developers to monitor gamers’ data via LYNC analytics system and update the SDK without leaving the game engine.
Get Your API Key 
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC - Metamask Wallet SDK from 
here
Example Project- 
https://github.com/LYNC-WORLD/Metamask-Unity-WebGL-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Metamask Wallet SDK package has finished importing into your Unity project, you can begin integrating it into your game. To do this, open the 
ConnectWallet
 scene provided by the LYNC - Metamask SDK.

                                             
Path : Assets ->LYNC-Metamask-SDK -> Scenes
Choose blockchain network 
If you haven't generated an API Key, please check 
Get Your API Key 
the After opening 
ConnectWallet 
scene, Go to 
Interface. 
In the "Inspector" window, go to the API key & Enter the 
API key
. 
To choose the blockchain network, simply go to the 
CurrentChain
 drop-down menu and pick the network of your preference to deploy your game on.
Integrating the Transaction Layer
The Transactions are divided into 2 parts:
No Code Transactions
Modular Transactions
Note: Make sure to have "TransactionManager.cs" in your scene.
No-code Transaction
 Check the No-Code-Transaction Scene in the Scenes folder.
Check the No-Code TransactionExample GameObject, you can just pass in a few parameters to write on any custom contract inside the game.
Just pass the following parameters:
Contract Address - Type any contract address on the chain you selected in the LYNCInterface GameObject.
ABI - You can get the contract ABI of a verified contract on the explorer.

Function Name - Write the exact function name from the contract
Cost - The cost required to do the transaction, if it's free you can pass 0 else pass the value in wei.
Arguments - The arguments required by the transaction, are left blank if none.
Modular Transactions
Check the No-Code-Transaction Scene in the Scenes folder.
Check the TransactionExample GameObject, it has a TransactionExample.cs file attached. 
This example contains 3 types of transaction transactions, ERC-721, ERC-1155 and ERC-20.
In this example:
send20Trx is a button to disable the button click once the transaction is initiated.
contractAddress - is the contract address for a custom transaction. 
(In this case, it's an ERC-20 contract address on Mumbai Testnet)
ABI - 
You can get the contract ABI of a verified contract on the explorer.
functionName - Write the exact function name from the contract 
(In this case, sendToken)
cost - The cost required to do the transaction, if it's free you can pass 0 else pass the value in wei. (In this case, as the function is not payable the value is 0).
ParametersOfFunctions - You can pass in the arguments required for the transaction. (In this example, the argument is how much amount you want to send, 
10000000000000000 is the value in wei, i.e 0.01 eth.
 You can pass n number of arguments separated with a comma( , ) ).
args - Converts compatible to be a JSON
Sending transaction - 
Copy


TransactionManager.Instance.SendTransaction(LoadingScreen, contractAddress, ABI, functionName, args, cost, On20TrxCompleted, On20TrxFailed);




The above example explains a requirement for doing transactions.




You can use the "TransactionManager.Instance.SendTransaction()" to send transactions from anywhere in the project, make sure to add the TransactionManager.cs file in the scene.
It takes a LoadingScreen GameObject, contractAddress, ABI, functionName, args, and cost, as explained above and 2 more functions of type "System.Action<string>".
These are not compulsory functions but they handle the Transaction Success or Failure.
On20TrxCompleted 
- Handles once the transaction is completed. (It returns a transaction hash).
On20TrxFailed 
- Handles if the transaction failed. (It returns a reason for transaction failure).
Integrating Connet Wallet scene into the build 
To deploy your Unity project, it's necessary to set up the Player Settings in Unity. Follow these steps to select the LYNC WebGL template.
In the "
Build Settings
" window, place 
ConnectWallet
 and 
FetchWallet
 at the top of this section. 
Go to "
Player Settings
" and navigate to "
Resolution and Presentation
".
 Select LYNC - Template
 in WebGL Template
After completing all the necessary steps and configuring the Player Settings with the LYNC WebGL template, you can now build and run your game.
To do this, go to "
File
" on the top menu bar in the Unity editor and select "
Build and Run
." 
Congratulation, you have successfully integrated the Metamask wallet with your favourite blockchain network using LYNC SDK. 

NOTE: If you wish to use wallet address inside game after user's wallet is connected, use:
Copy
PlayerPrefs.GetString("WalletAddress");
If you face any error, while Build and Run.

PLEASE ADD, Unity package install by git link
Copy
com.unity.nuget.newtonsoft-json
Integrate Metamask wallet inside any game using LYNC SDK
Assets -> Import Package -> Custom Package
Assets ->LYNC-Metamask-SDK -> Scenes
Enter the API key
Interface -> CurrentChain -> Choose Your Chain
No Code Transaction Scene
Copy ABI from explorer
Transaction Scene
Assets/LYNC-Metamask-SDK/Scripts/TransactionExample.cs
File -> Build Settings
Add ConnectWallet & FetchWallet Scene to the top of Scenes in Build
Player Settings -> Resolution and Presentation -> Select LYNC - Template
Build and Run 
LYNC Metamask PC SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get Your API Key 
Installation
Choose blockchain network 
Integrating the Transaction Layer
Products
LYNC Metamask PC SDK
Previous
Metamask Wallet
Next
OKX Wallet
Last updated 
3 months ago
LYNC Metamask Wallet SDK is a one-stop solution for game developers to easily integrate Metamask into their game engine and deploy their game on multiple networks with just a few clicks. This SDK allows game developers to monitor gamers’ data via LYNC analytics system and update the SDK without leaving the game engine.
Get Your API Key 
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC - Metamask Wallet SDK from 
here
Example Project- 
https://github.com/LYNC-WORLD/Metamask-Unity-PC-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Metamask PC SDK package has finished importing into your Unity project, you can begin integrating it into your game. To do this, open the 
Metamask
 scene provided by the LYNC - Metamask SDK.

                                             
Path : Assets ->LYNC -> Metamask
Choose blockchain network 
If you haven't generated an API Key, please check 
Get Your API Key 
the After opening 
Metamask 
scene, Go to 
LYNC Manager. 
In the "Inspector" window, go to the API key & Enter the 
API key
. 
To choose the blockchain network, simply go to the 
Network
 drop-down menu and pick the network of your preference to deploy your game on.
Integrating the Transaction Layer
The Transactions are divided into 2 parts:
No Code Transactions
Modular Transactions
Check the 
LYNCIntigrationExample
 GameObject, you can just pass in a few parameters to write on any custom contract inside the game.
Just pass the following parameters:
Contract Address - Type any contract address on the chain you selected in the LYNCInterface GameObject.
ABI - You can get the contract ABI of a verified contract on the explorer.

Function Name - Write the exact function name from the contract
Arguments - The arguments required by the transaction, are left blank if none.
Modular Transactions
Check the TransactionExample GameObject, it has a TransactionExample.cs file attached. 
This example contains 3 types of transaction transactions, ERC-721, ERC-1155 and ERC-20.
In this example:
contractAddress - is the contract address for a custom transaction. 
(In this case, it's a Sepolia contract address on Ethereum Testnet)
ABI - 
You can get the ABI from Contract(Code)
functionName - Write the exact function name from the contract 
(In this case, sendToken)
cost - The cost required to do the transaction, if it's free you can pass 0 else pass the value in wei. (In this case, as the function is not payable the value is 0).
ParametersOfFunctions - You can pass in the arguments required for the transaction. (In this example, the argument is how much amount you want to send, 
1000 is the value in wei, i.e 0.000000000000001 eth.
 You can pass n number of arguments separated with a comma( , ) ).
args - Converts compatible to be a JSON
Congratulation, you have successfully integrated the Metamask wallet with your favourite blockchain network using LYNC SDK. 

NOTE: If you wish to use wallet address inside game after user's wallet is connected, use:
Copy
PlayerPrefs.GetString("WalletAddress");
If you face any error in ABI, then open in JSON Format and select result as ABI.
No-code Transaction
Integrate Metamask wallet inside any game using LYNC SDK
Assets -> Import Package -> Custom Package
Assets ->LYNC -> Metamask
Enter the API key
LYNC Manager -> Network
LYNC Intigration Example
Copy ABI from explorer
Example Code
Open in JSON Format
Copy the Result
OKX Wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get Your API Key
Installation
Choose blockchain network 
Integrating ConnetWallet scene into the build 
Products
OKX Wallet
Integrate OKX wallet into game engine
Previous
LYNC Metamask PC SDK
Next
LYNC In-Game Marketplace SDK
Last updated 
8 months ago
The LYNC - OKX wallet SDK allows game developers to integrate OKX Wallet into their games quickly, and set up OKX Chain inside the game in less than 30 seconds. This SDK allows game developers to monitor gamers’ data via the LYNC analytics system and update the SDK without leaving the game engine.
Get Your API Key
Please get your API key before downloading the SDK from 
here
​
Installation
Download the LYNC - OKX Wallet SDK from 
here


Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the OKX Wallet SDK package has finished importing into your Unity project, you can begin integrating it into your game. To do this, open the 
ConnectWallet
 scene provided by the LYNC-OKX SDK.

                                             
Path : Assets ->LYNC-OKX-SDK -> Scenes
Choose blockchain network 
If you haven't generated API Key, please check  
Get Your API Key
After opening 
ConnectWallet 
scene, Go to 
Interface. 
In the "Inspector" window, go to the API key & Enter the 
API key
. 
To choose the blockchain network, simply go to the 
CurrentChain
 drop-down menu and pick the network of your preference to deploy your game on.
Integrating ConnetWallet scene into the build 
To deploy your Unity project, it's necessary to set up the Player Settings in Unity. Follow these steps to select the LYNC WebGL template.
Add ConnectWallet & FetchWallet Scene to the top of Scenes in Build
Assets -> Import Package -> Custom Package
Assets ->LYNC-OKX-SDK -> Scenes
Enter the API key
Interface -> CurrentChain -> Choose Your Chain
File -> Build Settings
LYNC In-Game Marketplace SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
LYNC In-Game Marketplace SDK
Integrate in-game Marketplace into game engine
Previous
OKX Wallet
Next
NFT Fetcher
Last updated 
8 months ago
The in-game marketplace SDK enables developers to integrate a blockchain-based marketplace into their games, allowing players to perform transactions using NFT-based in-game assets. Key features include:
Decentralized profile management.
Buy, sell, rent, and lend NFTs.
NFT minting for free.
Cross-chain swaps.
Cross-chain rent/lend.
On-Ramp / Off-ramp Integration
By incorporating this SDK, developers can enhance player engagement, create monetization opportunities, and foster a strong player community.
Steps to Integrate Marketplace in Games:
Note: 
Make sure to Integrate any wallet SDK provided by LYNC.
Download the LYNC - Marketplace Wallet SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Marketplace Wallet SDK package has finished importing into your Unity project, you can begin integrating it into your game. To do this, open the 
Marketplace
 scene provided by the LYNC.
Path : Assets ->LYNC-Marketplace -> Scenes
After opening the 
Marketplace 
scene, Go to 
Marketplace
 GameObject
. 
In the "Inspector" window, go to the Contract Address and enter the 
Contract Address 
of your in-game assets which are listed as NFT.
Once you have entered the Contract Address, the chain id is getting fetched directly by Interface from the wallet Integration Screen.
Once the contract address is added, if you play the Unity game. It will start fetching all the NFTs by this contract address.
Listing In-Game Assets on the In-Game Marketplace:

Players can list their in-game assets on either sell or lend in just one click.
Navigate to the 'Inventory' section to access your owned NFTs.
Choose the desired NFT from your inventory' owned NFT Section.
Input a price for the asset.
Click the 'Sell' button to initiate the listing process.
Complete the first wallet transaction to approve your token.
Finalize the second transaction to successfully list your item on the marketplace.
Voila! You've just listed your item for sale.
Similarly, players can easily list their in-game assets for lending with just a few clicks:
Go to the 'Inventory' section to view your owned NFTs.
Select the NFT you wish to lend from your inventory's 'Owned NFT' section.
Set a daily rental price for the asset.
Specify the maximum duration for which the asset can be rented.
Complete the transaction to list your token for lending.
And there you have it! You've successfully listed your item for rent.
Additionally, our in-game marketplace SDK allows cross-chain token swaps, enabling players to exchange tokens seamlessly within the game environment, without worrying about any complexities.
In-Game Claimer Page
LYNC Marketplace SDK allows gamers to mint in-game assets as NFT from the game itself, gamers can bring their contract address from any chain and the claimer page can be used by the gamers.
such If you want to deploy in-game assets as NFTs, Loot boxes, gasless NFT mint, or even dynamic NFTs. This can be done via 
LYNC NFT Deployer
. 
Import LYNC Marketplace SDK
LYNC MARKETPLACE SDK
Enter contract address
Claim/Mint NFTs in game
NFT Fetcher | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Introduction 
Integration with Game Engines 
Fetching NFT 
Steps to Integrate NFT Fetcher:
Products
NFT Fetcher
Fetch NFTs directly from wallet.
Previous
LYNC In-Game Marketplace SDK
Next
No-Code Smart Contract Deployer
Last updated 
8 months ago
Introduction 
NFT Fetcher is a tool that allows developers to easily integrate NFT (Non-Fungible Tokens) into game engines like Unity and Unreal. With just a few clicks, developers can fetch NFT from specific chains and contracts and integrate them into their game.
Integration with Game Engines 
NFT Fetcher can be integrated into Unity and Unreal game engines with ease. Simply download the SDK from the NFT Fetcher website and import it into the engine by dragging and dropping the files.
Fetching NFT 
NFT Fetcher allows developers to fetch NFT from specific chains and contracts. To do this, developers must choose the chain and contract address they want to fetch NFT from. Developers can also enter the contract address to fetch all NFTs from a specific contract or get NFTs from a wallet of a contract address.
Steps to Integrate NFT Fetcher:
Download the SDK from the NFT Fetcher from 
LYNC World
Import the SDK into Unity or Unreal by dragging and dropping the files.
Choose the chain, List of supported chains are:
Ethereum
Goerli
Polygon
Mumbai
Arbitrum Mainnet
Arbitrum Goerli
Optimism Mainnet
Optimism Goerli
Pass the Contract Address on the selected chain. It will start fetching all the NFTs of that contract address.

If you want gamers to fetch their NFTs from the wallet address, mark "
Show User NFTS
" as True (Mark Tick).

For testing in Unity Editor, Pass Wallet Address and NFTs will start showing.
If you wish to see logs, enable Debug Logs as True (Mark Tick).
Choose chain
No-Code Smart Contract Deployer | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
No-Code Smart Contract Deployer
Previous
NFT Fetcher
Next
EVM Lootbox SDK
Last updated 
3 months ago
Launch, manage, and deploy smart contracts with ease - no blockchain knowledge required!
Link to Smart Contract Deployer: 
https://creator.lync.world/


LYNC Smart Contract Deployer is a no-code contract deployment platform that allows users to create and deploy their 1/1 NFT, Multiple editions, in-game assets as an NFT, Entire NFT  and Farcaster Frame Collection with gasless transactions in just a few clicks.
ERC-721A and ERC-1155 Support: 
The platform supports the two most popular NFT standards - ERC-721A and ERC-1155.
ERC-721A is ideal for one-of-a-kind digital assets, while ERC-1155 is used for multi-edition or fungible tokens.
How to deploy NFT Collection on LYNC NFT Deployer:
Connect your wallet to the NFT Deployer.
Select the type of NFT Collection you want to launch, there are four options:
1/1 NFT
Multiple Edition
Collection
Web3 Game
LYNC supports all EVM Compatible chains including Polygon, Ethereum, Arbitrum, Avalanche, Astar, zkSync, and the Shardeum blockchains. In the deployer, there is a network selector dropdown. Select the network you want to deploy your collection to.​
Launch your
 
entire Collection
Choose the type of collection as "Collection"
Provide an image, name, and description that will be displayed on the claimer page, where your community can mint the NFTs.
Enter a Contract name, Contract symbol, and select the desired chain from the network selector dropdown.
Choose the type of contract based on your needs: ERC-721A for unique NFTs, ERC-1155 for multiple copies, or opt for a gasless contract if you want to cover the gas fees for your users.
Input the token URI of your metadata, which should look like this:
ipfs://CID/
Specify the maximum number of mints allowed per wallet address, the total supply for the collection and the cost of minting.
Once all the required information is provided, click on "Deploy" to launch your NFT collection.
Once the contract is deployed, you can share the claimer page with your community to allow the minting of NFTs. The claimer page is available under "Your Contracts"
Launch your single-edition or multiple-edition collection
Choose the type of collection as "1/1 NFT" or "Multiple Edition"
Enter a Contract name, Contract symbol and select the desired chain from the network selector dropdown.
After providing the necessary details, click on "Deploy" to launch your NFT collection.
Following the contract deployment:
Head to the "Tokens" section and click on "Create."
When creating a NFT, you will be prompted to provide an image, name, description, and other information about the NFT. You can also add properties to the NFT.
Once you have minted your NFTs, you need to link them to your project and integrate them into your game using our API and SDKs.
Launch NFT Collection
Claimer Page
EVM Lootbox SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Demo Application:
View Code on GitHub
On Chain Lootboxes
Randomization and Its Importance
LYNC's Lootbox SDK
What is inside a Lootbox
Products
EVM Lootbox SDK
Previous
No-Code Smart Contract Deployer
Next
Getting Started
Last updated 
1 month ago
The 
LYNC Lootbox SDK
 introduces an exciting and engaging way for users to receive rewards through lootboxes, sparking anticipation for what they’ll unlock next. Perfect for scenarios like 
Token Generation Events (TGE)
, token distribution, or community rewards, lootboxes can gamify and enhance user experience, driving participation and excitement. Developers can easily integrate these blockchain-powered lootboxes into their games, offering transparency, security, and fun while maintaining control over reward distribution mechanics.
Demo Application:
View Code on GitHub
On Chain Lootboxes
On-chain loot boxes
 are a new, blockchain-based version of these virtual mystery boxes. Unlike traditional loot boxes, where the process of distributing rewards is often hidden or controlled by game developers, on-chain loot boxes use blockchain technology and smart contracts to manage every step of the process in a decentralized and transparent way. This means that the rules and procedures governing how rewards are distributed are openly visible and verifiable by anyone. The use of blockchain ensures that no one can tamper with or manipulate the outcome, providing players with a fair and trustworthy experience. This level of transparency sets on-chain loot boxes apart from their traditional counterparts by addressing concerns over fairness and encouraging player confidence.
Randomization and Its Importance
Randomization
 is the process that ensures each reward within a loot box is distributed in an unpredictable and unbiased way. It's a key component in creating and managing loot boxes because it directly impacts the player experience and the perceived fairness of the system. The excitement of opening a loot box comes from the uncertainty of what it might contain, which is made possible by effective randomization. Randomization is crucial for creating and managing loot boxes because:
It Enhances Player Experience
: The unpredictable nature of rewards makes opening loot boxes exciting and engaging for players.
It Ensures Fairness
: Proper randomization means every player has an equal chance of winning any given reward, preventing favoritism or manipulation.
Builds Trust in the System
: When players know that the randomization is genuinely fair and transparent, they are more likely to engage with the game and its loot boxes.
LYNC's Lootbox SDK
The Loobox SDK on EVM, designed to streamline the integration of Looboxes to your games and other web applications on EVM chains for users. With this SDK, developers can easily integrate Lootbox functionality into their games and applications, allowing users to open and claim rewards in the form of NFTs and tokens. Our SDK provides a simple yet powerful solution for developers looking to enhance their games and applications with the integration of loot boxes, ensuring a smooth and hassle-free user experience. With just a few lines of code, developers can unlock the full potential of randomness and EVM transactions, enabling users to easily interact with their applications.
What is inside a Lootbox
Our on-chain loot boxes are filled with a mix of 
ERC721 NFTs, ERC1155 NFTs, and ERC20 tokens
, making every opening a unique and exciting experience. The contents of these boxes are chosen using a randomization method known as the 
Verifiable Random Function (VRF)
, which is an on-chain mechanism that ensures complete fairness and transparency in selecting rewards.
ERC721 NFTs
 represent unique, one-of-a-kind digital rewards that players can receive when they open a loot box. Each ERC721 token could be an exclusive in-game item like a rare skin, a powerful weapon, a special character, or any other unique asset that enhances the gameplay experience. Because ERC721 tokens are non-fungible, each one has its distinct value and properties, making them highly desirable to players who want something unique and collectible. The use of ERC721 NFTs in loot boxes adds excitement and value by offering players the chance to obtain rare, verifiable items that are truly theirs, which they can use, trade, or sell on the blockchain.
ERC1155
 is a versatile token standard on the Ethereum blockchain that allows for the creation of both 
fungible
 (identical and interchangeable) and 
non-fungible
 (unique) tokens within a single smart contract, making it ideal for loot boxes in games. When used in loot boxes, ERC1155 enables developers to include a variety of items, such as multiple copies of a common in-game currency, resources, or potions (fungible tokens), alongside rare, unique items like exclusive skins or limited-edition weapons (non-fungible tokens). This flexibility allows for a dynamic range of rewards within a single loot box, offering players a richer and more varied experience. Additionally, ERC1155 is more efficient than previous standards, reducing transaction costs and network congestion, which is especially valuable when handling multiple items in a loot box simultaneously
ERC20 tokens
 are digital currencies that can be used within the game’s ecosystem. Players can earn these tokens through loot boxes and use them for in-game purchases, to unlock new levels, or trade them with other players. Because ERC20 tokens are compatible with external marketplaces, they offer players a way to exchange their in-game rewards for other digital assets or even real-world currency.
By including these different types of NFTs and tokens, our loot boxes provide a richer and more dynamic experience. Players know they have the chance to win not just any in-game item, but a verifiable, blockchain-based asset that could have substantial value outside the game as well. The use of the 
VRF (Verifiable Random Function)
 ensures that every time a loot box is opened, the reward selection process is genuinely random and unbiased, enhancing trust and fairness in the reward system.
Note - The current SDK version supports only 
Eth Sepolia 
and 
Base Sepolia
 testnets. But we will be coming with more EVM chains soon.
Lync Solidity Lootbox Demo
Demo Lootbox application on EVM
https://github.com/LYNC-WORLD/lootbox-evm-sdk
github.com
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Getting Started
Prerequisites
Before you begin integrating Lootbox SDK, make sure you have the following prerequisites:
Node.js (version 20 or above)
 installed on your system.
NPM (version 10 or above)
 or 
Yarn (latest version)
 installed on your system.
Integration
NPM Package: 
https://www.npmjs.com/package/@lyncworld/lootbox-evm-sdk
You can install the package using either 
npm
 or 
yarn
. Follow the following instructions to install the SDK and get started -
Open your terminal.
Navigate to your project's directory.
We have 2 packages:
Ethers v5 compatible package:
Copy
npm install --save @lyncworld/lootbox-evm-sdk

OR

Copy
yarn add @lyncworld/lootbox-evm-sdk
ethers v6 compatible package:
Copy
npm install --save @lyncworld/lootbox-evm-sdk@2.1.0-ethers-v6

OR

Copy
yarn add @lyncworld/lootbox-evm-sdk@2.2.0-ethers-v6
Congratulations! You have successfully integrated 
@lyncworld/lootbox-evm-sdk
 into your project. If you encounter any issues or have any questions, feel free to reach out to our support team for assistance.
Previous
EVM Lootbox SDK
Next
Using the SDK
Last updated 
3 months ago
Prerequisites
Integration
Using the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Using the SDK
In this Section, you will learn the functions provided by the SDK to integrate loot boxes, manage loot boxes, and interact with them in your project.
Our loot box SDK provides a variety of functionalities to create and manage the loot boxes including:
Creating a new loot box
Opening an already-created  loot box
Claiming rewards after opening a loot box
Whitelisting users to allow limited access to loot box opening and rewards claiming
Lootbox admin function
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
In the upcoming sections, we will learn about all the above functionalities individually.
Previous
Getting Started
Next
Creating a new lootbox
Last updated 
4 months ago
Creating a new lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Method Overview:
Syntax:
Parameters:
Return Value:
Errors:
Important Notes:
Products
EVM Lootbox SDK
Using the SDK
Creating a new lootbox
For creating a new Lootbox using 
@lyncworld/lootbox-evm-sdk
, you will need to create an instance of 
LyncLootboxManager
 class provided by the SDK. Here is an example of creating a new Lootbox using the SDK:
Copy
import { LyncLootBoxCreator, ChainIdentifier } from "@lyncworld/lootbox-evm-sdk";


const lootboxCreator = new LyncLootBoxCreator();


await lootboxCreator.initialize(ChainIdentifier.BASE_SEPOLIA, provider);
After creating an instance of Lync Lootbox Creator class, you can utilize the 
createLootbox
 method provided by the 
LyncLootBoxCreator
 class. Here is the complete specification of the method and an example function for creating a new Lootbox:
Method Overview:
The 
createLootbox
 function is an asynchronous method in the 
LyncLootBoxCreator
 class. This function is responsible for creating a new loot box with 
ERC20
, 
ERC721
, and 
ERC1155
 items.
Syntax:
Copy
async createLootbox(


    signer: Signer,


    erc20Items: ERC20Item[],


    erc721Items: ERC721Item[],


    erc1155Items: ERC1155Item[],


    whitelist: string[],


    trustedForwarder: string, // for meta transactions


    activateLootbox: boolean,


    maxOpensPerAddress: number,


    gasOverrides?: Overrides = {}




): Promise<TransactionResponse[]>


Parameters:
signer (Signer)*:
 The signer who will be signing the transactions.
erc20Items (ERC20Item[])*:
 An array of ERC20 items to be included in the loot box.
erc721Items (ERC721Item[])*:
 An array of ERC721 items to be included in the loot box.
erc1155Items (ERC1155Item[])*:
 An array of ERC1155 items to be included in the loot box.
whitelist (string[])*:
 An array of addresses that are whitelisted. Keep empty for no whitelist.
trustedForwarder (string)*:
 The address of the trusted forwarder for meta transactions. Pass in zero address if you don’t want to enable meta txns.
activateLootbox (boolean)*:
 A boolean indicating whether to start the loot box.
maxOpensPerAddress (number)*:
 The maximum number of times each address can open the lootbox
gasOverrides
 : Gas override parameters (such as gasLimit, gasPrice, and maxFeePerGas from ethers) that you may need to adjust if transactions are failing to go through.
All the parameters marked with 
*
 in the above list are required parameters for creating a loot box.
Return Value:
This function returns a Promise that resolves to an array of 
TransactionResponse
 objects. Each 
TransactionResponse
 object contains the transaction, the receipt of the transaction, and additional data related to the transaction.
Errors:
This function throws a 
LootBoxError
 if:
Approval fails for 
ERC20
, 
ERC721
, or 
ERC1155
 items.
Lootbox creation fails.
Important Notes:
For an existing 
ERC20
, 
ERC1155
 or 
ERC721
 item, 
name
, 
symbol
, and 
uriBase
 (in case of 
ERC1155
 and 
ERC721
 items) is not required. Therefore, you can pass empty strings as a value for these arguments:
Examples:
Copy
// For existing ERC20 item:


const existingERC20Item = {


  contractAddress: "0x...", // contract address of existing ERC20 token


  name: "", // pass empty string for existing token


  symbol: "", // pass empty string for existing token


  ...


}




// For existing ERC1155 item:


const existingERC1155Item = {


	contractAddress: "0x...", // contract address of existing ERC1155 collection


  name: "", // pass empty string for existing collection


  symbol: "", // pass empty string for existing collection


  uriBase: "", // pass empty string for existing collection


  ...


}




// For existing ERC721 item:


const existingERC721Item = {


	contractAddress: "0x...", // contract address of existing ERC721 collection


  name: "", // pass empty string for existing collection


  symbol: "", // pass empty string for existing collection


  uriBase: "", // pass empty string for existing collection


  ...


}


For a new 
ERC20
, 
ERC1155
 or 
ERC721
 item, pass the zero address as a value of the 
contractAddress
 for 
ERC20Item
, 
ERC1155Item
, or 
ERC721Item
.
Examples:
Copy
import { ethers } from "ethers";




// For existing ERC20 item:


const existingERC20Item = {


  contractAddress: ethers.constants.AddressZero, // zero address for new ERC20 token


  ...


}




// For existing ERC1155 item:


const existingERC1155Item = {


	contractAddress: ethers.constants.AddressZero, // zero address for new ERC1155 collection


  ...


}




// For existing ERC721 item:


const existingERC721Item = {


	contractAddress: ethers.constants.AddressZero, // zero address for new ERC721 collection


  ...


}


REMARKS -
This function is part of the 
LyncLootBoxCreator
 class and cannot be called independently. It must be called on an instance of the 
LyncLootBoxCreator
 class.
Previous
Using the SDK
Next
Opening a lootbox
Last updated 
4 months ago
Opening a lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Method Overview:
Parameters:
Return Value
Errors:
Products
EVM Lootbox SDK
Using the SDK
Opening a lootbox
For opening a Lootbox using 
@lyncworld/lootbox-evm-sdk
, you will need to create an instance of 
LyncLootbox
 class provided by the SDK and initialize the lootbox instance with a valid lootbox address. Here is an example of creating and initializing a lootbox using the SDK:
Copy
import { ChainIdentifier, LyncLootBox } from "@lyncworld/lootbox-evm-sdk";




const lootbox = new LyncLootBox();


const provider = new ethers.providers.Web3Provider(window.ethereum);




const lootboxId = "0x..." // a valid lootbox id created using `createLootBox` method




lootbox


	.initialize(ChainIdentifier.BASE_SEPOLIA, provider, lootboxId)


	.then((response) => console.log(response))


	.catch((err) => console.error("Error in initializing lootbox: ", err));


After creating an instance of 
LyncLootbox
 class and intializing, you can utilize the 
openLootBox
 method provided by the 
LyncLootBox
 class. Here is the complete specification of the method and an example function for creating a new Lootbox:
Method Overview:
The 
openLootBox
 function is an asynchronous function that is used to open a loot box. It performs several checks and operations before and after the loot box is opened.
Parameters:
The function takes one parameter:
signer (Signer):
 The signer who will be signing the open loot box transactions. It represents the entity (usually a user) that is initiating the transaction to open the loot box.
gasOverrides?:
 (optional) Gas override parameters (such as gasLimit, gasPrice, and maxFeePerGas from ethers) that you may need to adjust if transactions are failing to go through.
Return Value
The function returns a 
Promise
 that resolves to an object with two properties:
txn
: This is the transaction object returned from the 
openLootBox
 function of the 
lootBoxInstance
.
receipt
: This is the receipt object returned from calling the 
wait
 function on the transaction object.
Errors:
The function can throw several errors, all instances of the 
LootBoxError
 class:
If the Merkle proof validation fails, it throws a 
LootBoxError
 with the 
VALIDATION_ERROR
 code.
If the wallet has no more remaining opens, it throws a 
LootBoxError
 with the 
LOOTBOX_OPENED_ERROR
 code.
If there are too many pending requests, it throws a 
LootBoxError
 with the 
TOO_MANY_REQUESTS_ERROR
 code.
If the loot box opening fails for any other reason, it throws a 
LootBoxError
 with the 
LOOTBOX_OPENED_ERROR
 code.
NOTE -
This function will trigger a transaction on the blockchain, which will require the user to pay gas fees. Make sure the user is aware of this before calling this function. The 
TransactionResponse
 object can be used to track the status of the transaction on the blockchain.
Previous
Creating a new lootbox
Next
Claiming rewards
Last updated 
4 months ago
Claiming rewards | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Using the SDK
Claiming rewards
After opening a lootbox using the above method, you can utilize the 
claimRewards
 method provided by the 
LyncLootBox
 class.
NOTE -
Since you can open the lootbox multiple time so you can also claim the rewards from multiple opens in a single transaction. Example: Lets say you open the lootbox 2 times and got 2 tokens for the first open and 1 for the second open. When you claim you can get all the 3 tokens(accumulated rewards) in a single claim transaction.
Here is the complete specification of the method and an example function for creating a new Lootbox:
Method Overview:
The 
claimRewards
 function is an asynchronous function that is used to claim the rewards from a loot box. It performs several checks and operations before and after the rewards are claimed.
Parameters:
The function takes one parameter:
signer (Signer):
 The signer who will be signing the claim rewards transactions. It represents the entity (usually a user) that is initiating the transaction to claim the rewards.
Return Value
The function returns a 
Promise
 that resolves to an object with two properties:
txn
: This is the transaction object returned from the 
claimRewards
 function of the 
lootBoxInstance
.
receipt
: This is the receipt object returned from calling the 
wait
 function on the transaction object.
Errors:
The function can throw several errors, all instances of the 
LootBoxError
 class:
If there is nothing to claim a 
LootBoxError
 with the 
LOOTBOX_REWARDS_CLAIM_ERROR
 code.
If the rewards claim fails for any other reason, it throws a 
LootBoxError
 with the 
LOOTBOX_REWARDS_CLAIM_ERROR
 code.
NOTE -
This function will trigger a transaction on the blockchain, which will require the user to pay gas fees. Make sure the user is aware of this before calling this function. The TransactionResponse object can be used to track the status of the transaction on the blockchain.
Previous
Opening a lootbox
Next
Whitelisting users using lootbox
Last updated 
4 months ago
Method Overview:
Parameters:
Return Value
Errors:
Whitelisting users using lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Whitelisting addresses when creating a loot box:
Updating Whitelisted Addresses After Creating a Loot box
Getting All Whitelisted Addresses for a Particular Loot Box:
Products
EVM Lootbox SDK
Using the SDK
Whitelisting users using lootbox
Lync’s 
lootbox-evm-sdk
 allows developers to whitelist wallet addresses that can open a loot box created using the SDK. Developers can either whitelist the addresses at the time of creating a loot box or they can also update the whitelisted addresses for a specific loot box later after creating the loot box. However, if a loot box is already opened using a wallet address, then blacklisting that wallet address after opening the loot box will not affect the claiming of earned rewards using that wallet address.
Here is an example of how developers can whitelist addresses at the time of creating the loot box.
Whitelisting addresses when creating a loot box:
Copy
import { LyncLootBoxCreator, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const creator = new LyncLootBoxCreator();


// ... initialize creator




const whitelistedAddresses = [


	"0x7dDa381c4B8fA68b35B3dA9436a584e20B6e45bF",


	"0x066947610A6a5F81C958E31501ED22BBEB5301Ec",


	...


	"0x6f77A19d1828CE87226e1595aBD0be867e6FF3c2"


]; // array of whitelisted addresses.




async function createNewLootbox() {


  try {


    const provider = new ethers.providers.Web3Provider(window.ethereum);


    await provider.send("eth_requestAccounts", []);




    const signer = provider.getSigner();




    const responseData = await creator.createLootbox(


      signer,


      ...  // Other arguments


      whitelistedAddresses,


      ...  // Other arguments


    );


    const lootboxData = responseData[0].data;




    if (!lootboxData) {


      console.error("Something went wrong while creating lootbox. Please try again later.");


      return;


    }




    return lootboxData;


  } catch (err: unknown) {


    console.error("Error creating lootbox: ", err);




    if (err instanceof LootBoxError || err instanceof Error) {


      console.error(err.message);


    } else {


      console.error("Something went wrong while creating lootbox. Please try again later.");


    }


  }


}
The above example creates a loot box that can only be opened by the addresses included in 
whitelistedAddresses
 array. However, If you pass an empty array for whitelisted addresses, the above method will create a loot box that can be opened by anyone.
Updating Whitelisted Addresses After Creating a Loot box
NOTE -
This is a admin function so only lootbox owner can do this
Developers can also update the whitelisted addresses after creating a loot box using the function 
updateWhitelist
 provided by 
LootBoxManager
 class. However, to update the whitelisted addresses, the developer has to pass an array of wallet addresses to be whitelisted.
Please note, that the 
updateWhitelist
 function replaces the old whitelisted array with the new whitelisted array provided in the argument. Therefore if the developer wants to add new whitelisted addresses while keeping the old ones as it is, they have to pass an array of whitelisted wallet addresses that contains all the old addresses in the same order and add the new addresses to be whitelisted to the whitelisted array.
Here is an example of how developers can update the whitelisted addresses later after the creation of the loot box.
Copy
import { LyncLootBox, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const lb = new LyncLootBox();


const lootboxId = "..."  // Id of the loot box for which the whitelisted addresses have to be updated




const updatedWhitelistedAddresses = [


	"0x7dDa381c4B8fA68b35B3dA9436a584e20B6e45bF",  // Old address


	"0x066947610A6a5F81C958E31501ED22BBEB5301Ec",  // Old address


	...


	"0x6f77A19d1828CE87226e1595aBD0be867e6FF3c2",  // Old address


	...


	"0x031C9497D32543104011315d511A0c42e446b45C",  // New address


	"0xc805A7762be267432a944A3266D3E9d3348d9172"   // New address


]; // updated array of whitelisted addresses.




async function updateWhitelistedAddresses() {


    try {


      const provider = new ethers.providers.Web3Provider(window.ethereum);


      await provider.send("eth_requestAccounts", []);




      const signer = provider.getSigner();


		  await lb.initialize(


		      ChainIdentifier.BASE_SEPOLIA, // your chain


		      provider,


			    lootboxId


	    );




      const response = await lb.updateWhitelist(signer, updatedWhitelistedAddresses);


      console.log("Update Whitelist Response: ", response);


    } catch (error) {


      console.error("Error updating whitelist", error);




      if (error instanceof LootBoxError || error instanceof Error) {


        console.error(error.message);


      } else {


        console.error("An error occurred while updating whitelist.");


      }


    }


  };
Getting All Whitelisted Addresses for a Particular Loot Box:
The 
LootBoxManager
 class provides 
showWhitelist
 function, which can be used to fetch all the whitelisted addresses for a particular loot box.
Here is an example of how developers can fetch whitelisted addresses for a particular loot box.
Copy
import { LyncLootBox, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const lb = new LyncLootBox();


const lootboxId = "..."  // Id of the loot box for which the whitelisted addresses have to be fetched




async function fetchWhitelistedAddresses() {


    try {


		  await lb.initialize(


	      ChainIdentifier.BASE_SEPOLIA, // your chain


	      provider, // provider


		    lootboxId


	    );


      const whitelistedAddresses = await lb.showWhitelist();


      console.log("Whitelisted addresses:", whitelistedAddresses);


    } catch (error) {


      console.error("Error fetching whitelisted addresses", error);


    }


  };
Previous
Claiming rewards
Next
Lootbox admin functions
Last updated 
4 months ago
Lootbox admin functions | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
1. activate
2. deactivate
3. removeItem
4. permanentlyStop
5. updateRemainingOpensForAddresses
6. changeTrustedForwarder
7. transferOwnership
Products
EVM Lootbox SDK
Using the SDK
Lootbox admin functions
These are function that only the lootbox owner can call. One of the function (update whitelist) is already described above.
Initialize the class before calling any of these functions
Copy
import { LyncLootBox, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const lb = new LyncLootBox();


await lb.initialize(


	ChainIdentifier.BASE_SEPOLIA, // your chain


	provider, // provider


	lootboxId // your lootbox id / address


);
NOTE -
These functions if called with a signer that is not the owner of the lootbox will throw 
LBErrorCodes.VALIDATION_ERROR
 with the message 
"Signer is not the lootbox owner."
1. 
activate
This function activates a lootbox which might be deactivated by the owner earlier or might be deactivated while creating the lootbox using the 
activateLootbox
 option.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const txn = await lb.activate(signer);


console.log(txn);
2. 
deactivate
This function deactivates the lootbox which stops any new users from opening the lootbox. This will temporarily stop the lootbox and will not remove any items from the lootbox.
NOTE: Users with any pending claims can still claim their rewards.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const txn = await lb.deactivate(signer);


console.log(txn);
3. 
removeItem
This will remove one item from the lootbox. It will withdraw the item if it is present in the lootbox and send it to the owner of the lootbox.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const itemAddress = ... // item address - should be present in lootbox


const txn = await lb.removeItem(signer, itemAddress);


console.log(txn);
4. 
permanentlyStop
This will permanently disable the lootbox and withdraw all the items from the lootbox and send it to lootbox owner. This action will permanently disable all functions of the lootbox except for the 
claimRewards
 function. Users who have pending rewards from previous openings will still be able to claim them. This will also stop the lootbox from receiving any new RNGs from supra.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const txn = await lb.permanentlyStop(signer);


console.log(txn);
5. 
updateRemainingOpensForAddresses
Since, there could be multiple opens per wallet. This function can be used to set the number of opens for some addresses other then the default passed during creation.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const addresses = [


	"0x...",


	... more addresses


];


const remainingOpens = [


	2,


	... new remainingOpens for other addresses


]


const txn = await lb.updateRemainingOpensForAddresses(


	signer, 


	addresses, 


	remainingOpens


);


console.log(txn);
6. 
changeTrustedForwarder
Change the trusted forwarder for meta transactions. Can be useful when you switch meta transaction providers.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const newForwarder = "0x..." // new forwarder address


const txn = await lb.changeTrustedForwarder(signer, newForwarder);


console.log(txn);
7. 
transferOwnership
Change the lootbox owner.
NOTE -
If you change the ownership of the lootbox and then withdraw any item or permanently stop the lootbox all the contents of the lootbox will be sent to the new owner.
Copy
const signer = ... // transaction signer - should be the lootbox owner


const newOwner = "0x..." // new lootbox owner


const txn = await lb.transferOwnership(signer, newOwner);


console.log(txn);
Previous
Whitelisting users using lootbox
Next
Useful information functions from LyncLootBox class
Last updated 
4 months ago
Useful information functions from LyncLootBox class | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
1. isEmpty
2. itemAddresses
3. owner
4. active
5. permanentlyStopped
6. chainId
7. creator
8. merkleRoot
9. remainingOpens
10. hasPendingClaims
11. lootboxContents
12. trustedForwarder
13. getRewardsForAddress
14. getAllRewardsForAddress
Products
EVM Lootbox SDK
Using the SDK
Useful information functions from LyncLootBox class
NOTE -
These are information functions and do not require a signer. Just the provider will work!
Initialize the class before calling any of these functions.
Copy
import { LyncLootBox, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const lb = new LyncLootBox();


await lb.initialize(


	ChainIdentifier.BASE_SEPOLIA, // your chain


	provider, // provider


	lootboxId // your lootbox id / address


);
1. 
isEmpty
Checks if the lootbox is empty or not.
Copy
const empty = await lb.isEmpty();


console.log(empty); // true or false
2. 
itemAddresses
Lists the item addresses that are present in the lootbox.
Copy
const itemAddresses = await lb.itemAddresses();


console.log(itemAddresses); // Array of addresses
NOTE -
It has an optional parameter 
useSubgraph
 which takes a boolean. If set to true, it will utilize the subgraph instead of directly querying the blockchain.
3. 
owner
Returns the owner of the lootbox.
Copy
const owner = await lb.owner();


console.log(owner); // Owner address
4. 
active
Returns the status of the lootbox.
Copy
const isActive = await lb.active();


console.log(isActive); // true or false
5. 
permanentlyStopped
Returns whether the lootbox is permanently stopped or not.
Copy
const killed = await lb.permanentlyStopped();


console.log(killed); // true or false
6. 
chainId
Returns the chainId.
Copy
const chainId = await lb.chainId();


console.log(chainId); // chain id
7. 
creator
Returns the address of the lootbox creator.
Copy
const creator = await lb.creator();


console.log(creator); // Address of lootbox creator
8. 
merkleRoot
Returns the merkle root since we use the merkle tree method of whitelisting large number addresses.
Copy
const merkleRoot = await lb.merkleRoot();


console.log(merkleRoot); // merkleRoot Hex
9. 
remainingOpens
Returns the number of time a wallet can still open the lootbox.
Copy
const walletAddress = "0x...";


const opens = await lb.remainingOpens(walletAddress);


console.log(opens); // number of opens for the walletAddress
10. 
hasPendingClaims
Returns whether a wallet has some pending claims or not.
Copy
const walletAddress = "0x...";


const canClaim = await lb.hasPendingClaims(walletAddress);


console.log(canClaim); // true of false
11. 
lootboxContents
Returns the current state of the lootbox. Details like which item is present in the lootbox, quantity and tokenIds.
NOTE -
This function utilizes the subgraph, which may result in a slight delay in retrieving the data.
Copy
const contents = await lb.lootboxContents();


console.log(contents); 
Example output:
Copy
{


  erc20Items: [


    {


      itemAddress: '0x...', // addres of the erc20 token


      tokenAmount: '85517387241022654383'


    },


    ... more items


  ],


  erc721Items: [


	  {


		  itemAddress: '0x...', // addres of the erc721 token


			tokenIds: []


    },


    ... more items


  ],


  erc1155Items: [


    {


      itemAddress: '0x...', // addres of the erc1155 token


      tokenIds: ['1', '2', '3', ...], // remaining token Ids


	    tokenAmounts: ['5', '8', '1', ...] // remaining token amounts


    },


    ... more items


  ]


}
12. 
trustedForwarder
Get the current trusted forwarder address.
Copy
const trustedForwarder = await lb.trustedForwarder();


console.log(trustedForwarder); // address of trustedForwarder
13. 
getRewardsForAddress
Get the rewards for the address which has opened the lootbox. It returns all the accumulated rewards.
Copy
const walletAddress = "0x..."; 


const rewards = await lb.getRewardsForAddress(walletAddress);


console.log(rewards); // array of rewards
Example output:
Copy
[


  {


    itemAddress: '0x8869d99c72aF9d4A00090e298Af990303216f0D0',


    tokenId: '',


    tokenAmount: '12933075821210463238',


    uri: '',


    type: 'ERC20'


  },


  {


    itemAddress: '0xd34EFc9525bb841D707ae99bfd4fD77f92775980',


    tokenId: '35',


    tokenAmount: '1',


    uri: '<https://example.com/35.json>',


    type: 'ERC721'


  },


  {


    itemAddress: '0xd34EFc9525bb841D707ae99bfd4fD77f92775980',


    tokenId: '73',


    tokenAmount: '1',


    uri: '<https://example.com/73.json>',


    type: 'ERC721'


  },


  {


    itemAddress: '0xd34EFc9525bb841D707ae99bfd4fD77f92775980',


    tokenId: '14',


    tokenAmount: '1',


    uri: '<https://example.com/14.json>',


    type: 'ERC721'


  },


  {


    itemAddress: '0x815b49F19e0ea4e4cdc87a65B96D6A8222e0AF21',


    tokenId: '29',


    tokenAmount: '1',


    uri: '<https://example.com/29.json>',


    type: 'ERC721'


  },


  {


    itemAddress: '0x408410fe1d572E5560d3f73F330EC4F298D20B4f',


    tokenId: '4',


    tokenAmount: '1',


    uri: '<https://example.com/4.json>',


    type: 'ERC1155'


  },


  {


    itemAddress: '0x408410fe1d572E5560d3f73F330EC4F298D20B4f',


    tokenId: '7',


    tokenAmount: '1',


    uri: '<https://example.com/7.json>',


    type: 'ERC1155'


  },


  {


    itemAddress: '0x2B4B00f625E595C4B5e7381968ff32fB565985D4',


    tokenId: '2',


    tokenAmount: '3',


    uri: '<https://example.com/2.json>',


    type: 'ERC1155'


  }


]
14. 
getAllRewardsForAddress
Returns all the rewards a wallet has gotten till now. Uses subgraph
Copy
const walletAddress = "0x..."; 


const rewardsAll = await lb.getAllRewardsForAddress(walletAddress);


console.log(rewardsAll); // array 
Example output:
Copy
{


  erc20Items: [


    {


      itemAddress: '0x...', // addres of the erc20 token


      tokenAmount: '85517387241022654383' // total token amount for this wallet


    },


    ... more items


  ],


  erc721Items: [


	  {


		  itemAddress: '0x...', // addres of the erc721 token


			tokenIds: ['2', '3', ...] // all the token ids for this wallet


    },


    ... more items


  ],


  erc1155Items: [


    {


      itemAddress: '0x...', // addres of the erc1155 token


      tokenIds: ['1', '2', '3', ...], // all the token ids for this wallet


	    tokenAmounts: ['5', '8', '1', ...] // respective token amounts 


    },


    ... more items


  ]


}
Previous
Lootbox admin functions
Next
Multicall : opening and claiming multiple lootboxes in a single transaction
Last updated 
4 months ago
Multicall : opening and claiming multiple lootboxes in a single transaction | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
1. openMulticall
2. claimRewardsMulticall
Products
EVM Lootbox SDK
Using the SDK
Multicall : opening and claiming multiple lootboxes in a single transaction
Initialize the 
LyncLootBoxMulticall
 class
Copy
import { LyncLootBoxMulticall, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const multicall = new LyncLootBoxMulticall();


await multicall.initialize(


	ChainIdentifier.BASE_SEPOLIA, // your chain


	provider, // provider


);
1. 
openMulticall
Open multiple lootboxes in a single transaction:
Copy
const signer = ... // transaction signer


const lootboxes = [


	'0x...',


	... more lootbox ids / addresses


];




const txn = await multicall.openMulticall(


	signer,


	lootboxes


);


console.log(txn);
NOTE -
This can be used to open single lootbox multiple times (if allowed), by passing in same address multiple times.
2. 
claimRewardsMulticall
Open multiple lootboxes in a single transaction:
Copy
const signer = ... // transaction signer


const lootboxes = [


	'0x...',


	... more lootbox ids / addresses


];




const txn = await multicall.claimRewardsMulticall(


	signer,


	lootboxes


);


console.log(txn);
NOTE -
This cannot be used to claim single lootbox multiple times.
Previous
Useful information functions from LyncLootBox class
Next
Example Codes in React & TypeScript
Last updated 
4 months ago
Example Codes in React & TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Example Codes in React & TypeScript
In this Section, you will be provided with the example codes in React and TypeScript, to manage loot boxes, and interact with them in your project.
These examples can be used to simulate a variety of functionalities to create and manage the loot boxes in a React application. The example includes:
Example code for creating a new loot box
Example code for opening an already-created  loot box
Example code for claiming rewards after opening a loot box
Example code of other utility functions provided by the SDK
In the upcoming sections, we will look into the code examples of all the above functionalities individually.
Previous
Multicall : opening and claiming multiple lootboxes in a single transaction
Next
Example code for creating a new lootbox
Last updated 
5 months ago
Example code for creating a new lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Example:
Types used in the above example:
Products
EVM Lootbox SDK
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example:
Copy
import { LyncLootBoxManager, ERC1155Item, ERC20Item, ERC721Item, LootBoxError } from "@lyncworld/lootbox-evm-sdk";


import { ethers } from "ethers";




const lootboxManager = new LyncLootBoxManager();




const erc20Items: ERC20Item = [...]; // array of ERC20 items


const erc721Items: ERC721Item = [...]; // array of ERC721 items


const erc1155Items: ERC1155Item = [...]; // array of ERC1155 items


const whitelist = [...]; // array of whitelisted addresses (Keep empty for no whitelist.)


const trustedForwarder = '0x...'; // trusted forwarder address


const startLootbox = true;




async function createNewLootbox() {


  try {


    const provider = new ethers.providers.Web3Provider(window.ethereum);


    await provider.send("eth_requestAccounts", []);




    const signer = provider.getSigner();




    const responseData = await lootboxManager.createLootbox(


      signer,


      erc20Items,


      erc721Items,


      erc1155Items,


      whitelist,


      trustedForwarder,


      startLootbox


    );


    const lootboxData = responseData[0].data;




    if (!lootboxData) {


      console.error("Something went wrong while creating lootbox. Please try again later.");


      return;


    }




    return lootboxData;


  } catch (err: unknown) {


    console.error("Error creating lootbox: ", err);




    if (err instanceof LootBoxError || err instanceof Error) {


      toast.error(err.message);


    } else {


      toast.error("Something went wrong while creating lootbox. Please try again later.");


    }


  } finally {


    setCreatingLootbox(false);


  }


}


Types used in the above example:
Copy
type RangeInclusive = {


  // start of the range


  start: BigNumberish;




  // end of the range


  end: BigNumberish;


};




type ERC20Item = {


  contractAddress?: string;


  name?: string;


  symbol?: string;




  // When a user opens the loot box, they will get token amounts between this range


  pickRange: RangeInclusive;




  // Total amount of tokens to be deposited to the loot box for rewards 


  tokenAmount: BigNumberish;


};




type ERC721Item = {


  contractAddress?: string;


  name?: string;


  symbol?: string;


  uriBase?: string;




  // When a user opens the loot box, they will get randomly NFTs with token IDs between


  // this range.


  pickRange: RangeInclusive;




  // Range of token IDs to be deposited to the loot box for rewards


  inputTokenIdRange: RangeInclusive;




  // Array of unique token IDs to be deposited to the loot box for rewards


  inputTokenIds: BigNumberish[];


};




Note - In the above type for ERC721 item, either `inputTokenIdRange` or `inputTokenIds` has to be passed when creating a lootbox using the SDK. You cannot pass both `inputTokenIdRange` and `inputTokenIds`.




type ERC1155Item = {


  contractAddress?: string;


  name?: string;


  symbol?: string;


  uriBase?: string;




  // When a user opens the loot box, they will get randomly NFTs with token IDs between


  // this range.


  pickRange: RangeInclusive;




  // Range of token IDs to be deposited to the loot box for rewards


  inputTokenIdRange: RangeInclusive;




  // Fixed token amounts for each token IDS provided in `inputTokenIdRange` (above)


  inputTokenAmountFixed: BigNumberish;




  // Fixed range of NFTs to be picked corresponding to the `inputTokenIdRange`


  // (above) when a user opens a loot box.


  amountPickRangeFixed: RangeInclusive;




  // For example - Let's say you have `inputTokenIdRange` {start: 1, end: 10} with


  // `inputTokenAmountFixed` 20 (for each token ID 1 through 10) and


  // `amountPickRangeFixed` {start: 5, end: 8} (for each token Ids 1 through 10).


  // Then when a user opens a lootbox and gets the token ID 2 as a reward.


  // Then he/she will receive the token amount in the range of 5 to 8 as passed in


  // `amountPickRangeFixed`




  // Array of unique token IDs to be deposited to the loot box for rewards


  inputTokenIds: BigNumberish[];




  // Array of token amounts corresponding to the `inputTokenIds` (above)


  inputTokenAmounts: BigNumberish[];




  // Array of range of NFTs to be picked corresponding to the `inputTokenIds` (above) when a user opens a loot box.


  amountPickRanges: RangeInclusive[];




  // For example - Let's say you have `inputTokenIds` [1, 2, 3] with


  // `inputTokenAmounts` [40, 50, 60] and `amountPickRanges` [{start: 5, end: 6},


  // {start: 7, end: 8}, {start: 9, end: 10}]. Then when a user opens a loot box and get


  // the token ID 2 as a reward. Then he/she will receive the token amount in the range


  // of 7 to 8 as passed in `amountPickRanges`


};




Note - In the above type for the ERC1155 item, either `inputTokenIdRange`, `inputTokenAmountFixed`, `amountPickRangeFixed` or `inputTokenIds`, `inputTokenAmounts`, `amountPickRanges` has to be passed when creating a loot box using the SDK. You cannot pass both `inputTokenIdRange`, `inputTokenAmountFixed`, `amountPickRangeFixed` and `inputTokenIds`, `inputTokenAmounts`, `amountPickRanges`.




enum LBErrorCodes {


  NORMALIZATION_ERROR = "NORMALIZATION_ERROR",


  VALIDATION_ERROR = "VALIDATION_ERROR",


  INITIALIZATION_ERROR = "INITIALIZATION_ERROR",


  LOOTBOX_OPENED_ERROR = "LOOTBOX_OPENED_ERROR",


  LOOTBOX_MULTICALL_OPEN_ERROR = "LOOTBOX_MULTICALL_OPEN_ERROR",


  LOOTBOX_MULTICALL_CLAIM_ERROR = "LOOTBOX_MULTICALL_CLAIM_ERROR",


  TOO_MANY_REQUESTS_ERROR = "TOO_MANY_REQUESTS_ERROR",


  LOOTBOX_REWARDS_CLAIM_ERROR = "LOOTBOX_REWARDS_CLAIM_ERROR",


  RNG_PENDING_ERROR = "RNG_PENDING_ERROR",


  RNG_TIMEOUT_ERROR = "RNG_TIMEOUT_ERROR",


  LOOTBOX_ACTIVE_ERROR = "LOOTBOX_ACTIVE_ERROR",


  LOOTBOX_INACTIVE_ERROR = "LOOTBOX_INACTIVE_ERROR",


  LOOTBOX_PERMANENTLY_STOPPED_ERROR = "LOOTBOX_PERMANENTLY_STOPPED_ERROR",


  APPROVAL_ERROR = "APPROVAL_ERROR",


  LOOTBOX_CREATION_ERROR = "LOOTBOX_CREATION_ERROR",


  MERKLE_ROOT_MISMATCH_ERROR = "MERKLE_ROOT_MISMATCH_ERROR",


  SERVER_ERROR = "SERVER_ERROR",


  LOOTBOX_ACTIVATION_ERROR = "LOOTBOX_ACTIVATION_ERROR",


  LOOTBOX_ITEM_REMOVAL_ERROR = "LOOTBOX_ITEM_REMOVAL_ERROR",


  REMAINING_OPENS_UPDATE_ERROR = "REMAINING_OPENS_UPDATE_ERROR",


  TRUSTED_FORWARDER_UPDATE_ERROR = "TRUSTED_FORWARDER_UPDATE_ERROR",


  TRANSFER_OWNER_ERROR = "TRANSFER_OWNER_ERROR",


}




interface ApprovalData {


  itemAddress: string;


  itemType: ItemType;


  amount?: string;


}




interface CreateLootBoxData {


  lootBoxAddress: string;


  itemAddresses: string[];


}




interface TransactionResponse {


  txn: ContractTransaction;


  receipt: ContractReceipt;


  data?: ApprovalData | CreateLootBoxData;


}
Previous
Example Codes in React & TypeScript
Next
Example code for opening a lootbox
Last updated 
4 months ago
Example code for opening a lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Example Codes in React & TypeScript
Example code for opening a lootbox
Example:
Copy
import { ChainIdentifier, LootBoxError, LyncLootBox } from "@lyncworld/lootbox-evm-sdk";




const lootbox = new LyncLootBox();


const provider = new ethers.providers.Web3Provider(window.ethereum);




const lootboxId = "0x..." // a valid lootbox id created using `createLootBox` method




lootbox


	.initialize(ChainIdentifier.BASE_SEPOLIA, provider, lootboxId)


	.then((response) => console.log(response))


	.catch((err) => console.error("Error in initializing lootbox: ", err));




async function openLootbox() {


    try {


      const isEmpty = await lootbox.isEmpty();




      if (isEmpty) return;




      const signer = provider.getSigner();


      const responseData = await lootbox.openLootBox(signer);


      console.log("Transaction response: ", responseData);


    } catch (err: unknown) {


      console.error("Error in handleLootBoxOpen: ", err);




      if (err instanceof LootBoxError || err instanceof Error) {


        console.error(err.message);


      } else {


        console.error("Something went wrong! Please refresh and try again.");


      }


    }


  }
Previous
Example code for creating a new lootbox
Next
Example code for claiming a lootbox
Last updated 
4 months ago
Example code for claiming a lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
EVM Lootbox SDK
Example Codes in React & TypeScript
Example code for claiming a lootbox
Example:
Copy
import { ChainIdentifier, LootBoxError, LyncLootBox } from "@lyncworld/lootbox-evm-sdk";




const lootbox = new LyncLootBox();


const provider = new ethers.providers.Web3Provider(window.ethereum);




const lootboxId = "0x..." // a valid lootbox id created using `createLootBox` method




lootbox


	.initialize(ChainIdentifier.BASE_SEPOLIA, provider, lootboxId)


	.then((response) => console.log(response))


	.catch((err) => console.error("Error in initializing lootbox: ", err));




async function openLootbox() {


    try {


      const hasClaims = await lootbox.hasPendingClaims(String(walletAddress)); // checks if you have anything to claim from your open(s)


      if (!hasClaims) return;




      const signer = provider.getSigner();


      const responseData = await lootbox.claimRewards(signer);


      console.log("Transaction response: ", responseData);


    } catch (err: unknown) {


      console.error("Error in handleClaimNfts: ", err);




      if (err instanceof LootBoxError) {


		      console.error(err.message);


      }


    }


  }
Previous
Example code for opening a lootbox
Next
Launch your products on Telegram
Last updated 
4 months ago
Launch your products on Telegram | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Launch your Telegram Bot:
LYNC's Telegram Mini Apps Deployer
Products
Launch your products on Telegram
Previous
Example code for claiming a lootbox
Next
Configure Your Telegram Bot
Last updated 
4 months ago
Telegram mini apps are a new and convenient way for businesses to engage with audiences directly within Telegram's user-friendly interface. These web apps runs within the Telegram environment, offering seamless integration with the platform's UI and functionality. These apps provide users with additional services, interactive content, and tools directly in chats or channels without requiring them to leave the Telegram app.
Launch your Telegram Bot:
Telegram mini apps provide a powerful and convenient way for developers to deliver interactive, feature-rich experiences within Telegram's ecosystem.
Key features of Telegram mini apps:
Built with Web Technologies
: Mini apps are created using HTML, CSS, and JavaScript, making them accessible across platforms.
Inline Integration
: Users can interact with mini apps directly in conversations, channels, or groups. For example, they might perform actions like voting in a poll or playing a game.
Bot-Powered
: Mini apps are often accompanied by Telegram bots, which handle the interaction logic. Bots can trigger the mini app and interact with the user through the chat interface.
Secure and Lightweight
: These apps are sandboxed within Telegram and cannot access users' private data unless explicitly allowed by the user.
Instant Launch
: Users can open mini apps with a single tap, and the apps load instantly, leveraging the Telegram WebView technology.
Cross-Platform
: Since they are web-based, they work across all devices where Telegram is supported—mobile, desktop, and web versions.
LYNC's Telegram Mini Apps Deployer
With LYNC's Telegram mini app deployer, user can deploy and manage Telegram mini apps simply by filling out a quick and easy form. This is a simple dashboard for deploying and managing Telegram mini apps. It allows users to deploy and manage telegram mini apps without any coding knowledge. Users can deploy their own Telegram mini apps just by filling out a simple form. 
https://web3bot.lync.world/
web3bot.lync.world
Web3 Bot Launcher
LYNC Telegram Mini Apps Deployer
Configure Your Telegram Bot | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
Launch your products on Telegram
Configure Your Telegram Bot
Previous
Launch your products on Telegram
Next
Deploying Your Product on TG
Last updated 
4 months ago
Before deploying the product on Telegram, we need to create a bot from Telegram by using a bot called 
BotFather
.
Step 1: Sign in to Telegram Messenger
Navigate to 
Telegram messenger
.
Sign in to Telegram app using your credentials.
Step 2: Create a New Bot
If you did not have an existing bot, search for the 
BotFather
 Telegram bot in your Telegram messenger app and choose the first bot.
Select the BotFather bot and click on the 
START
 button on the top right corner to start the BotFather bot. You will see a list of commands that you can use to interact with BotFather bot.
Click on the 
/newbot
 command to create a new bot. You will use this new bot to deploy and control your web app withing the Telegram's environment.
Step 3: Configure Your Bot
After clicking on the 
/newbot
 command,
A message will be prompted by BotFather bot, asking you a name for your bot. 
Choose a username of your choice to move forward.
After choosing a name of your bot, you will get another message by BotFather, asking you for the username of your bot. The bot's username is a unique identifier that distinguishes it on the platform and must end with 
Bot
.
Choose a username for your bot of your choice. 
Keep in mind that the username of the bot should be unique, must end with the word "Bot", can be 5-32 characters long, and may contain letters, numbers, and underscores (_).
Step 4: Get the Access Token of Your Bot
After choosing a valid username of your bot, you will get a message by BotFather. This message is a confirmation that your bot is created successfully and contains the 
access token
 of your bot.
NOTE -
In Telegram bots, an 
access token
 is a unique key provided by 
BotFather
 when you create a bot. This token is essential for authenticating your bot and interacting with the Telegram Bot API. This token allows you to integrate the bot with your app or service.
This access token will be required to deploy and control your web application using this bot in Telegram's environment. Keep this access token safe with you, it can be used by anyone to control your bot..
BotFather Telegram Bot
Click on the START Button to Start the BotFather Bot
Click on the Highlighted Command to Create a New Bot
Choose a Unique Name for Your Bot
Choose a Unique Username for Your Bot
Access Token of your Bot
Deploying Your Product on TG | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Products
Launch your products on Telegram
Deploying Your Product on TG
Previous
Configure Your Telegram Bot
Next
LYNC Paymaster - Supporting Aptos
Last updated 
4 months ago
With LYNC's Web3 Bot deployer, user can deploy and manage Telegram apps simply by filling out a quick and easy form. 
This is a simple dashboard for deploying and managing Telegram mini apps without any prior coding experience. 
Getting Your Telegram Bot's Access Token
Before deploying your web application, you will require the Telegram bot's access token. Please follow the documentation 
here
 to get the access token of your Telegram bot.
Deploying Your Products on Telegram using LYNC's Deployer
Visit the 
LYNC Web3 Bot Launcher
 to getting started with the deployment.
Sign in with your Google account using the button on the top right corner to get started with the deployment. 
After successfully signing in, click on the "Deploy Your Mini App" button to access the deployment form.
Fill the required details in the form. The form requires the following details in order to link your app with your telegram bot -
Access token
 - The token given by BotFather bot when creating your Telegram bot 
(see here)
.
Your Web Application URL
 - URL of the web application that will be linked to your Telegram bot.
Menu Button Text
 - The text is displayed on the button that will be used to launch your web application within Telegram application. (Example: Launch,, Start Play etc.)
Short Description of the Telegram Bot (optional) 
- This is shown on the bot's profile page and is sent together with the link when users share the bot. You can keep it empty to remove the current short description.
Bot Description (optional)
 - This is shown in the chat with the bot if the chat is empty. You can keep it empty to remove the current description.
After fill out the form correctly, Click on the "Deploy Mini App" button to start the deployment process. This may take a few seconds and will link the given web application URL and set the other properties of your bot as filled in the deployment form.
After successful deployment, you will get a success message with a link to your Telegram bot. You can click on the link and launch and start interacting with your web application using your Telegram bot. The other details (like Menu button and description) will also be reflected in the chat of your Telegram bot.
Click on the "LAUNCH" button to launch your web application within Telegram's environment and start interacting with your website. Now you can share the URL given after the deployment with your users to let them interact with your bot and web application within Telegram'e environment.
Getting Your Telegram Bot's Access Token
Deploying Your Products on Telegram using LYNC's Deployer
LYNC's Telegram Mini Apps Deployer
Sign In With Your Google Account
Navigate to Deployment Form
Deployment Form
Button to launch your product on Telegram
Fill Out the Required Details
Click on the Button to Deploy Your Mini App
Successful Deployment of Telegram Mini App
Telegram Bot is Ready to Launch Your Web Application
LYNC Paymaster - Supporting Aptos | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Missing LYNC between Dapps and Users
Key challenges include:
LYNCing dApps to Users: Bridging the Gap with Paymaster
Who should LYNC ?
LYNC for Users
APTOS
LYNC Paymaster - Supporting Aptos
Unlock user engagement and drive adoption with LYNC's gasless transactions, incentivizing users, enhancing their experience, and integrating seamlessly with your game, dApp, or DeFi platform.
Missing LYNC between Dapps and Users
In the rapidly evolving world of blockchain technology, user onboarding and transaction experiences remain significant hurdles for widespread adoption. Decentralized Applications (DApps) often present complexities that can deter potential users, particularly those unfamiliar with blockchain mechanics. 
Key challenges include:
Mandatory Wallet Balance for Gas Fees:
 Users need APT tokens to cover gas fees, which requires buying tokens, completing KYC procedures, and transferring from exchanges to wallets. This multi-step process can be cumbersome and discouraging, especially for those new to Web3.
Protracted Onboarding Process: 
New users encounter a lengthy process involving KYC, buying crypto, setting up wallets, and connecting to DApps. This process can take days, causing potential users to abandon the application before they even start.
Technical Proficiency Requirements:
 Engaging with blockchain applications often requires understanding complex technical details, such as using wallets like Pontem and Petra, signing transactions, and managing gas fees, which can be challenging for users.
Volatile and High Gas Fees: 
The fluctuating nature of gas fees can significantly impact the user experience. High fees during network congestion can deter users from engaging with DApps, while the unpredictability adds to the overall frustration.
LYNCing dApps to Users: Bridging the Gap with Paymaster
What is the LYNC Paymaster ?
LYNC Paymaster is designed to address these challenges head-on, streamlining the user experience and enhancing the onboarding process for dApp built on the Aptos blockchain. By integrating the LYNC Paymaster, developers can offer a more intuitive and seamless experience for their users. Key features include:
Sponsored Transactions:
 LYNC Paymaster allows dApp to sponsor transactions for their end-users, eliminating the need for users to maintain a minimum of APT token balance for gas fees. This removes a significant barrier to entry, enabling users to interact with the application without the hassle of acquiring and managing cryptocurrencies.
Simplified Onboarding:
 By sponsoring transactions, LYNC Paymaster reduces the onboarding friction. Users can start engaging with dApp immediately, bypassing the lengthy process of KYC, purchasing tokens, and wallet setup. This leads to higher conversion rates and improved user retention.
User-Friendly Integration:
 LYNC Paymaster abstracts the technical complexities involved in blockchain interactions. Users no longer need to understand or manage gas fees, sign transactions manually, or adjust RPC settings. This makes the application accessible to a broader audience, including non-crypto-savvy users.
Stable Transaction Costs:
 By sponsoring gas fees, LYNC Paymaster shields users from the volatility of transaction costs. This ensures a consistent and predictable user experience, encouraging more frequent interactions with the dApp.
Enhanced Transaction Reliability:
 LYNC Paymaster optimizes the transaction process, reducing the likelihood of pending or failed transactions. Users can enjoy a smoother and more reliable interaction with the application, fostering trust and satisfaction.
Who should LYNC ?
LYNC Paymaster benefits developers and Web3 projects by simplifying user onboarding and boosting retention. By sponsoring transactions, it creates a smoother user experience, encouraging ongoing engagement. Developers can also leverage subscription models or premium features with sponsored transactions, opening new revenue streams. This competitive edge attracts users seeking hassle-free blockchain experiences, expanding the user base and driving broader adoption.
Here are the benefits for different industries:
Gaming:
Seamless Gameplay: 
Game developers can sponsor transactions for in-game activities such as basic gameplay, deposits, and withdrawals, removing friction for players.
Enhanced Engagement: 
By eliminating gas fees, players can enjoy a more immersive experience, leading to increased engagement and retention.
Micro transactions:
 Enables cost-effective micro transactions, enhancing the in-game economy and allowing for new monetization strategies.
Decentralized Application (dApp)
Simplified Onboarding: 
By sponsoring transactions, LYNC Paymaster removes the need for users to manage APT token balances and navigate complex blockchain interactions, making onboarding smoother.
Increased Adoption: 
Easier access to dApps encourages more users to try and use the applications, driving adoption.
Enhanced User Retention: 
A frictionless experience helps retain users by removing barriers and improving overall satisfaction.
 
Social Media:
Lower Onboarding Hurdles: 
Social platforms like forums or networks can sponsor transactions for posting, commenting, and other basic actions, reducing barriers to entry.
Increased Participation:
 By making it easier for users to interact without worrying about gas fees, platforms can foster a more active and engaged community.
User-Generated Content:
 Encourages more user-generated content and interactions, enhancing the overall value and vibrancy of the platform.
Marketplaces:
Reduced Barriers:
 Transaction sponsorship can lower the barriers for users browsing listings, placing bids, or making purchases on decentralized marketplaces.
Enhanced User Experience:
 Users can interact with the marketplace seamlessly, without needing to manage crypto wallets or gas fees.
Increased Sales: 
Facilitates smoother transactions, potentially increasing sales and user satisfaction.
LYNC Paymaster offers a transformative approach to transaction management and user onboarding across various industries. By sponsoring transactions, LYNC Paymaster removes the need for users to maintain an APT token balance and manage complex blockchain interactions, making it easier for them to engage with decentralized applications dApp).
LYNC for Users
No Fee:
 Enjoy transactions without costs through LYNC Paymaster's sponsored plans.
Easy Access: 
Explore and use DApps without financial barriers.
Flexible Subscriptions:
 Choose affordable plans for predictable costs.
Simplified Entry:
 Start using blockchain services without managing wallets or gas fees.
Exclusive Benefits:
 Get seamless, fee-free access via whitelist inclusion.
Previous
Deploying Your Product on TG
Next
How to Register on LYNC Dashboard
Last updated 
6 months ago
How to Register on LYNC Dashboard | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Introduction
Let’s Get Started
Create a new project
Get your API Key
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
Setting up the paymaster is quick and takes under 5 minutes. LYNC Paymaster is fully no-code, allowing developers to integrate with just a few clicks.
Previous
LYNC Paymaster - Supporting Aptos
Next
How to Create Paymaster
Last updated 
6 months ago
Introduction
To begin using the paymaster and sponsoring transactions, you need to register an account on LYNC Dashboard. The registration process is straightforward and only requires connecting with your email.
Let’s Get Started
Navigate to 
LYNC Dashboard
. You can proceed by choosing to continue with Email, Google, or GitHub.
After Successful Login, the user will be redirected directly to the Dashboard Home Page.
Create a new project
The developer can create a new project just by following these steps:
On the Home page, click on “Create New Project” and a pop-up will open.
Enter your Project Name and Description.
Select Platform and Category from the dropdown
In Chain, choose Move
Click “Next” to register your dApp.
Get your API Key
After creating the project, an API Key will be generated. Copy this value, as you will need it to integrate the LYNC SDK (Paymaster) into your project, whether it's a game, dApp, DeFi application, or more.
LYNC Dashboard login
API Key from LYNC Dashboard
How to Create Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Paymaster - Supporting Aptos
How to Create Paymaster
Paymaster is supported on both Aptos Mainnet and Aptos Testnet.
Previous
How to Register on LYNC Dashboard
Next
How to Fund the Paymaster
Last updated 
6 months ago
Once the Project is created, you need to create a Paymaster and register your smart contracts. You will need your deployed smart contract's address.
After Project registration, click “Paymaster” on the Project page.
Based on your requirement, Create a Paymaster either on Testnet or Mainnet
Once done, the Paymaster can be funded by Petra Wallet, Pontem Wallet or Exchanges.
You can copy the Paymaster Address and fund or view it on chain on
 Aptos Explorer
Paymaster Section
Paymaster Creation
How to Fund the Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Paymaster - Supporting Aptos
How to Fund the Paymaster
The paymaster can be funded from any wallet supporting Aptos like Petra or Pontem and exchanges.
Previous
How to Create Paymaster
Next
Module & Function Whitelist
Last updated 
6 months ago
Once the Paymaster is created, To use the paymaster and sponsoring transactions, you need to fund Paymaster.
To fund the paymaster, copy the Paymaster address using copy button
Open any wallet which have APT token 
(Using Pontem Wallet)
Click on send and transfer APT to Paymaster Address
Once done, you can see the balance update on the dashboard
Copy Paymaster Address
Pontem Wallet
Send funds to paymaster
Module & Function Whitelist | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Paymaster - Supporting Aptos
Module & Function Whitelist
Projects can whitelsit module & function to support sponsor transactions for the users
Previous
How to Fund the Paymaster
Next
How to Integrate Paymaster
Last updated 
6 months ago
To begin using the paymaster and sponsoring transactions, you need to whitelist the Module and Function you want to sponsor the users for, Once the Paymaster is created.
Click on the “Add Contracts” button, it will open a new page. 
Click on "Add New Contract"
Enter the contract address, and it will fetch the write methods.
You can whitelist those methods which you want paymaster to sponsor the transactions for.
Once done, you can see the list of all the contracts with Module & Function Whitelist
Paymaster details
Module & Function Whitelist
List of contracts
How to Integrate Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Paymaster - Supporting Aptos
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
Previous
Module & Function Whitelist
Next
Unity
Unity | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Paymaster - Supporting Aptos
How to Integrate Paymaster
Unity
Previous
How to Integrate Paymaster
Next
API
Last updated 
6 months ago
LYNC Paymaster can be used in Unity by using 
LYNC Aptos Unity SDK
.
While doing the transaction users can pass a bool value (Sponsor Transaction)
To Sponsor Users Transactions: True
For Users Paid Transactions: False
Sponsor Transactions
API | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get API Keys from LYNC Support
Create a new wallet
Get an existing wallet
Perform a transaction
APTOS
LYNC Paymaster - Supporting Aptos
How to Integrate Paymaster
API
Base endpoint: 
https://server-aptos-sdk.lync.world/api
Get API Keys from LYNC Support
Create a new wallet
Endpoint
: 
https://server-aptos-sdk.lync.world/api/generate_wallet/create_wallet
Method
: 
POST
Headers
: 
Copy
{


    "Content-Type": "application/json",


    "Accept": "application/json",


    "x-api-key": "Get this from LYNC Support"


}
Request
:
Copy
{


    "email":"team@lync.world",


    "network": 2,


    "apiKey": "Get this from lync support"


}
Parameters: 
email
 : Your email address
network
 : Aptos network (
1
 for Mainnet & 
2
 for Testnet)
apiKey
 : Your api key. Get this from LYNC support
Response
:
Copy
{


    "message": "Account Created On Chain Successfully.",


    "status": 201,


    "success": true,


    "data": {


        "id": "96a277d270d22f35aae9ad22",


        "publicKey": "0xef4282664d27bcc0351f29ff09b79c9ed71668c2561e54317ced541d26979e11",


        "accountAddress": "0x77b8f7474c1c63eaaa56f6069c5a529c2c86766b7df7b48439816b8cf4b13414",


        "privateKey": "0xfd9591c6abfb6332ef215558bee57af8f4529bea45435ebff6429fbc239245c9",


        "apiKey": "Get this from lync support",


        "network": "testnet",


        "email": "team@lync.world"


    }


}
Get an existing wallet
Endpoint
: 
https://server-aptos-sdk.lync.world/api/generate_wallet/get_wallet
Method
: 
POST
Headers
: 
Copy
{


    "Content-Type": "application/json",


    "Accept": "application/json",


    "x-api-key": "Get this from LYNC Support"


}
Request
:
Copy
{


    "email":"team@lync.world",


    "network": 2,


    "apiKey": "Get this from lync support"


}
Parameters: 
email
 : Your email address
network
 : Aptos network (
1
 for Mainnet & 
2
 for Testnet)
apiKey
 : Your api key. Get this from LYNC support
Response
:
Copy
{


    "message": "User profile fetched successfully.",


    "status": 200,


    "success": true,


    "data": {


        "id": "96a277d270d22f35aae9ad22",


        "accountAddress": "0x77b8f7474c1c63eaaa56f6069c5a529c2c86766b7df7b48439816b8cf4b13414",


        "publicKey": "0xef4282664d27bcc0351f29ff09b79c9ed71668c2561e54317ced541d26979e11",


        "privateKey": "0xfd9591c6abfb6332ef215558bee57af8f4529bea45435ebff6429fbc239245c9",


        "email": "team@lync.world"


    }


}
Perform a transaction
Endpoint
: 
https://server-aptos-sdk.lync.world/api/unity/txn2
Method
: 
POST
Headers
: 
Copy
{


    "Content-Type": "application/json",


    "Accept": "application/json",


    "x-api-key": "Get this from LYNC Support"


}
Request
:
Copy
{


    "apiKey": "Get this from lync support",


    "contractAddress": "0x55a5d8e2588d84ef1e9dbe4e8fba38ab0cd2cc54c35987856caece4d971c3ff5",


    "privateAddress": "0x9e568d375d7dc88dcb58577a4167b11e559b3fed222f91383518e58f8565f353",


    "contractName": "LyncNFTCollection721A",


    "functionName": "mint_nft",


    "arguments": [


        {


            "argument": 1,


            "type": 1


        }


    ],


    "network": 2,


    "usePaymaster": true


}
Parameters: 
apiKey
 : Your api key. Get this from LYNC support
contractAddress
 : Smart contract address deployed to the Aptos blockchain
privateKey
 : Your private key
contractName
 : Name of the module under 
contractAddress
functionName
 : Name of the function to call
arguments
 : Argument array to be passed in the transaction payload

{ "argument": value, "type": BigInteger = 0, Integer = 1 and String = 2 }
network
 : Network on which the contract is deployed. (
1
 for Mainnet & 
2
 for Testnet)
usePaymaster
 : 
true
 to sponsor transaction, 
false
 if user pays for gas fee
Response
:
Copy
{


    "message": "Success",


    "status": 200,


    "success": true,


    "data": {


        "transactionHash": "0x90e156f113a7dd95d608f66fc3607b885af446e765e93dac7291186529ce62e8"


    }


}
Previous
Unity
Next
JavaScript/ TypeScript
Last updated 
6 months ago
JavaScript/ TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Install the SDK
Import the dependencies
Get API Keys from LYNC Dashboard
The performPaymasterTransaction function
Using the performPaymasterTransaction function
APTOS
LYNC Paymaster - Supporting Aptos
How to Integrate Paymaster
JavaScript/ TypeScript
Easily integrate in your JS/TS application using the sdk.
LYNC Paymaster SDK on 
npmjs
: 
https://www.npmjs.com/package/lync-paymaster-sdk
Install the SDK
Copy
npm install lync-paymaster-sdk --save
Import the dependencies
Copy
import { performPaymasterTransaction } from "lync-paymaster-sdk";


import { Network } from "@aptos-labs/ts-sdk";
Get API Keys from 
LYNC Dashboard
Copy
// From LYNC Dashboard


const apiKey = "LYNC API KEY Dashboard";




// Get this from LYNC


const lyncAuthKey = "Get this from LYNC Support";
The 
performPaymasterTransaction
 function
Copy
import { 


  CommittedTransactionResponse, 


  InputEntryFunctionData, 


  Network 


} from "@aptos-labs/ts-sdk";




/**


 * The data returned from a paymaster transaction.


 * @param {CommittedTransactionResponse} receipt - The transaction receipt.


 * @param {CommittedTransactionResponse} accountCreationReceipt - The account creation receipt.


 * @param {string} privateKey - The private key for the account.


 */


interface PaymasterTransactionReturnData {


  receipt: CommittedTransactionResponse;


  accountCreationReceipt: CommittedTransactionResponse;


  privateKey: string;


}




/**


 * The account information.


 * @param {string} privateKey - The private key for the account.


 * @param {string} accountAddress - The account address.


 */


interface AccountInfo {


  privateKey: string;


  accountAddress: string;


}




/**


 * Performs a paymaster transaction on the specific Aptos network using the LYNC paymaster API.


 *


 * @param {string} lyncAuthKey - The LYNC API key for authentication.


 * @param {Network} network - The network to perform the transaction on.


 * @param {string} apiKey - The LYNC API key for authentication.


 * @param {InputEntryFunctionData} inputTransaction - The input data for the transaction.


 * @param {boolean} showLogs - Whether to show logs or not.


 * @param {AccountInfo} accountData - The account data(privateKey and accountAddress) for the transaction(optional). If not provided, a new account will be generated.


 * @returns {Promise<PaymasterTransactionReturnData>} The data returned from a paymaster transaction.


 */


async function performPaymasterTransaction(


  lyncAuthKey: string,


  network: Network,


  apiKey: string,


  inputTransaction: InputEntryFunctionData,


  showLogs: boolean,


  accountData?: AccountInfo,


): Promise<PaymasterTransactionReturnData>;


Using the 
performPaymasterTransaction
 function
Copy
const accountData = {


  privateKey: "0x....",


  accountAddress: "0x...."


};




const data = await performPaymasterTransaction(


  lyncAuthKey,


  Network.TESTNET,


  apiKey,


  {


    function: "0x1::aptos_account::transfer", // entry function


    functionArguments: [


      "0x587f66c999fed81c8872c5ddabed1e7049c790d750d2a796313a32702dcff962", // to address


      "100000000" // 1 APT = 100000000


    ]


  },


  false, // show logs or not


  accountData // optional - will generate a new account if not provided


);




console.log(data);


Previous
API
Next
LYNC Unity Aptos SDK
Last updated 
6 months ago
LYNC Unity Aptos SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating LYNC Aptos SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
Transaction Flow 
Gasless Transaction
Some common bugs and their resolutions
APTOS
LYNC Unity Aptos SDK
Previous
JavaScript/ TypeScript
Next
Keyless Accounts
Last updated 
6 months ago
LYNC Unity Aptos SDK is a no-code Modular Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS) on Aptos. 
Platform Supported:
 PC (Windows and MacOs) and Mobile (Android and iOS)

Network Supported:
 Aptos Testnet and Mainnet
This release includes the following:
Social Logins
Keyless Login
Pontem Wallet Login
Custom Transactions in Social Login and Web3 Wallet like Pontem
Paymaster inbuilt to sponsor transactions for your users.
Get your API Key
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC Unity Aptos SDK from 
Here​
Example Project: 
https://github.com/LYNC-WORLD/LYNC-Unity-Aptos-SDK
​
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the LYNC Aptos SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating LYNC Aptos SDK in Unity
There is 1 Example Projects present in the SDK: 
Assets/LYNC-APTOS-SDK/Example/APTOSExample.unity
You can find the example scene in the folders. Simply pass the API key in LyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Aptos SDK. Attach LYNC Manager Prefab(Assets/LYNC-APTOS-SDK/LYNC Manager.prefab), on the starting scene.
This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose Network -> Testnet / Mainnet
Sponsor Transactions -> If you want to sponsor transactions for users (Please contact 
LYNC
 to setup Paymaster)
Login Options -> Allowing users to choose which login method to login from

Pass a deep link name (example: lyncaptos/gameName etc.)
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
The Sample Code for Login can be found at APTOSExample.cs.
Make sure to Import LYNC.
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            OnWalletConnected(wallet);


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


        


    }
To Check if the user is logged in or not:
Copy
using LYNC;




private AuthBase authBase;




    authBase = await AuthBase.LoadSavedAuth();


        if (authBase.WalletConnected)


        {


            // User is Already Login


            OnWalletConnected(authBase);


        }


        else{


             // Ask user to login


        }
On Wallet Connected (TypeOfLoginMethod)
Copy
//To OnWalletConnected(TypeOfLoginMethod):


        


        private void OnWalletConnected(AuthBase _authBase)


        {


            if (AuthBase.AuthType == AUTH_TYPE.FIREBASE)


            {


                Populate(_authBase as FirebaseAuth);


            }


    


            if (AuthBase.AuthType == AUTH_TYPE.PONTEM)


            {


                WalletAddressText.text = AbbreviateWalletAddressHex(_authBase.PublicAddress);


                StartCoroutine(API.CoroutineGetBalance(_authBase.PublicAddress, res =>


                {


                    balance.text = res.ToString();


                    Debug.Log("BALANCE"+balance);


                }, err =>


                {


                    Debug.Log("Error");


                }));


            }


        }


        




        public void Populate(FirebaseAuth firebaseAuth = null)


        {


            WalletAddressText.text = (firebaseAuth == null ? "Disconnected" : AbbreviateWalletAddressHex(firebaseAuth.AptosFirebaseAuthData.publicKey));


            balance.text = (firebaseAuth == null ? "0" : firebaseAuth.AptosFirebaseAuthData.balance) + " APT";


        }
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout();
Transaction Flow 
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee.
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction.
Gasless Transaction
To Enable Gasless Transactions or to Sponsor Transactions for your users, 
Set Sponsor Transactions as true, and 
contact LYNC team to setup your paymaster
To do transactions, APTOSExample.cs can be taken as a reference.
Pass in the Contract Address, Contract Name, Function Name and Network.
Arguments are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
Copy
LyncManager.Instance.TransactionsManager.SendTransaction(Transaction);
You can create a public Transaction Object, pass in the parameters and hit the function call where you want to do the transactions
Copy
public Transaction mintTxn;




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(mintTxn);




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


Or You can create a Transaction Object, 
Copy
public Transaction mintTxn;




//LyncManager.Instance.TransactionsManager.SendTransaction( new Transaction(ContractAddress, ContractName, FunctionName,ListOfArguments));




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(


new Transaction("0x55db3f109405348dd4ce271dc92a39a6e1cbc3d78cf71f6bf128b1c8a9dfac33","tst_unity","set_data_bytes",arguments));




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


List of Arguments: 
Copy
//List<TransactionArgument>{


//    new TransactionArgument{ argument = value, type = ARGUMENT_TYPE.STRING }


//};




List<TransactionArgument> arguments = new List<TransactionArgument>{


    new TransactionArgument{ argument = "0xb66b180422a4886dac85b8f68cc42ec1c6bafc824e196d437fdfd176192c25fccfc10e47777699420eec0c54a0176861a353a43dd45b338385e1b975709f2000", type = ARGUMENT_TYPE.STRING }


};
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key​
Sponsor Transactions
Transaction Object
Add newtonsoft Json
Keyless Accounts | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Keyless Accounts
Keyless accounts simplifying users experience with non-custodial wallets
Currently, the biggest problem with user onboarding, whether for web2 or web3, is the need to create a wallet and manage a private key. In reality, private keys are often lost (e.g., users forget to write down their mnemonic when setting up their Aptos wallet) or stolen (e.g., users are tricked into revealing their Private Key). This makes the onboarding process unnecessarily difficult and causes users to leave when their accounts are lost or stolen.
The only way to secure non-custodial accounts is by protecting the private key associated with them. Alternatively, using a custodial method means users do not have full control over their funds.
Keyless accounts are a significant innovation in the Aptos ecosystem, making it easier for users to access and use decentralized applications (dApps). 
With LYNC Keyless, users can create and manage an Aptos blockchain account using their existing OpenID Connect (OIDC) accounts, like "Sign in with Google" or "Sign in with Apple," instead of relying on a traditional secret key or mnemonic. 
Essentially, a user's blockchain account becomes their OIDC account. In the future, Keyless will expand to support many Identity Providers (IdPs) that use the OIDC standard, starting with the providers mentioned.
Using the Keyless SDK will make user accounts specific to your dApp,.
How is keyless removing User Onboarding friction
User-friendliness:
Easy Access:
 Blockchain accounts should be backed by user-friendly OIDC accounts, making them simple to access and hard to lose.
Walletless Interaction:
 Allow users to interact with dApps through their OIDC accounts without needing to install a wallet.
Multi-device Accessibility:
 Enable users to access their blockchain accounts easily from any device.
Security:
Strong Security:
 Keyless accounts are secure as their underlying OIDC accounts.
Account Recovery:
 Ensure keyless accounts can be recovered even if the managing application is no longer available.
Privacy:
Data Protection:
 Keyless accounts and their transactions should not reveal any information about the user’s OIDC account, such as email addresses or OAuth identifiers.
Activity Anonymity:
 OIDC providers (e.g., Google) should not be able to track the user's transaction activity.
Unlinkable Accounts:
 Keyless accounts managed by different applications for the same user should not be linkable on-chain.
Efficiency:
Quick Transactions:
 Transactions for keyless accounts should be quick to create (less than 1 second) and validate by Aptos validators (less than 2 milliseconds).
Censorship-resistance:
Fair Treatment:
 Aptos validators should not give preferential treatment to OpenID transactions based on the identity of the managing application or user.
Decentralization:
Independent:
 Keyless accounts should not rely on entities that cannot be decentralized.
Previous
LYNC Unity Aptos SDK
Next
Configure Your OIDC Provider
Last updated 
7 months ago
Configure Your OIDC Provider | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Keyless Accounts
Configure Your OIDC Provider
Google OIDC Provider Setup
Previous
Keyless Accounts
Next
Integrate Keyless in Unity
Last updated 
7 months ago
Step 1: Sign in to Google Developer Console
Navigate to the 
Google Cloud Console
.
Sign in with your Google account credentials.
Step 2: Create a New Project
If you don’t have an existing project, click on the “Select a project” dropdown menu at the top of the page and choose “New Project.”
Enter a name for your project and click “Create.” Detailed instructions can be found 
here
.
Step 3: Configure Consent Screen
In the left sidebar, navigate to “APIs & Services” > “OAuth consent screen.”
Choose “External” user type and click “Create.”
Enter the required details such as the application name, user support email, and developer contact information.
Optionally, add additional details like the application logo and privacy policy URL.
Click “Save and continue.” Detailed steps are available 
here
.
Step 4: Register Your Application
In the left sidebar, navigate to “APIs & Services” > “Credentials.”
Click on “Create Credentials” and select “OAuth client ID.”
Choose the application type (e.g., Web application, Desktop app, or Mobile app).
Enter the necessary details such as the name of your application and the authorized redirect URIs. For OIDC, the redirect URIs should follow the format 
https://login-aptos-sdk.lync.world/auth/callback
.
Click “Create.”
Step 5: Obtain Client ID and Client Secret
After creating the OAuth client ID, Google will provide you with a client ID and client secret. These credentials are essential for authenticating your application.
Note down the client ID and client secret securely. Do not expose them publicly.
Integrate Keyless in Unity | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating LYNC Aptos SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
Transaction Flow 
Gasless Transaction
Some common bugs and their resolutions
APTOS
Keyless Accounts
Integrate Keyless in Unity
Previous
Configure Your OIDC Provider
Next
Wallet Creation and Transaction APIs
Last updated 
7 months ago
LYNC Unity Keyless SDK on Aptos Ais a no-code Modular Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS) on Aptos. 
Platform Supported:
 PC (Windows and MacOs) and Mobile (Android and iOS)

Network Supported:
 Aptos Testnet and Mainnet
This release includes the following:
Keyless Login
Social Logins
Pontem Wallet Login
Custom Transactions using Keyless
Paymaster inbuilt to sponsor transactions for your users.
Get your API Key
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC Unity Aptos SDK from 
Here​
Example Project: 
https://github.com/LYNC-WORLD/LYNC-Unity-Aptos-SDK
​
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the LYNC Aptos SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating LYNC Aptos SDK in Unity
There is 1 Example Projects present in the SDK: 
Assets/LYNC-APTOS-SDK/Example/APTOSExample.unity
You can find the example scene in the folders. Simply pass the API key in LyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Keyless Aptos SDK. 
Attach LYNC Manager Prefab(Assets/LYNC-APTOS-SDK/LYNC Manager.prefab), on the starting scene.
This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose Network -> Mainnet/ Testnet/ Devnet
Sponsor Transactions -> If you want to sponsor transactions for users (Please contact 
LYNC
)
Login Options -> Allowing users to choose which login method to login from

Pass a deep link name (example: lyncaptos/gameName etc.)
Choosing keyless, will give an option to pass Client Id 
(Generated from Configure OIDC)
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
The Sample Code for Login can be found at APTOSExample.cs.
Make sure to Import LYNC.
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            OnWalletConnected(wallet);


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


        


    }
To Check if the user is logged in or not:
Copy
using LYNC;




private AuthBase authBase;




    authBase = await AuthBase.LoadSavedAuth();


        if (authBase.WalletConnected)


        {


            // User is Already Login


            OnWalletConnected(authBase);


        }


        else{


             // Ask user to login


        }
On Wallet Connected (TypeOfLoginMethod)
Copy
//To OnWalletConnected(TypeOfLoginMethod):


        


        private void OnWalletConnected(AuthBase _authBase)


        {


        


            if (AuthBase.AuthType == AUTH_TYPE.KEYLESS)


            {


                var authData = _authBase as KeylessAuth;


                accountAddress.text = authData.PublicAddress;


                keylessPublicKey.text = authData.KeyPairPublicKey;


                keylessLoginDate.text = authData.LoginDate.ToString();


            }


        }
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout();
Transaction Flow 
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee.
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction.
Gasless Transaction
To Enable Gasless Transactions or to Sponsor Transactions for your users, 
Set Sponsor Transactions as true, and 
contact LYNC team to setup your paymaster
To do transactions, APTOSExample.cs can be taken as a reference.
Pass in the Contract Address, Contract Name, Function Name and Network.
Arguments are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
Copy
LyncManager.Instance.TransactionsManager.SendTransaction(Transaction);
You can create a public Transaction Object, pass in the parameters and hit the function call where you want to do the transactions
Copy
public Transaction mintTxn;




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(mintTxn);




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


Or You can create a Transaction Object, 
Copy
public Transaction mintTxn;




//LyncManager.Instance.TransactionsManager.SendTransaction( new Transaction(ContractAddress, ContractName, FunctionName,ListOfArguments));




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(


new Transaction("0x55db3f109405348dd4ce271dc92a39a6e1cbc3d78cf71f6bf128b1c8a9dfac33","tst_unity","set_data_bytes",arguments));




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


List of Arguments: 
Copy
//List<TransactionArgument>{


//    new TransactionArgument{ argument = value, type = ARGUMENT_TYPE.STRING }


//};




List<TransactionArgument> arguments = new List<TransactionArgument>{


    new TransactionArgument{ argument = "0xb66b180422a4886dac85b8f68cc42ec1c6bafc824e196d437fdfd176192c25fccfc10e47777699420eec0c54a0176861a353a43dd45b338385e1b975709f2000", type = ARGUMENT_TYPE.STRING }


};
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key​
Sponsor Transactions
Transaction Object
Add newtonsoft Json
Wallet Creation and Transaction APIs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Key Highlights
Why These APIs Are Important
How These APIs Help Developers Streamline Blockchain Interactions
APTOS
Wallet Creation and Transaction APIs
This documentation aims to provide all the necessary information for developers to successfully integrate Aptos blockchain features into their applications. By offering detailed explanations, practical examples, and best practices, it ensures developers can confidently implement wallet creation, NFT minting, and transaction functionalities in a secure and efficient manner.
These API provides endpoints for managing wallets and facilitating transactions on the Aptos blockchain. It includes routes for creating and retrieving wallets, minting NFTs, and executing generic transactions. These APIs are designed for developers who need to interact programmatically with the Aptos blockchain, enabling a wide range of blockchain-based applications such as dApps, financial services, and NFT marketplaces.
Key Highlights
Wallet Management
: The page begins with wallet management APIs, outlining the steps to create new wallets or retrieve existing wallets. It emphasizes the importance of securely handling private keys and demonstrates how to manage wallet operations programmatically.
Transaction Management
: The next section focuses on transaction management, including minting NFTs and sending generic transactions. These routes allow developers to perform complex blockchain operations with ease. The documentation provides detailed examples of how to format requests for different transaction types, making it easy for developers to get started.
Error Handling
: Each route includes a section on possible errors and their meanings, helping developers understand common pitfalls and troubleshoot issues effectively.
Security Considerations
: The documentation emphasizes security best practices, such as using HTTPS for all requests and securely storing private keys, which are essential for protecting users’ assets on the blockchain.
Use Cases and Examples
: Throughout the page, practical examples are provided to illustrate common use cases, such as creating a new user wallet, minting NFTs for digital art, or sending tokens for in-app purchases. These examples help developers visualize how the APIs can be integrated into real-world applications.
Developer-Friendly Format
: The page is designed to be developer-friendly, with clear formatting, example code snippets, and straightforward explanations. This format makes it easy for developers of all experience levels to understand and implement the APIs.
Comprehensive Reference
: Serving as a one-stop reference, the page covers all aspects of wallet and transaction management on the Aptos blockchain. It ensures developers have all the information they need to build and maintain blockchain-based applications efficiently.
Why These APIs Are Important
Simplified Blockchain Interactions
: The APIs abstract the complexities of blockchain interactions, such as wallet management, transaction signing, and broadcasting. Developers do not need to understand the low-level details of blockchain protocols, which significantly reduces the time and effort required to integrate blockchain functionality.
Enhanced Security
: By providing secure endpoints for wallet creation and transaction management, the APIs help developers implement best security practices without the need to design and build these features from scratch. This reduces the risk of vulnerabilities and ensures that sensitive data, such as private keys, is handled securely.
Faster Development Cycle
: The APIs allow developers to quickly build and deploy blockchain applications by providing ready-to-use functionalities like wallet creation, NFT minting, and transaction processing. This accelerates the development process and helps teams bring their products to market faster.
Standardization and Consistency
: Using a well-defined set of APIs ensures that all blockchain operations follow a standardized format. This consistency simplifies debugging, maintenance, and upgrades, making it easier for developers to work in teams or hand off projects.
Focus on Core Functionality
: With these APIs handling the core blockchain interactions, developers can focus on building the unique features and user experiences that differentiate their applications. This leads to higher-quality applications and a better user experience.
Scalability and Flexibility
: The APIs are designed to handle various use cases, from simple wallet management to complex transactions involving smart contracts and NFTs. This flexibility enables developers to scale their applications efficiently as their needs grow or change.
How These APIs Help Developers Streamline Blockchain Interactions
Unified Interface
: The APIs provide a unified interface for interacting with the Aptos blockchain. This reduces the need to work with multiple tools or libraries, allowing developers to perform all necessary actions from a single point of contact.
Reduced Complexity
: By abstracting the underlying blockchain operations, the APIs reduce the complexity involved in implementing blockchain features. Developers can perform tasks like wallet creation, transaction signing, and minting NFTs without needing deep knowledge of cryptography, consensus algorithms, or blockchain architecture.
Error Handling and Validation
: The APIs include built-in error handling and validation, which helps developers avoid common mistakes and ensures that only valid transactions are processed. This improves reliability and reduces the time spent troubleshooting and debugging.
Improved Interoperability
: These APIs are designed to be easily integrated with existing systems and frameworks. This interoperability allows developers to quickly add blockchain capabilities to their applications, whether they are building a new dApp or enhancing an existing web or mobile app.
Extensive Documentation and Support
: The comprehensive documentation provides clear instructions, example code, and best practices for using the APIs effectively. This support helps developers get up to speed quickly, reducing the learning curve associated with blockchain development.
Optimized for Performance
: The APIs are optimized for performance, ensuring that blockchain operations such as wallet creation and transaction processing are handled efficiently. This reduces latency and enhances the overall performance of applications, providing a seamless experience for end users.
By leveraging these APIs, developers can streamline their blockchain interactions, reduce development time, and focus on building innovative applications. The APIs provide a robust, secure, and scalable foundation for any project requiring blockchain capabilities, enabling developers to harness the full potential of the Aptos blockchain with ease.
Previous
Integrate Keyless in Unity
Next
Pre-requisites
Last updated 
5 months ago
Pre-requisites | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Pre-requisites
To integrate Lync's wallet creation and transaction APIs into your application, you need to have the following things ready with you -
API key from the official Lync's website (
Generate your API key here
).
X_API_KEY (Shared by the Lync team) 
Once you have the above keys with you, you can start the integration of APIs in your project.
Previous
Wallet Creation and Transaction APIs
Next
Integration
Last updated 
5 months ago
Integration | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
In this Section, you will learn about the integration of the APIs provided by Lync for creating an on-chain wallet on Aptos and performing blockchain transactions on the Aptos blockchain network.
Our wallet creation and transaction APIs provide a simple yet powerful way to interact with blockchain by providing simple API endpoints that you can integrate into your application and get access to blockchain interactions without worrying about the other complexities of blockchain.
This section explores the following functionalities that Lync provides through its APIs for users:
API overview
Creating a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
In the upcoming sections, we will learn about all the above API functionalities in detail.
Previous
Pre-requisites
Next
API Overview
Last updated 
5 months ago
API Overview | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
API Overview
Here's a basic overview of the API endpoints provided by Lync for wallet creation and transactions on the Aptos blockchain network.
These APIs enables the management of wallets by providing endpoints for creating new wallets and retrieving existing ones. Each wallet is associated with a unique address and private key. These APIs also facilitate the minting of NFT transactions and any generic transactions on the Aptos blockchain network. You can easily integrate mint NFT transactions and any generic transactions on Aptos using our APIs.
Postman Collection - 
View Collection
BASE_URL - 
https://server-aptos-sdk.lync.world/api
Routes -
To create a new wallet
 - {{ BASE_URL }}/generate_wallet/create_wallet
To get already created wallet
 - {{ BASE_URL }}/generate_wallet/get_wallet
Mint NFT transactions
 - {{ BASE_URL }}/unity/mint-nft
Send generic transactions on Aptos
 - {{ BASE_URL }}/unity/txn2
In the upcoming sections, we will learn about the usage of all the above API endpoints individually.
Note -
Ensure to replace 
{{ BASE_URL }}
 with the actual base URL: 
https://server-aptos-sdk.lync.world/api
.
Always use secure storage practices for private keys, as they are essential for managing wallet access.
Previous
Integration
Next
Create a new wallet
Last updated 
5 months ago
Create a new wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
Create a new wallet
Create a new wallet
POST
 
/generate_wallet/create_wallet
This endpoint generates a new wallet for the user. Upon creation, a new wallet address and private key are generated. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation and it will return a newly created wallet's details, including the wallet address and private key. It's recommended to securely store the private key since it is required to access and manage the wallet.
Headers
Name
Value
Content-Type
application/json
x_api_key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shanu@lync.world)
apiKey
string
Your api key generated from official website of Lync
network
number
1 or 2 (1 for Mainnet & 2 for Testnet)
Response
200
201
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "Account data fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": true,


  "status": 201,


  "message": "Account Created On Chain Successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


    "apiKey": "<Your api key generated from official website of Lync>",


    "network": "<1 or 2 (1 for Mainnet & 2 for Testnet)>",


    "email": "<user email id>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Internal server error"


}
Previous
API Overview
Next
Get already created wallet
Last updated 
5 months ago
Get already created wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
Get already created wallet
Get already created wallet
POST
 
/generate_wallet/get_wallet
This endpoint allows the retrieval of an existing wallet using the email ID of the user and the network on which the account exists. When a wallet is created using the 
create API
, it is associated with an email address that can be used to retrieve the wallet details, including the wallet address and private key. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation.
Headers
Name
Value
Content-Type
application/json
x-api-key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shanu@lync.world)
apiKey
string
Your api key generated from official website of Lync
network
number
1 or 2 (1 for Mainnet & 2 for Testnet)
Response
200
400
404
500
Copy
{


  "success": true,


  "status": 200,


  "message": "User profile fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "email": "<user email id>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 404,


  "message": "No user registered"


}
Copy
{


  "success": false,


  "status": 400,


  "message": "Internal server error"


}
Previous
Create a new wallet
Next
Mint NFT transactions
Last updated 
5 months ago
Mint NFT transactions | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
Mint NFT transactions
Mint NFT transactions
POST
 
/unity/mint-nft
This endpoint facilitates the minting of a new Non-Fungible Token (NFT) on the Aptos blockchain. Users can mint a new NFT by specifying some contract information, such as the contract address, contract name, function name, arguments, and other properties. This endpoint requires api key authentication and the necessary transaction parameters, including the wallet address initiating the minting process.
Headers
Name
Value
Content-Type
application/json
x-api-key
Your_X_API_Key
Body
Name
Type
Description
contractAddress
string
Contract address
contractName
string
Name of contract
functionName
string
Function you want to do mint transaction on
privateAddress
string
User's private key
publicAddress
string
User's account address
arguments
Array of objects
Object of  
{ argument: string, type: number }
 If the function accepts any arguments
network
number
1 or 2 (1 for Mainnet & 2 for Testnet)
usePaymaster
boolean
true
 to sponsor the transaction or 
false
 if user pays for the transaction
apiKey
string
Your api key generated from official website of Lync
Response
200
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "success",


  "data": {


    "transactionHash": "<transaction hash of successfull mint transaction>",


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Something went wrong",


  "errorMessage": "<specific error message from server>"


}
Example Request Body
Copy
{


  "network": 2,


  "contractName": "LyncCards",


  "contractAddress": "0x4bb424eb03c0105e44e42a07294a7c9ed78b75942549b02844892401b578d150",


  "functionName": "mint_nft",


  "privateAddress": "0x9e568d375d7dc88dcb58577a4167b11e559b3fed222f91383518e58f8565f353",


  "publicAddress": "0x41e019155a0916372341bcdb684b6e571b68563f933c3139deae6a9fac3fc38b", 


  "arguments": [


    {


      "argument": "1",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    },


    {


      "argument": "2",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    }


  ],


  "usePaymaster": true, 


  "apiKey": "B30D905974544D082BFEA8A727534195",


}
Previous
Get already created wallet
Next
Send generic transactions on Aptos
Last updated 
5 months ago
Send generic transactions on Aptos | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
Wallet Creation and Transaction APIs
Integration
Send generic transactions on Aptos
Send generic transactions
POST
 
/unity/txn2
This endpoint allows the user to send generic transactions on the Aptos blockchain, including transferring tokens, interacting with smart contracts, or any other custom transaction type. Users must provide the necessary transaction details, such as the contract address, contract name, function name, arguments, and parameters for smart contract interactions.
Headers
Name
Value
Content-Type
application/json
x-api-key
<Your_X_API_Key)
Body
Name
Type
Description
contractAddress
string
Contract address
contractName
string
Name of contract
functionName
string
Function you want to do mint transaction on
privateAddress
string
User's private key
arguments
Array of objects
Object of  
{ argument: string, type: number }
 If the function accepts any arguments
network
number
1 or 2 (1 for Mainnet & 2 for Testnet)
usePaymaster
boolean
true
 to sponsor the transaction or 
false
 if user pays for the transaction
Response
200
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "success",


  "data": {


    "transactionHash": "<transaction hash of successfull mint transaction>",


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Something went wrong",


  "rawError": "<specific error message from server>"


}




// or




{


  "success": false,


  "status": 500,


  "message": "Something went wrong",


  "error": "Transaction failed",


}
Example Request Body
Copy
{


  "network": 2,


  "contractName": "LyncNFTCollection721A",


  "contractAddress": "0x55a5d8e2588d84ef1e9dbe4e8fba38ab0cd2cc54c35987856caece4d971c3ff5",


  "functionName": "mint_nft",


  "privateAddress": "0x55a5d8e2588d84ef1e9dbe4e8fba38ab0cd2cc54c35987856caece4d971c3ff5",


  "arguments": [


    {


      "argument": "1",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    },


  ],


  "usePaymaster": true,


}
Previous
Mint NFT transactions
Next
LYNC Social Login SDK on Aptos
Last updated 
5 months ago
LYNC Social Login SDK on Aptos | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Social Login SDK on Aptos
This SDK is designed to simplify the integration of secure authentication and seamless transaction capabilities within applications on the Aptos blockchain.
Previous
Send generic transactions on Aptos
Next
Getting Started
Last updated 
6 days ago
Use Example DApp here:
Introducing our new SDK, The Social Login and Aptos Transaction SDK, designed to streamline the authentication process and facilitate seamless transactions on Aptos blockchain for users. With this SDK, developers can easily integrate Social login functionality (Login using Google account) into their applications, allowing users to sign in securely with their Google credentials. Once authenticated, users can perform a variety of Aptos transactions effortlessly. Our SDK provides a simple yet powerful solution for developers looking to enhance their applications with secure login and blockchain transaction capabilities, ensuring a smooth and hassle-free user experience. With just a few lines of code, developers can unlock the full potential of Google login and Aptos blockchain transactions, enabling users to easily interact with their applications.
Lync Social SDK
Social login example project on Aptos blockchain
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Pre Requisites
Integration
Adding Access Token
Installing the Package
APTOS
LYNC Social Login SDK on Aptos
Getting Started
Pre Requisites
Before you begin integrating Aptos Social Login SDK, make sure you have the following prerequisites:
Node.js (version 20 or above)
 installed on your system.
NPM (version 10 or above)
 or 
Yarn (latest version)
 installed on your system.
Integration
Adding Access Token
To authenticate with our private NPM registry, you will need to add an 
access token
. You need to configure your 
.npmrc
 file to include the credentials. Follow these steps to add the token for installing our private NPM registry:
Locate or Create 
.npmrc
: Navigate to your project's root directory and locate the 
.npmrc
 file. If it doesn't exist, create one in the root directory of your project (at the same level as the 
package.json
 file).
Add Auth Token
: Add the access token and scope name to the 
.npmrc
 file using the following format:
.npmrc
Copy
//registry.npmjs.org/:_authToken=YOUR_ACCESS_TOKEN


@lyncworld:registry=https://registry.npmjs.org/
Replace 
YOUR_ACCESS_TOKEN
 with the actual access token you get from us.
Save the Changes: Save the 
.npmrc
 file.
Installing the Package
Once you've configured your 
.npmrc
 file with the access token, you can install the package using either 
NPM
 or 
Yarn
. Follow these steps:
Open your terminal.
Navigate to your project's directory.
Run the following command:
Copy
npm install --save @lyncworld/aptos-social-login-sdk
or
Copy
yarn add @lyncworld/aptos-social-login-sdk
Congratulations! You have successfully integrated 
@lyncworld/aptos-social-login-sdk
 into your project. If you encounter any issues or have any questions, feel free to reach out to our support team for assistance.
Previous
LYNC Social Login SDK on Aptos
Next
Using the SDK
Last updated 
3 months ago
Using the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Functions Overview
1. signInWithGoogle: (network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
2. signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
3. getUserProfile: (email: string, network: NetworkConfigs, apiKey: string,  logEnabled?: boolean) => Promise<GetUserProfileReturn>
4. aptosTransaction: (args: AptosTransactionFuncArgs,apiKey: string, logEnabled?: boolean) => Promise<AptosTransactionReturn>
APTOS
LYNC Social Login SDK on Aptos
Using the SDK
In this Section, you will learn what are the functions provided by the SDK to integrate authentication, user management, and Aptos transaction execution into your project.
Functions Overview
1. signInWithGoogle: (network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
Copy
const signInWithGoogle: (network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
Copy
This function allows users to sign in with Google using OAuthProvider.




 * @param {NetworkConfigs} network - Network Type Enum.


 * @param {string} apiKey - Your API key from generated from LYNC dashboard - https://dashboard.lync.world


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true




 * @returns {object} SignInWithGoogleReturn - Returns an object with the success status and the user data or error message.




 * @typedef {object} SignInWithGoogleReturn - { success: true; user: UserData } | { success: false; message: string };


 * @typedef {object} UserData - { id: string; walletAddress: string; name: string; email: string; providerId: string; avatar: string; }




 * @errors - The function can throw an error if the sign-in operation fails. The error message is logged if logging is enabled.
2. signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
Copy
const signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
Copy
This function is used to sign-out a user from the application. It uses Firebase's signOut function to sign out the user.




 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.


 


 * @returns {object} SignOutUserReturn - Returns an object that contains a success status and (optionally) an error message.


 


 * @typedef {object} SignOutUserReturn - { success: true } | { success: false; message: string };




 * @errors - The function can throw an error if the sign-out operation fails. The error message is logged if logging is enabled.
3. getUserProfile: (email: string, network: NetworkConfigs, apiKey: string,  logEnabled?: boolean) => Promise<GetUserProfileReturn>
Copy
const getUserProfile: (email: string, network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<GetUserProfileReturn>
Copy
This function is used to get the user data from the server using the getUserProfile function.




 * @param {string} email - The email address of the user.


 * @param {NetworkConfigs} network - Network Type Enum.


 * @param {string} apiKey - Your API key from generated from LYNC dashboard - https://dashboard.lync.world


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.




 * @returns {object} GetUserProfileReturn - Returns an object with the success status and the user data or error message.




 * @typedef {object} GetUserProfileReturn - { success: true; data: UserData } | { success: false; message: string };


 * @typedef {object} UserData - { id: string; walletAddress: string; name: string; email: string; providerId: string; avatar: string; }




 * @errors - The function can throw an error if the request fails. The error message is logged if logging is enabled.
4. aptosTransaction: (args: AptosTransactionFuncArgs,apiKey: string, logEnabled?: boolean) => Promise<AptosTransactionReturn>
Copy
const aptosTransaction: (args: AptosTransactionFuncArgs, ,apiKey: string, logEnabled?: boolean) => Promise<AptosTransactionReturn>
Copy
This function will initiate and execute a transaction on the specified Aptos network and return an object containing a success status and transaction result or an error message.




 * @param {AptosTransactionFuncArgs} args - The arguments required to execute the generic transaction on the Aptos blockchain.


 * @param {string} apiKey - Your API key from generated from LYNC dashboard - https://dashboard.lync.world


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.




 * @returns {object} AptosTransactionReturn - Returns an object with the success status and the transaction data or error message.




 * @typedef {object} AptosTransactionFuncArgs - { email: string; walletAddress: string; contractAddress: string; contractName: string; functionName: string; arguments: Array<AptosTransactionArguments>; usePaymaster?: boolean; }


 * @typedef {object} AptosTransactionArguments - { argument: string; type: "string" | "number" | "byte_array" | "signature" }


 * @typedef {object} AptosTransactionData - { transactionHash: string }


 * @typedef {object} AptosTransactionReturn - { success: true; data: AptosTransactionData } | { success: false; data: string }




 * @errors - The function can throw an error if the request fails. The error message is logged if logging is enabled.
Previous
Getting Started
Next
Example Codes in React & TypeScript
Last updated 
6 days ago
Example Codes in React & TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Functions Overview
1. Authenticating user with Google Sign-In
2. Signing Out a User
3. Get the details of a User
4. Generic Transactions on Aptos Blockchain
APTOS
LYNC Social Login SDK on Aptos
Example Codes in React & TypeScript
In this Section, you will see examples of how to use the functions provided by the SDK to integrate authentication, user management, and Aptos transaction execution into your React project. All the example uses TypeScript. However, the SDK can also be used with React and JavaScript in the same way, as shown in the examples.
Functions Overview
1. Authenticating user with Google Sign-In
Copy
// Function Signature -




const signInWithGoogle = (network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
This function allows users to sign in with Google using OAuthProvider.
Parameters:
network
: Network Type Enum.
apiKey : Your API key from generated from LYNC dashboard - https://dashboard.lync.world
logEnabled (Optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<SignInWithGoogleReturn>
:
{ success: true; user: UserData; } if successful.
{ success: false; message: string; } if unsuccessful.
Errors:
The function can throw an error if the sign-in operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
signInWithGoogle
 function:
Copy
import React from "react";


import { signInWithGoogle } from "@lyncworld/aptos-social-login-sdk";




const SignInButton = () => {


  const handleSignIn = async () => {


    try {


      const response = await signInWithGoogle(NetworkConfigs.Testnet,"<YOUR_API_KEY>",true);


      if (response.success) {


        console.log("User data:", response.user);


      } else {


        console.log("Error:", response.message);


      }


    } catch (error) {


      console.error("An error occurred:", error);


    }


  };




  return <button onClick={handleSignIn}>Sign in with Google</button>;


};




export default SignInButton;
2. Signing Out a User
Copy
// Function Signature -




const signOutUser = (logEnabled?: boolean) => Promise<SignOutUserReturn>
This function is used to sign out a user from the application. It uses Firebase's 
signOut
 function to sign out the user.
Parameters:
logEnabled (Optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<SignOutUserReturn>
:
{ success: true; } if successful.
{ success: false; message: string; } if unsuccessful.
Errors:
The function can throw an error if the sign-out operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
signOutUser
 function:
Copy
import React from "react";


import { signOutUser } from "@lyncworld/aptos-social-login-sdk";




const SignOutButton = () => {


  const handleSignOut = async () => {


    try {


      const response = await signOutUser(true);


      if (response.success) {


        console.log("User signed out successfully");


      } else {


        console.log("Error:", response.message);


      }


    } catch (error) {


      console.error("An error occurred:", error);


    }


  };




  return <button onClick={handleSignOut}>Sign out</button>;


};




export default SignOutButton;
3. Get the details of a User
Copy
// Function Signature -




const getUserProfile = (email: string, network: NetworkConfigs, apiKey: string, logEnabled?: boolean) => Promise<GetUserProfileReturn>
This function is an asynchronous function that fetches a user's profile from the server.
Parameters:
email
: The email of the user.
network
: Network Type Enum.
apiKey
 : Your API key from generated from LYNC dashboard - https://dashboard.lync.world
logEnabled (Optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<GetUserProfileReturn>:
{ success: true; data: UserData; } if successful.
{ success: false; data: string; } if unsuccessful.
Errors:
The function can throw an error if the fetch operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
getUserProfile
 function:
Copy
import React, { useEffect, useState } from "react";


import { getUserProfile } from "@lyncworld/aptos-social-login-sdk";




const UserProfileComponent = () => {


  const [userProfile, setUserProfile] = useState(null);




  useEffect(() => {


    const fetchUserProfile = async () => {


      const response = await getUserProfile("test@example.com",NetworkConfigs.Testnet,"<YOUR_API_KEY>");


      if (response.success) {


        setUserProfile(response.data);


      } else {


        console.error(response.message);


      }


    };




    fetchUserProfile();


  }, []);




  return (


    <div>


      {userProfile && (


        <div>


          <h2>{userProfile.name}</h2>


          <p>{userProfile.email}</p>


          {/* Render other user profile data as needed */}


        </div>


      )}


    </div>


  );


};




export default UserProfileComponent;
4. Generic Transactions on Aptos Blockchain
Copy
// Function Signature




const aptosTransaction = (args: AptosTransactionFuncArgs,apiKey: string,logEnabled?: boolean) => Promise<AptosTransactionReturn>
This is an asynchronous function that executes a generic Aptos transaction.
Parameters:
args (AptosTransactionFuncArgs)
: The arguments for the generic Aptos transaction. It is an object that includes the following properties:
email (string)
: The email of the user.
walletAddress (string)
: The wallet address of the currently signed-in user.
apiKey(string)
: Your API key from generated from LYNC dashboard - https://dashboard.lync.world
network (NetworkConfigs)
: Network Type Enum.
contractAddress (string)
: The contract address.
contractName (string)
: The contract name.
functionName (string)
: The function name.
arguments (Array)
: The arguments for the transaction. Each argument is an object that includes the following properties:
argument (string)
: The argument used by the function.
type (string)
: The type of the argument. It can be 
string
, 
number
, or 
byte_array
.
usePaymaster (Optional)
: Enable/disable the use of paymaster. The default is false. If you enable paymaster the transaction will be sponsored. Also, if the wallet doesn't exist, it will be created automatically before the transaction.
 
apiKey
: Your API key from generated from LYNC dashboard - https://dashboard.lync.world
logEnabled (Optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<AptosTransactionReturn>:
{ success: true; data: AptosTransactionData; } if successful.
{ success: false; data: string; } if unsuccessful.
Errors:
The function can throw an error if the transaction fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
aptosTransaction
 function to perform a simple transfer transaction:
Copy
import React, { useState } from "react";


import { aptosTransaction } from "@lyncworld/aptos-social-login-sdk";




const TransactionComponent = () => {


  const [transactionResult, setTransactionResult] = useState(null);




  const executeTransaction = async () => {


    const transactionArgs = {


      email: "user@example.com", // Email id of the sender


      walletAddress: "0x0000", // Public key of the sender


      apiKey: "<YOUR_API_KEY>",


      network: NetworkConfigs.Testnet


      contractAddress: "0x1",


      contractName: "aptos_account",


      functionName: "transfer",


      arguments: [


        {


          argument: "0x0000", // Wallet address of the receiver


          type: "string",


        },


        {


          argument: (1 * 10 ** 8).toString(), // Total APT to be transferred (Current argument will transfer 1 APT)


          type: "number",


        },


      ],


      usePaymaster: true, // Sponsor the transaction


    };




    const logEnabled = true;




    try {


      const response = await aptosTransaction(transactionArgs,"<YOUR_API_KEY>", logEnabled);


      setTransactionResult(response);


    } catch (error) {


      console.error("Error executing transaction:", error);


    }


  };




  return (


    <div>


      <button onClick={executeTransaction}>Execute Transaction</button>


      {transactionResult && (


        <div>


          <h2>Transaction Result:</h2>


          <p>Success: {transactionResult.success.toString()}</p>


          <p>Data: {JSON.stringify(transactionResult.data)}</p>


        </div>


      )}


    </div>


  );


};




export default TransactionComponent;
Previous
Using the SDK
Next
Types Used in the Methods Provided by the SDK
Last updated 
6 days ago
Types Used in the Methods Provided by the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Social Login SDK on Aptos
Types Used in the Methods Provided by the SDK
Types used in the SDK's methods for managing user profiles and handling Aptos transactions.
Copy
enum NetworkConfigs {


  Mainnet = 1,


  Testnet = 2,


}




type UserData = {


  id: string;


  walletAddress: string;


  name: string;


  email: string;


  providerId: string;


  avatar: string;


};




type GetUserProfileReturn = { success: true; data: UserData } | { success: false; message: string };




type RegisterUserPayloadData = {


  email: string;


  firebaseUid: string;


  avatar: string;


  name: string;


  network: NetworkConfigs;


  lastLoginAt: string;


  providerId: string;


};






type UpdateUserPayloadData = {


  email: string;


  network: NetworkConfigs;


  firebaseUid: string;


  publicKey: string;


  privateKey: string;


  apiKey: string;


};






type SignInWithGoogleReturn = { success: true; user: UserData } | { success: false; message: string };




type SignOutUserReturn = { success: true } | { success: false; message: string };




type AptosTransactionArguments = { argument: string; type: "string" | "number" | "byte_array" | "signature" };




type AptosTransactionFuncArgs = {


  email: string;


  walletAddress: string;


  network: NetworkConfigs;


  apiKey: string;


  contractAddress: string;


  contractName: string;


  functionName: string;


  arguments: Array<AptosTransactionArguments>;


  usePaymaster?: boolean;


};




type AptosTransactionData = { transactionHash: string };




type AptosTransactionReturn = { success: true; data: AptosTransactionData } | { success: false; data: string };
Previous
Example Codes in React & TypeScript
Next
Other Specification
Last updated 
6 days ago
Other Specification | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Social Login SDK on Aptos
Other Specification
Latest Version: 2.0.7
GitHub License: 
UNLICENSED
GitHub Repository URL
Package URL on NpmJs
Previous
Types Used in the Methods Provided by the SDK
Next
LYNC Aptos Lootbox
Last updated 
6 days ago
LYNC Aptos Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
On Chain Lootboxes
Link to LYNC Aptos Lootbox
Randomization and Its Importance
LYNC's Aptos Lootbox
What is inside a Lootbox
APTOS
LYNC Aptos Lootbox
Previous
Other Specification
Next
Getting Started
Last updated 
1 month ago
Loot boxes
 are virtual mystery boxes in games that contain randomized in-game items. Loot boxes play a crucial role in keeping players engaged by creating a sense of anticipation and excitement around what they might receive. This encourages players to keep playing while generating significant revenue for game developers through in-game purchases.
On Chain Lootboxes
On-chain loot boxes
 are a new, blockchain-based version of these virtual mystery boxes. These loot boxes use blockchain technology and smart contracts to manage every step of the process in a decentralized and transparent way. The use of blockchain ensures that no one can tamper with or manipulate the outcome, providing players with a fair and trustworthy experience
Link to LYNC Aptos Lootbox
Randomization and Its Importance
Randomization
 is the process that ensures each reward within a loot box is distributed in an unpredictable and unbiased way. It's a key component in creating and managing loot boxes because it directly impacts the player experience and the fairness of the system. The excitement of opening a loot box comes from the uncertainty of what it might contain, which is made possible by effective randomization. Randomization is crucial for creating and managing loot boxes because:
The unpredictable nature of rewards makes opening loot boxes exciting and engaging for players.
Proper randomization means every player has an equal chance of winning any given reward, preventing favoritism or manipulation.
When players know that the randomization is genuinely fair and transparent, they are more likely to engage with the game and its loot boxes.
LYNC's Aptos Lootbox
Introducing our new lootbox on the Aptos blockchain, designed to easily create, open lootboxes, and claim rewards, such as NFTs and tokens, directly within the web application interface. Our web application provides a simple yet powerful solution for creating and using an on-chain lootbox, claiming rewards in the form of NFTs and tokens on the Aptos blockchain network, ensuring a smooth and hassle-free user experience. With just a few clicks, users can unlock the full potential of randomness and blockchain transactions, enabling users to easily interact with the lootboxes within the web application's interface.
What is inside a Lootbox
Our on-chain loot boxes are filled with a mix of 
Digital Assets (DAs - a modern Non-Fungible Token (NFT) standard for Aptos) and Fungible Assets (FAs - a modern replacement for the coin module that allows for seamless minting, transfer, and customization of fungible assets)
, making every opening a unique and exciting experience. The contents of these boxes are chosen using a randomization method known as the 
Verifiable Random Function (VRF)
, which is an on-chain mechanism that ensures complete fairness and transparency in selecting rewards.
Digital Assets (DAs)
 represent a modern Non-Fungible Token (NFT) standard for Aptos, a digital reward that players can receive when they open a loot box. Because DAs are non-fungible, each one has its distinct value and properties, making them highly desirable to players who want something unique and collectible.
Fungible Assetss (FAs)
 are a modern replacement for the coin module on the Aptos blockchain that allows for seamless minting, transfer, and customization of fungible assets for any use case. Players can earn these tokens through loot boxes and use them for in-game purchases, to unlock new levels, or trade them with other players.
By including these different types of DAs and FAs, our loot boxes provide a richer and more dynamic experience. The use of the 
VRF (Verifiable Random Function)
 ensures that every time a loot box is opened, the reward selection process is genuinely random and unbiased, enhancing trust and fairness in the reward system.
Lync Aptos Lootbox
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Aptos Lootbox
Getting Started
Connect Your Wallet
To create and use a lootbox using the LYNC's Aptos Lootbox, you first need to connect your wallet.
Navigate to our web application to start the creation of a lootbox, open a lootbox, and claim rewards.
Locate and click the 
'Connect Wallet'
 button, it is located at the top right corner of the page.
A popup will appear, asking you to connect your 
Petra Wallet
.
You will be guided through the connection process. Follow the specific instructions provided by the wallet to connect to the web application.
After authorizing the connection, You will see your wallet address displayed in the top right corner.
Once connected, you're ready to start creating, opening lootboxes, and claiming rewards directly from our Aptos lootbox portal.
Note:
 Ensure your wallet is funded with sufficient APT tokens required for gas fees during the lootbox creation and claiming process.
Previous
LYNC Aptos Lootbox
Next
Creating a Lootbox
Last updated 
2 months ago
Creating a Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Choose Assets to Include in the Lootbox
DAs (Digital Assets):
FAs (Fungible Assets):
Review and Confirm Deployment
APTOS
LYNC Aptos Lootbox
Creating a Lootbox
Previous
Getting Started
Next
Opening a Lootbox
Last updated 
2 months ago
Creating a lootbox on Aptos Lootbox involves depositing assets (NFTs and APT Tokens) and setting parameters that will control how rewards are distributed when someone opens the lootbox.
Before creating a lootbox, the user needs to connect to the Aptos Lootbox web application using their 
Petra Wallet
. Once connected, the user can navigate to the section where they can create a new lootbox.
Choose Assets to Include in the Lootbox
DAs (Digital Assets):
The Digital Asset (DA) standard is a modern Non-Fungible Token (NFT) standard for Aptos. NFTs represent unique assets on-chain, and are stored in collections. These NFTs can be customized to later be transferred, soulbound, burned, mutated, or customized via your smart contracts. You can refer to the 
Aptos documentation
 to know more about 
Fungible Assets
 and how to create one.
Users can deposit DAs in the form of NFTs in the lootbox. To deposit NFTs in the lootbox, the user needs to provide the details of the collection they want to include in the lootbox along with the details of NFTs in the collection. The user will also need to specify the other important details like token URI, maximum supply, and pick range (the maximum and minimum number of NFT tokens from each collection) of NFTs to be given to a user after opening a lootbox.
Add Collection Details
: For each collection, the user will need to provide details like collection name, token name, token URI base, and maximum supply of tokens for that particular collection.
A collection of tokens on the Aptos blockchain can contain zero, one, or many distinct fungible or non-fungible assets within it. The collection is simply a container, intended only to group assets for a creator.
Each token included in the lootbox must be associated with a collection, and that collection must have remaining tokens that can be minted.
Specify Range
: After adding the NFTs, the user specifies the range of how many NFTs can be given out when the lootbox is opened. For instance, if the user added a collection that has a maximum supply of 100 tokens, then the user may specify that the lootbox should give out between 1 and 3 tokens whenever a user opens the lootbox. This range defines how many NFTs the system will randomly select when the lootbox is opened.
FAs (Fungible Assets):
The Aptos Fungible Asset Standard (also known as “Fungible Asset” or “FA”) provides a standard, type-safe way to define fungible assets in the Move ecosystem. It is a modern replacement for the coin module that allows for seamless minting, transfer, and customization of fungible assets for any use case. You can refer to the 
Aptos documentation
 to know more about 
Fungible Assets
 and how to create one.
Users can deposit FAs in the form of APTs in the lootbox. To include FAs in the lootbox, the user needs to provide the maximum amount of APTs they want to include in the lootbox, and a pick range to select APTs within the specified range whenever a user opens the lootbox.
Specify maximum amount
: The user needs to specify the total amount of APTs they want to deposit to the lootbox. This deposit APT amount will be available to the users who open the lootbox and will be distributed to them within the specified range until all the APTs are distributed to the users.
Specify Range
: Similar to NFTs, the user defines the range for how many APTs will be given when the lootbox is opened.  For instance, if the user added a maximum of 100 APTs, then the user may specify that the lootbox should give out between 0.1 and 0.25 APTs whenever a user opens the lootbox. This range defines how many APTs the system will randomly select when the lootbox is opened.
Review and Confirm Deployment
Before finalizing the lootbox, the user can review all the details of included NFTs and APTs. Once everything is reviewed, the user can find the 
"Next"
 button and click the button to confirm the creation of the lootbox.
Once the lootbox is created, it becomes available for opening. At this point, the lootbox is visible in the user interface, and ready for opening. If desired, the user can share the lootbox with others, or they may choose to open it themselves.
Each lootbox created using the Aptos lootbox web application has a unique lootbox ID, which is used to identify the lootboxes and items in them uniquely. Users can share their created lootboxes with other users as well for opening the lootboxes and claiming rewards.
Each lootbox created by the user is available on the "Your Lootboxes" page. User can view their created lootboxes on this page and they can also see the status of their created lootboxes - whether they are still "active" or "empty".
A lootbox remains active "active" untill all the rewards inside the lootboxes are distributed. After all the rewards are distributed, lootbox becomes empty and will no longer be available for opening to other users.
IMPORTANT NOTES -
Users can only a maximum amount of APTs that is already available in their wallet excluding gas fees.
Although the user sets specific ranges for both DAs and FAs, the system will handle the randomization process. For example, if the user defines that the lootbox will give out between 1-3 NFTs, the number and selection of NFTs are random within this range when the box is opened.
Each lootbox can be opened and claimed once per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards only one time until the lootbox becomes empty.
LYNC Aptos Lootbox Homepage
Form to Add NFTs to the Lootbox
Form to Add APTs to the Lootbox
Users can Review All the Assets Deposited to the Lootbox
Lootbox is ready to open after successful creation
Opening a Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Initiate the Opening
Random Reward Selection
APTOS
LYNC Aptos Lootbox
Opening a Lootbox
Previous
Creating a Lootbox
Next
Claiming the Rewards
Last updated 
2 months ago
Once a lootbox is created, users (or others) can open the lootbox by pressing the 'Open Your Lootbox' button, revealing the randomized rewards.
To open a lootbox, the user must be connected to the Aptos Lootbox platform using their 
Petra Wallet
. This ensures that the rewards from the lootbox will be deposited directly into their wallet after opening.
Initiate the Opening
The user can see an 
“Open Your Lootbox”
 button on the open lootbox page. Upon clicking this button, the lootbox opening process is initiated, triggering the randomization of rewards inside the box.
Random Reward Selection
After initiating the opening, the Aptos Lootbox system in the background selects the rewards based on the user-defined parameters that were set during lootbox creation.
If the lootbox contains DAs, the system will randomly select some NFTs (within the range defined during lootbox creation) and choose which specific NFTs from the deposited pool will be given as a reward.
Similarly, for FAs (fungible assets), the system will select a random number of APTs from the specified range and choose how many APTs will be given to the user. The selection process is entirely random, ensuring each opening is unique and unpredictable.
If the user receives NFTs, they will see the details of which specific NFTs have been awarded to them. Similarly, if the lootbox includes FTs (fungible tokens), the user will see how many tokens they’ve received and the type of token.
After the rewards are revealed, the user must claim them to finalize the process and transfer the assets into their wallet. A “Claim” button will appear on the web page to claim the randomly selected rewards. Clicking this button initiates the final step of transferring the NFTs and FTs (fungible tokens) to the user’s Fuel Wallet.
Once the user clicks the claim button, the rewards are automatically deposited into the connected Petra Wallet. The NFTs and APTs are directly transferred into the user’s connected wallet. The user can now view their claimed assets in their Petra Wallet immediately.
Important Notes -
Each lootbox can be opened and claimed once per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards only once until the lootbox becomes empty.
Once the lootbox is opened and the random rewards are determined, there is no option to change or modify the outcome.
Even if a user opens a lootbox but decides not to claim the rewards, they cannot reopen the box to try again.
Lootbox is ready to open
Users can Claim the Randomly Selected Rewards After Opening the Lootbox
Claiming Rewards Requires Approval from User's Connected Wallet
Claiming the Rewards | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Aptos Lootbox
Claiming the Rewards
Previous
Opening a Lootbox
Next
Conclusion
Last updated 
2 months ago
Before claiming rewards, the user must have completed the lootbox opening process. The rewards have been displayed on the screen, showing which DAs and the amount of APTs the user has received.
After opening the lootbox, the user should review the rewards that were revealed. This ensures that the user understands what they are about to claim.
The user will see the details of each NFT and the amount of APTs (fungible assets) they have received. To proceed with claiming the rewards, the user needs to click the 
"Claim Your Rewards"
 button. This action initiates the final step of the process.
Clicking the 
"Claim Your Rewards"
 button will take the action to complete the transfer of the rewards from the lootbox to the user’s Petra Wallet. The action will update the lootbox status to reflect that the rewards have been claimed, and the lootbox can no longer be used or reopened.
The Aptos Lootbox backend system performs the necessary operations to ensure the NFTs and APTs are correctly moved from the lootbox to the user’s wallet. After processing, the rewards are deposited into the user’s Petra Wallet. The user can immediately view the claimed NFTs and APTs in their Petra Wallet.
There is no need for the user to perform any additional actions to see the rewards in their wallet. The lootbox's status is updated to reflect that it has been used, and no further actions can be taken with that lootbox.
Important Notes -
Each lootbox can only be claimed once. After the rewards are claimed, the user cannot claim additional rewards from the same lootbox.
Once rewards are claimed and transferred to the wallet, the action cannot be reversed. Users should ensure they want to claim the rewards before finalizing the action.
The rewards are accessible in the user’s wallet immediately after claiming, providing instant satisfaction and seamless integration with the user’s Petra Wallet.
Users can view the rewards they get after opening the lootbox
Conclusion | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
APTOS
LYNC Aptos Lootbox
Conclusion
Aptos Lootbox offers an engaging and dynamic experience for users interested in exploring the world of digital assets and fungible assets. The platform combines the use of randomness with the excitement of digital asset rewards, creating a unique and interactive environment for all participants.
Aptos Lootbox makes discovering digital assets both exciting and enjoyable. To start, you can create your lootboxes by adding your DAs and FAs. You get to decide how many of each type will be randomly given out, tailoring each lootbox to your preferences. When it comes to opening a lootbox, it’s like unwrapping a surprise gift. Once the lootbox is open and you’ve seen your rewards, just click “Claim Your Rewards”, and your DAs and FAs are instantly added to your Petra wallet.
The whole process is designed to be user-friendly and fun, with smooth animations and quick reward transfers making it enjoyable from start to finish. Keep in mind that each lootbox can be opened and claimed only once per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards only once until the lootbox becomes empty. Overall, Aptos Lootbox offers a playful and engaging way to explore and collect digital assets, ensuring that every experience is filled with excitement and surprise.
Previous
Claiming the Rewards
Next
Indexer
Last updated 
2 months ago
Indexer | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get an NFT Data
Playground for the GraphQL Query:
Movement Labs
📇
Indexer
There are main no-code components to indexing with the Movement on-chain data.
Previous
Conclusion
Next
How to run index custom data?
Last updated 
4 months ago
Most applications 
require
 an indexer to efficiently query for on-chain state as the 
Movement Node API
 provides only a basic, stable API and does not support data shaping required for rich user experiences. The LYNC Indexer on Movement processes raw blockchain data for app-specific needs, enabling low-latency and enhanced experiences for end-user applications.
Here’s an example of how you can query for the Current Coin Balances of an account. More usage examples can be found in example queries.
Get an NFT Data
Base URL: 
https://mevm-devnet.lync.world/subgraphs/name/mevm
POST
 
/getNftBalances
Playground for the GraphQL Query:
GraphQL Query:
The graphQL query is it fetch all the NFTs  and it's data (including ERC-721 and ERC-1155)
Copy
{


  getNftBalances(first:100) {


    id


    owner


    amount


    nft {


      id


      contractAddress


      name


      symbol


    }


  }


}
How to run your own Indexer on MEVM
The GraphiQL
Get NFT Data GraphQL Query
How to run index custom data? | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Step 1. Create Subgraph
Step 2. Get AUTH TOKEN from LYNC team
Step 3. Set your AUTH TOKEN to prepare for deployment
Step 4: Create a new subgraph
Step 5: Deploy you created subgraph:
Troubleshooting
Movement Labs
📇
Indexer
How to run index custom data?
To to deploy your subgraph on movement mevm devnet.
Step 1. Create Subgraph
Create your subgraph: 
https://thegraph.com/docs/en/developing/creating-a-subgraph/
Once done, Make sure to set 
network
 to 
devnet
NOTE: Set your 
network
 to 
devnet
 in your 
subgraph.yaml
 file manually. It will not be listed in the 
graph init
 command because mevm is not yet supported by thegraph.
Your subgraph.yaml should look something like this:
Copy
specVersion: 0.0.4


schema:


  file: ./schema.graphql


dataSources:


  - kind: ethereum


    name: ERC1155


    network: devnet


    source:


      abi: ERC1155


      address: "0x4114e6516413c5ba631002a0cf95e828714f8f18"


      startBlock: 1785835


    mapping:


      kind: ethereum/events


      apiVersion: 0.0.6


      language: wasm/assemblyscript


      entities:


        - NFT


        - NftData


        - NftApprovalForAll


      abis:


        - name: ERC1155


          file: ./abis/ERC1155.json


      eventHandlers:


        - event: TransferBatch(indexed address,indexed address,indexed address,uint256[],uint256[])


          handler: handleTransferBatch1155


        - event: TransferSingle(indexed address,indexed address,indexed address,uint256,uint256)


          handler: handleTransferSingle1155


        - event: URI(string,indexed uint256)


          handler: handleURI1155


        - event: ApprovalForAll(indexed address,indexed address,bool)


          handler: handleApprovalForAll1155


      file: ./src/mapping.ts
NOTE: This is just an example no need to copy it as it is.
Step 2. Get 
AUTH TOKEN
 from
 LYNC team
Get your AUTH TOKEN from 
LYNC Team
Step 3. Set your 
AUTH TOKEN
 to prepare for deployment
In your subgraph directory run:
Copy
graph auth https://api.mevm-devnet.lync.world/deploy
This will prompt you to enter your deploy key. Pass the 
AUTH TOKEN
 in there.
Step 4: Create a new subgraph
Copy
graph create --node https://api.mevm-devnet.lync.world/deploy <PROJECT>/<NAME>
Note: Replace the 
<PROJECT>/<NAME>
 accordingly. Example 
lync/nfts
If you have properly setup the correct 
AUTH TOKEN
 and subgraph name you should see output like this:
If you get any error(s) refer to the 
Troubleshooting section
Step 5: Deploy you created subgraph:
In the subgraph directory after completing the above steps run:
Copy
graph deploy <PROJECT>/<NAME> --node https://api.mevm-devnet.lync.world/deploy --ipfs https://ipfs.lync.world
Note: Replace the 
<PROJECT>/<NAME>
 accordingly. Example 
lync/nfts
If everything goes right you will see output like:
Note: Currently we do not have any validations on version label so it can be anything.
Also, you can ignore the HTTP queries endpoint that is shown in the output.
The subgraph will be deployed on:
Copy
https://mevm-devnet.lync.world/subgraphs/name/<PROJECT>/<NAME>
Note: Replace the 
<PROJECT>/<NAME>
 accordingly. Example 
lync/nfts
You can use this endpoint to query your subgraph data using graphql.
Troubleshooting
If while deploying the subgraph you face any errors like:
Copy
x graph create --node <https://api.mevm-devnet.lync.world/deploy> lync/nfts


 ›   Warning: In next major version, this command will be merged as a subcommand for `graph local`.


✖ HTTP error creating the subgraph: 480


/home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/@oclif/core/lib/errors/index.js:21


    throw new exit_2.ExitError(code);


    ^




ExitError: EEXIT: 1


    at Object.exit (/home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/@oclif/core/lib/errors/index.js:21:11)


    at CreateCommand.exit (/home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/@oclif/core/lib/command.js:131:23)


    at /home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/dist/commands/create.js:50:22


    at Client._parseResponse (/home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/jayson/lib/client/index.js:190:12)


    at /home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/jayson/lib/client/index.js:149:10


    at IncomingMessage.<anonymous> (/home/tit4n/.nvm/versions/node/v20.14.0/lib/node_modules/@graphprotocol/graph-cli/node_modules/jayson/lib/client/http.js:80:11)


    at IncomingMessage.emit (node:events:531:35)


    at endReadableNT (node:internal/streams/readable:1696:12)


    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {


  oclif: { exit: 1 },


  code: 'EEXIT'


}




Node.js v20.14.0
Here, take a look at the error code. 
480
 in the output above.
ERROR CODE
REASON
SOLUTION
401
Request Unauthorized
Make sure the AUTH TOKEN is correct and run the graph auth command 
again
.
470
Naming format not followed properly
The name of the subgraph should be in the format <PROJECT>/<NAME>
480
Name already taken
Reuse of the subgraph name is not allowed. Use a different name.
500
Internal Server error
Contact LYNC Support
Previous
Indexer
Next
Example Queries
Last updated 
5 months ago
Example Queries | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
📇
Indexer
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
Previous
How to run index custom data?
Next
Get Token Info
Get Token Info | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
📇
Indexer
Example Queries
Get Token Info
Retrieves the ERC-20 Token Data from contract address
Previous
Example Queries
Next
Get Token Balances
Last updated 
6 months ago
GetTokenInfo
 can fetch data such as the symbol, name, decimals, and the coin type itself. This is particularly useful for applications needing to display token details.

Base URL: 
https://mevm-devnet.lync.world/subgraphs/name/mevm
Playground for the GraphQL Query:
GraphQL Query:
The graphQL query returns id, contractAddress, Name, Symbol and Decimals
Copy
{


  getTokenInfos(where: {contractAddress:"0x00142eebe0bc35ecf94c221e85462bd281a1eb19"}){


    id


    contractAddress


    name


    symbol


    decimals


  }


}
The GraphiQL
Get Token Balances | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get All Token Data from Wallet Address:
Playground for the GraphQL Query:
Get Token Data from Wallet Address and Contract Address of token:
Playground for the GraphQL Query:
Movement Labs
📇
Indexer
Example Queries
Get Token Balances
Retrieves the various ERC-20 Token balance by passing wallet address
GetCoinBalances
 retrieves the current balances for various coin types associated with a specified account address. This is crucial for platforms requiring real-time information on account coin holdings.

Base URL: 
https://mevm-devnet.lync.world/subgraphs/name/mevm
Get All Token Data from Wallet Address:
The graphQL query filters data based on wallet address and returns balance, contractAddress, Name, Symbol etc.
Copy
{


 getTokenBalances(where: {account: "0x26e76b18d4a132a9397c46af11e4688bdb602e92"}) {


    id


    account


    value


    token{


      id


      contractAddress


      name


      symbol


      decimals


    }


  }


}
Playground for the GraphQL Query:
The GraphiQL
Get Token Data from Wallet Address and Contract Address of token:
The graphQL query filters data based on wallet address and returns balance, contractAddress, Name, Symbol etc.
Copy
{


  getTokenBalances(where: {account: "0x26e76b18d4a132a9397c46af11e4688bdb602e92",


   token_: {contractAddress: "0x000ccc41cd1c789643ce2904aa9730bdf409819f"}}) {


    id


    account


    value


    token{


      id


      contractAddress


      name


      symbol


      decimals


    }


  }


}
Playground for the GraphQL Query:
The GraphiQL
Previous
Get Token Info
Next
Get NFTs Owned by an Account
Last updated 
5 months ago
Get NFTs Owned by an Account | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Indexer
Example Queries
Get NFTs Owned by an Account
Retrieves the various ERC-20 Token balance by passing wallet address
GetAccountNfts
 retrieves a list of NFTs owned by a specified account address. This query provides comprehensive details about each token, including its collection details, description, and unique identifiers. It is ideal for platforms that need to display the NFT portfolios of users or provide insights into the NFT market holdings.
Base URL: 
https://mevm-devnet.lync.world/subgraphs/name/mevm
Get All NFTs:
The graphQL query filters data based on wallet address and returns balance, contractAddress, Name, Symbol etc.
Copy
{


  getNftBalances {


    id


    owner


    amount


    nft {


      id


      contractAddress


      name


      symbol


    }


  }


}
Playground for the GraphQL Query:
Get Token Data from Wallet Address:
The graphQL query filters data based on wallet address, contract address and returns balance, contractAddress, Name, Symbol etc.
Copy
{


  getNftBalances(


    where: {owner: "0x241db4bd1fc3b1f98a88db8fc81642b5a7ddf9bc"}


  ) {


    id


    nft {


      id


      contractAddress


      name


      symbol


    }


  }


}
Playground for the GraphQL Query:
Get Token Data from Wallet Address and Contract Address of token:
The graphQL query filters data based on wallet address and returns balance, contractAddress, Name, Symbol etc.
Copy
{


  getNftBalances(


    where: {owner: "0x241db4bd1fc3b1f98a88db8fc81642b5a7ddf9bc",nft_:{contractAddress: "0x0f3797c4ef30efe8bef141eeac1fe322fcdfc482"}}


  ) {


    id


    nft {


      id


      contractAddress


      name


      symbol


    }


  }


}
Playground for the GraphQL Query:
Previous
Get Token Balances
Next
NFT Deployer
Last updated 
5 months ago
📇
Get All NFTs:
Playground for the GraphQL Query:
Get Token Data from Wallet Address:
Playground for the GraphQL Query:
Get Token Data from Wallet Address and Contract Address of token:
Playground for the GraphQL Query:
The GraphiQL
Get All NFTs
The GraphiQL
Playground to Get Tokens Data from Wallet Address
The GraphiQL
NFT Deployer | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
NFT Deployer
It's a no-code Smart Contract Deployment Platform Supporting MEVM
Previous
Get NFTs Owned by an Account
Next
LYNC Social Login SDK on Movement
Last updated 
6 months ago
LYNC NFT Deployer is a smart contract deployment platform that allows users to create and deploy their 1/1 NFT, Multiple editions, in-game assets as an NFT and Entire NFT Collection with gasless transactions in just a few clicks.
NFT Deployer on 
MEVM
: 
https://mevm-deployer.lync.world/
NFT Deployer on MEVM
LYNC Social Login SDK on Movement | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Social Login SDK on Movement
This SDK is designed to simplify the integration of secure authentication and seamless transaction capabilities within applications on the Movement testnet.
Previous
NFT Deployer
Next
Getting Started
Last updated 
1 month ago
Try Demo Application:
Introducing our new SDK, The Social Login and Movement Transaction SDK, designed to streamline the authentication process and facilitate seamless transactions on Movement testnet for users. With this SDK, developers can easily integrate Social login functionality (Login using Google account) into their applications, allowing users to sign in securely with their Google credentials. Once authenticated, users can perform a variety of Movement transactions on testnet effortlessly. Our SDK provides a simple yet powerful solution for developers looking to enhance their applications with secure login and testnet transaction capabilities, ensuring a smooth and hassle-free user experience. With just a few lines of code, developers can unlock the full potential of Google login and Movement testnet transactions, enabling users to easily interact with their applications.
Note - The current SDK version supports generic Movement transactions only on 
Movement Testnet
.
Lync Social SDK
Social login example project on Movement blockchain
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Pre Requisites
Integration
Adding Access Token
Installing the Package
Movement Labs
LYNC Social Login SDK on Movement
Getting Started
Pre Requisites
Before you begin integrating Movement Social Login SDK, make sure you have the following prerequisites:
Node.js (version 20 or above)
 installed on your system.
NPM (version 10 or above)
 or 
Yarn (latest version)
 installed on your system.
Integration
Adding Access Token
To authenticate with our private NPM registry, you will need to add an 
access token
. You need to configure your 
.npmrc
 file to include the credentials. Follow these steps to add the token for installing our private NPM registry:
Locate or Create 
.npmrc
: Navigate to your project's root directory and locate the 
.npmrc
 file. If it doesn't exist, create one in the root directory of your project (at the same level as the 
package.json
 file).
Add Auth Token
: Add the access token and scope name to the 
.npmrc
 file using the following format:
.npmrc
Copy
//registry.npmjs.org/:_authToken=YOUR_ACCESS_TOKEN


@lyncworld:registry=https://registry.npmjs.org/
Replace 
YOUR_ACCESS_TOKEN
 with the actual access token you get from us.
Save the Changes: Save the 
.npmrc
 file.
Installing the Package
Once you've configured your 
.npmrc
 file with the access token, you can install the package using either 
NPM
 or 
Yarn
. Follow these steps:
Open your terminal.
Navigate to your project's directory.
Run the following command:
Copy
npm install --save @lyncworld/movement-social-login-sdk
or
Copy
yarn add @lyncworld/movement-social-login-sdk
Congratulations! You have successfully integrated 
@lyncworld/movement-social-login-sdk
 into your project. If you encounter any issues or have any questions, feel free to reach out to our support team for assistance.
Previous
LYNC Social Login SDK on Movement
Next
Using the SDK
Last updated 
6 months ago
Using the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Functions Overview
1. signInWithGoogle: (network: MovementNetwork, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
2. signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
3. getUserData: (email: string, network: MovementNetwork, logEnabled?: boolean) => Promise<GetUserProfileReturn>
4. movementTransaction: (args: MovementTransactionFuncArgs, logEnabled?: boolean) => Promise<MovementTransactionReturn>
Movement Labs
LYNC Social Login SDK on Movement
Using the SDK
In this Section, you will learn what are the functions provided by the SDK to integrate authentication, user management, and Movement transaction execution into your project.
Functions Overview
1. signInWithGoogle: (network: MovementNetwork, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
Copy
const signInWithGoogle: (network: MovementNetwork, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>
Copy
This function allows users to sign in with Google using OAuthProvider.




 * @param {MovementNetwork} network - The network on which the transaction will be executed.


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.




 * @returns {object} SignInWithGoogleReturn - Returns an object with the success status and the user data or error message.




 * @typedef {enum} MovementNetwork - { Mainnet = 1, Testnet = 2, Devnet = 3 }


 * @typedef {object} SignInWithGoogleReturn - { success: true; user: UserData } | { success: false; message: string };


 * @typedef {object} UserData - { id: string; walletAddress: string; name: string; email: string; providerId: string; avatar: string; }




 * @errors - The function can throw an error if the sign-in operation fails. The error message is logged if logging is enabled.
2. signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
Copy
const signOutUser: (logEnabled?: boolean) => Promise<SignOutUserReturn>
Copy
This function is used to sign-out a user from the application. It uses Firebase's signOut function to sign out the user.




 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.


 


 * @returns {object} SignOutUserReturn - Returns an object that contains a success status and (optionally) an error message.


 


 * @typedef {object} SignOutUserReturn - { success: true } | { success: false; message: string };




 * @errors - The function can throw an error if the sign-out operation fails. The error message is logged if logging is enabled.
3. getUserData: (email: string, network: MovementNetwork, logEnabled?: boolean) => Promise<GetUserProfileReturn>
Copy
const getUserData: (email: string, network: MovementNetwork, logEnabled?: boolean) => Promise<GetUserProfileReturn>
Copy
This function is used to get the user data from the server using the getUserProfile function.




 * @param {string} email - The email address of the user.


 * @param {MovementNetwork} network - The network on which the transaction will be executed.


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.




 * @returns {object} GetUserProfileReturn - Returns an object with the success status and the user data or error message.




 * @typedef {enum} MovementNetwork - { Mainnet = 1, Testnet = 2, Devnet = 3 }


 * @typedef {object} GetUserProfileReturn - { success: true; data: UserData } | { success: false; message: string };


 * @typedef {object} UserData - { id: string; walletAddress: string; name: string; email: string; providerId: string; avatar: string; }




 * @errors - The function can throw an error if the request fails. The error message is logged if logging is enabled.
4. movementTransaction: (args: MovementTransactionFuncArgs, logEnabled?: boolean) => Promise<MovementTransactionReturn>
Copy
const movementTransaction: (args: MovementTransactionFuncArgs, logEnabled?: boolean) => Promise<MovementTransactionReturn>
Copy
This function will initiate and execute a transaction on the specified Movement network and return an object containing a success status and transaction result or an error message.




 * @param {MovementTransactionFuncArgs} args - The arguments required to execute the generic transaction onthe  Movement blockchain.


 * @param {boolean} [logEnabled] - Enable/disable logging. The default is true.




 * @returns {object} MovementTransactionReturn - Returns an object with the success status and the transaction data or error message.




 * @typedef {enum} MovementNetwork - { Mainnet = 1, Testnet = 2, Devnet = 3 }


 * @typedef {object} MovementTransactionFuncArgs - { email: string; accountAddress: string; network: MovementNetwork; contractAddress: string; contractName: string; functionName: string; arguments: Array<MovementTransactionArguments>; usePaymaster?: boolean; }


 * @typedef {object} MovementTransactionArguments - { argument: string; type: TransactionArgumentTypes }


 * @typedef {enum} TransactionArgumentTypes - { String = 1, Number = 2, ByteArray = 3, Signature = 4 }


 * @typedef {object} MovementTransactionData - { transactionHash: string }


 * @typedef {object} MovementTransactionReturn - { success: true; data: MovementTransactionData } | { success: false; data: string }




 * @errors - The function can throw an error if the request fails. The error message is logged if logging is enabled.
Previous
Getting Started
Next
Example Codes in React & TypeScript
Last updated 
6 months ago
Example Codes in React & TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Functions Overview
1. Authenticating user with Google Sign-In
2. Signing Out a User
3. Get the details of a User
4. Generic Transactions on Movement Networks
Movement Labs
LYNC Social Login SDK on Movement
Example Codes in React & TypeScript
In this Section, you will see examples of how to use the functions provided by the SDK to integrate authentication, user management, and Movement transaction execution into your React project. All the example uses TypeScript. However, the SDK can also be used with React and JavaScript in the same way, as shown in the examples.
Functions Overview
1. Authenticating user with Google Sign-In
Copy
// Function Signature -




const signInWithGoogle = (network: MovementNetwork, logEnabled?: boolean) => Promise<SignInWithGoogleReturn>;
This function allows users to sign in with Google using OAuthProvider.
Parameters:
network
: The network on which the transaction will be executed. For now, only 
testnet
 is supported.
logEnabled (optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<SignInWithGoogleReturn>
:
{ success: true; user: UserData; } if successful.
{ success: false; message: string; } if unsuccessful.
Errors:
The function can throw an error if the sign-in operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
signInWithGoogle
 function:
SignInButton.tsx
Copy
import React from "react";




// Import the `signInWithGoogle` function from our SDK


import { signInWithGoogle } from "@lyncworld/movement-social-login-sdk";




const SignInButton = () => {




  // Create a function to call the `signInWithGoogle` function


  // and handle your custom sign-in logic


  const handleSignIn = async () => {


    try {


      // Your custom logic before authentication goes here...




      // Use the `signInWithGoogle` method from the SDK to authenticate the user.


      // This function authenticates the user and returns an object that contains


      // a success status and user data or error message based on the result of


      // authentication (refer to above-described documentation for return values)


      const response = await signInWithGoogle(MovementNetwork.Testnet);


      


      // Your custom logic after authentication goes here...


      if (response.success) {


      


        // If authentication is successful, the function will return the user data


        console.log("User data:", response.user);


      } else {


      


        // If authentication fails, the function will return an error message


        // describing why the authentication has failed


        console.log("Error:", response.message);


      }


    } catch (error) {


    


      // Your custom error handling logic goes here...


      console.error("An error occurred:", error);


    }


  };




  return <button onClick={handleSignIn}>Sign in with Google</button>;


};




export default SignInButton;
2. Signing Out a User
Copy
// Function Signature -




const signOutUser = (logEnabled?: boolean) => Promise<SignOutUserReturn>;
This function is used to sign a user out of the application. It uses Firebase's 
signOut
 function to sign out the user.
Parameters:
logEnabled (optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<SignOutUserReturn>
:
{ success: true; } if successful.
{ success: false; message: string; } if unsuccessful.
Errors:
The function can throw an error if the sign-out operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
signOutUser
 function:
SignOutButton.tsx
Copy
import React from "react";




// Import the `signOutUser` function from our SDK


import { signOutUser } from "@lyncworld/movement-social-login-sdk";




const SignOutButton = () => {




  // Create a function to call the `signOutUser` function


  // and handle your custom sign-out logic


  const handleSignOut = async () => {


    try {


      // Your custom logic before sign-out goes here...




      // Use the `signOutUser` method from the SDK to sign the user out.


      // This function signs a user out of the application and returns an object that


      // contains a success status and (optionally) an error message based on the


      // result of sign out (refer to above-described documentation for return values)


      const response = await signOutUser();


  


      // Your custom logic after sign-out goes here...


      if (response.success) {


      


        // If sign-out is successful, the function will return `true` for success


        console.log("User signed out successfully");


      } else {


      


        // If sign-out fails, the function will return `false` for success


        // and an error message describing why the sign-out has failed


        console.log("Error:", response.message);


      }


    } catch (error) {


    


      // Your custom error handling logic goes here...


      console.error("An error occurred:", error);


    }


  };




  return <button onClick={handleSignOut}>Sign out</button>;


};




export default SignOutButton;
3. Get the details of a User
Copy
// Function Signature -




const getUserData = (email: string, network: MovementNetwork, logEnabled?: boolean) => Promise<GetUserProfileReturn>;
This function is an asynchronous function that fetches a user's profile from the server.
Parameters:
email
: The email of the user.
network
: The network on which the transaction will be executed. For now, only 
testnet
 is supported.
logEnabled (optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<GetUserProfileReturn>:
{ success: true; data: UserData; } if successful.
{ success: false; data: string; } if unsuccessful.
Errors:
The function can throw an error if the fetch operation fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
getUserProfile
 function:
UserProfileComponent.tsx
Copy
import React, { useEffect, useState } from "react";




// Import the `getUserProfile` function from our SDK


import { getUserProfile, MovementNetwork, UserData } from "@lyncworld/movement-social-login-sdk";




const UserProfileComponent = () => {




  // React state to set user's data return by the `getUserProfile` function


  const [userProfile, setUserProfile] = useState<UserData | null>(null);




  useEffect(() => {


  


    // Create a function to call the `getUserProfile` function


    // and handle your custom fetching logic here


    const fetchUserProfile = async () => {


      // Your custom logic before fetching the details goes here...




      // Use the `getUserProfile` method from the SDK to fetch the user details.


      // This function checks for the user with the specified email and network and


      // returns an object that contains a success status and user data or an error


      // message based on the existance of user in our database.


      const response = await getUserProfile("test@example.com", MovementNetwork.Testnet);


      


      // Your custom logic after fetching the details goes here...


      if (response.success) {




        // If the request is successful, the function will return the user data


        // Set the returned data to the react state defined above.


        setUserProfile(response.data);


      } else {


      


        // If the request fails, the function will return an error message


        // describing why the request has failed


        console.error(response.message);


      }


    };




    // Call the function on the page load to get the data of the user


    fetchUserProfile();


  }, []);




  return (


    <div>


      {userProfile && (


        <div>


          <h2>{userProfile.name}</h2>


          <p>{userProfile.email}</p>


          {/* Render other user profile data as needed */}


        </div>


      )}


    </div>


  );


};




export default UserProfileComponent;
4. Generic Transactions on Movement Networks
Copy
// Function Signature




const movementTransaction = (args: MovementTransactionFuncArgs, logEnabled?: boolean) => Promise<MovementTransactionReturn>;
This is an asynchronous function that executes a generic Movement transaction.
Parameters:
args (MovementTransactionFuncArgs)
: The arguments for the generic Movement transaction. It is an object that includes the following properties:
email (string)
: The email of the user.
network (MovementNetwork)
: The network on which the transaction will be executed. For now, only 
testnet
 is supported.
accountAddress (string)
: The wallet address of the currently signed-in user.
contractAddress (string)
: The contract address.
contractName (string)
: The contract name.
functionName (string)
: The function name.
arguments (Array)
: The arguments for the transaction. Each argument is an object that includes the following properties:
argument (string)
: The argument used by the function.
type (TransactionArgumentTypes)
: The type of the argument. It can be 
TransactionArgumentTypes.String
, 
TransactionArgumentTypes.Number
, 
TransactionArgumentTypes.ByteArray
, or 
TransactionArgumentTypes.Signature
.
usePaymaster (optional)
: Enable/disable the use of paymaster. The default is false. If you enable Paymaster, the transaction will be sponsored. Also, if the wallet doesn't exist, it will be created automatically before the transaction.
logEnabled (optional)
: Enable/disable logging. The default is true.
Return Type:
Promise<MovementTransactionReturn>:
{ success: true; data: MovementTransactionData; } if successful.
{ success: false; data: string; } if unsuccessful.
Errors:
The function can throw an error if the transaction fails. The error message is logged if logging is enabled.
Example:
Here is an example of a React component that imports and uses the 
movementTransaction
 function to perform a simple movement transaction:
TransactionComponent.tsx
Copy
import React, { useState } from "react";




// Import the `movementTransaction` function from our SDK


import { movementTransaction, MovementNetwork, MovementTransactionData } from "@lyncworld/movement-social-login-sdk";




const TransactionComponent = () => {


  // React state to set transaction response data return by the `movementTransaction` function


  const [transactionResult, setTransactionResult] = useState<MovementTransactionData | null>(null);




  // Create a function to call the `movementTransaction` function


  // and handle your custom logics here


  const executeTransaction = async () => {


    // Your custom logic before sending the transaction goes here...


    


    // Sample arguments required by the `movementTransaction` function to process a transaction


    const transactionArgs = {


      email: "user@example.com", // Email id of the sender


      network: MovementNetwork.Testnet, // Network on which the transaction will execute


      accountAddress: "0x0000", // The wallet address of the sender


      contractAddress: "0x30b16e76bbd67b41387a33de68ab489fec1ecab210c1b06413121e5da7ba839f", // Contract address of the deployed contract on the Movement network specified above


      contractName: "lync_contract", // Name of the contract


      functionName: "hit", // Name of the function to be executed


      arguments: [], // Arguments required by the function to be executed


      usePaymaster: true, // Optional. If true, the transaction fee will be sponsored by the Lync, else the transaction fee will be paid by the sender


    };




    try {


      // Use the `movementTransaction` method from the SDK to send the transaction.


      // This function will initiate and execute a transaction on the specified


      // Movement network and returns an object that contains a success status


      // and transaction result or an error message based on the success of execution of


      // the transaction.


      const response = await movementTransaction(transactionArgs);


      


      // Your custom logic after execution of the transaction goes here...


      if (response.success) {




        // If the request is successful, the function will return the transaction data


        // Set the returned data to the react state defined above.


        setTransactionResult(response.data);


      } else {


      


        // If the request fails, the function will return an error message


        // describing why the request has failed


        console.error(response.message);


      }


    } catch (error) {


    


      // Your custom error handling logic goes here...


      console.error("Error executing transaction:", error);


    }


  };




  return (


    <div>


      <button onClick={executeTransaction}>Execute Transaction</button>


      {transactionResult && (


        <div>


          <h2>Transaction Result:</h2>


          <p>Success: {transactionResult.success.toString()}</p>


          <p>Data: {JSON.stringify(transactionResult.data)}</p>


        </div>


      )}


    </div>


  );


};




export default TransactionComponent;
Previous
Using the SDK
Next
Types Used in the Methods Provided by the SDK
Last updated 
5 months ago
Types Used in the Methods Provided by the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Social Login SDK on Movement
Types Used in the Methods Provided by the SDK
Types used in the SDK's methods for managing user profiles and handling Movement transactions.
Copy
type UserData = {


  id: string;


  walletAddress: string;


  name: string;


  email: string;


  providerId: string;


  avatar: string;


};




type GetUserProfileReturn = { success: true; data: UserData } | { success: false; message: string };




type SignInWithGoogleReturn = { success: true; user: UserData } | { success: false; message: string };




type SignOutUserReturn = { success: true } | { success: false; message: string };




type MovementTransactionArguments = { argument: string; type: TransactionArgumentTypes };




type MovementTransactionFuncArgs = {


  email: string;


  accountAddress: string;


  network: MovementNetwork;


  contractAddress: string;


  contractName: string;


  functionName: string;


  arguments: Array<MovementTransactionArguments>;


  usePaymaster?: boolean;


};




type MovementTransactionData = { transactionHash: string };




type MovementTransactionReturn = { success: true; data: MovementTransactionData } | { success: false; data: string };
Previous
Example Codes in React & TypeScript
Next
Other Specification
Last updated 
6 months ago
Other Specification | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Social Login SDK on Movement
Other Specification
Latest Version: 1.0.0
GitHub License: 
UNLICENSED
GitHub Repository URL
Package URL on NpmJs
Previous
Types Used in the Methods Provided by the SDK
Next
LYNC Unity Movement SDK
Last updated 
6 months ago
LYNC Unity Movement SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating LYNC Movement SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
Transaction Flow 
Gasless Transaction
Some common bugs and their resolutions
Movement Labs
LYNC Unity Movement SDK
Previous
Other Specification
Next
Wallet Creation and Transaction APIs
Last updated 
5 months ago
LYNC Unity Movement SDK is a no-code Modular Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS) on 
Aptos Move (M2)
. 
Platform Supported:
 PC (Windows and MacOs) and Mobile (Android and iOS)

Network Supported:
 Movement Testnet and Devnet
This release includes the following:
Social Logins
Custom Transactions in Social Login
Get your API Key
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC Unity Movement SDK from 
Here
Example Project:
 ​Import the SDK .unitypackage file to your project or simply drag and drop .unitypackage file to your project.
Once the LYNC Movement SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating LYNC Movement SDK in Unity
There are 2 Example Projects present in the SDK: 
Assets/LYNC-Movement-SDK/Example/MoveExample.unity
Assets/LYNC-Movement-SDK/Example/Example 2.unity
You can find the example scene in the folders. Simply pass the API key in LyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Aptos SDK, attach LYNC Manager Prefab(Assets/LYNC-APTOS-SDK/LYNC Manager.prefab) on the starting scene.
This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose Network -> Testnet / Mainnet
Sponsor Transactions -> If you want to sponsor transactions for users (Please contact 
LYNC
 to setup Paymaster)
Pass a deep link name (example: lyncmovement/gameName etc.)
Integrating Login or Transaction Layer via LYNC Aptos SDK in Unity
The Sample Code for Login can be found at APTOSExample.cs.
Make sure to Import LYNC.
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            OnWalletConnected(wallet);


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


        


    }
To Check if the user is logged in or not:
Copy
using LYNC;




private AuthBase authBase;




    authBase = await AuthBase.LoadSavedAuth();


        if (authBase.WalletConnected)


        {


            // User is Already Login


            OnWalletConnected(authBase);


        }


        else{


             // Ask user to login


        }
On Wallet Connected (TypeOfLoginMethod)
Copy
//To OnWalletConnected(TypeOfLoginMethod):


        


        private void OnWalletConnected(AuthBase _authBase)


        {


            if (AuthBase.AuthType == AUTH_TYPE.FIREBASE)


            {


                Populate(_authBase as FirebaseAuth);


            }


        }


        




        public void Populate(FirebaseAuth firebaseAuth = null)


        {


            WalletAddressText.text = (firebaseAuth == null ? "Disconnected" : AbbreviateWalletAddressHex(firebaseAuth.AptosFirebaseAuthData.publicKey));


            balance.text = (firebaseAuth == null ? "0" : firebaseAuth.AptosFirebaseAuthData.balance) + " APT";


        }
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout();
Transaction Flow 
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee.
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction.
Gasless Transaction
To Enable Gasless Transactions or to Sponsor Transactions for your users, 
Set Sponsor Transactions as true, and 
contact LYNC team to setup your paymaster
To do transactions, MoveExample.cs can be taken as a reference.
Pass in the Contract Address, Contract Name, Function Name and Network.
Arguments are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
Copy
LyncManager.Instance.TransactionsManager.SendTransaction(Transaction);
You can create a public Transaction Object, pass in the parameters and hit the function call where you want to do the transactions
Copy
public Transaction mintTxn;




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(mintTxn);




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


Or you can create a Transaction Object
Copy
public Transaction mintTxn;




//LyncManager.Instance.TransactionsManager.SendTransaction( new Transaction(ContractAddress, ContractName, FunctionName,ListOfArguments));




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(


new Transaction("0x55db3f109405348dd4ce271dc92a39a6e1cbc3d78cf71f6bf128b1c8a9dfac33","tst_unity","set_data_bytes",arguments));




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


List of Arguments: 
Copy
//List<TransactionArgument>{


//    new TransactionArgument{ argument = value, type = ARGUMENT_TYPE.STRING }


//};




List<TransactionArgument> arguments = new List<TransactionArgument>{


    new TransactionArgument{ argument = "0xb66b180422a4886dac85b8f68cc42ec1c6bafc824e196d437fdfd176192c25fccfc10e47777699420eec0c54a0176861a353a43dd45b338385e1b975709f2000", type = ARGUMENT_TYPE.STRING }


};
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key
Sponsor Transactions
Transaction Object
Add newtonsoft Json
Wallet Creation and Transaction APIs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Key Highlights
Why These APIs Are Important
How These APIs Help Developers Streamline Blockchain Interactions
Movement Labs
Wallet Creation and Transaction APIs
This documentation aims to provide all the necessary information for developers to successfully integrate Movement blockchain features into their applications. By offering detailed explanations, practical examples, and best practices, it ensures developers can confidently implement wallet creation, NFT minting, and transaction functionalities in a secure and efficient manner.
These API provides endpoints for managing wallets and facilitating transactions on the Movement blockchain. It includes routes for creating and retrieving wallets, minting NFTs, and executing generic transactions. These APIs are designed for developers who need to interact programmatically with the Movement blockchain, enabling a wide range of blockchain-based applications such as dApps, financial services, and NFT marketplaces.
Key Highlights
Wallet Management
: The page begins with wallet management APIs, outlining the steps to create new wallets or retrieve existing wallets. It emphasizes the importance of securely handling private keys and demonstrates how to manage wallet operations programmatically.
Transaction Management
: The next section focuses on transaction management, including minting NFTs and sending generic transactions. These routes allow developers to perform complex blockchain operations with ease. The documentation provides detailed examples of how to format requests for different transaction types, making it easy for developers to get started.
Error Handling
: Each route includes a section on possible errors and their meanings, helping developers understand common pitfalls and troubleshoot issues effectively.
Security Considerations
: The documentation emphasizes security best practices, such as using HTTPS for all requests and securely storing private keys, which are essential for protecting users’ assets on the blockchain.
Use Cases and Examples
: Throughout the page, practical examples are provided to illustrate common use cases, such as creating a new user wallet, minting NFTs for digital art, or sending tokens for in-app purchases. These examples help developers visualize how the APIs can be integrated into real-world applications.
Developer-Friendly Format
: The page is designed to be developer-friendly, with clear formatting, example code snippets, and straightforward explanations. This format makes it easy for developers of all experience levels to understand and implement the APIs.
Comprehensive Reference
: Serving as a one-stop reference, the page covers all aspects of wallet and transaction management on the Movement blockchain. It ensures developers have all the information they need to build and maintain blockchain-based applications efficiently.
Why These APIs Are Important
Simplified Blockchain Interactions
: The APIs abstract the complexities of blockchain interactions, such as wallet management, transaction signing, and broadcasting. Developers do not need to understand the low-level details of blockchain protocols, which significantly reduces the time and effort required to integrate blockchain functionality.
Enhanced Security
: By providing secure endpoints for wallet creation and transaction management, the APIs help developers implement best security practices without the need to design and build these features from scratch. This reduces the risk of vulnerabilities and ensures that sensitive data, such as private keys, is handled securely.
Faster Development Cycle
: The APIs allow developers to quickly build and deploy blockchain applications by providing ready-to-use functionalities like wallet creation, NFT minting, and transaction processing. This accelerates the development process and helps teams bring their products to market faster.
Standardization and Consistency
: Using a well-defined set of APIs ensures that all blockchain operations follow a standardized format. This consistency simplifies debugging, maintenance, and upgrades, making it easier for developers to work in teams or hand off projects.
Focus on Core Functionality
: With these APIs handling the core blockchain interactions, developers can focus on building the unique features and user experiences that differentiate their applications. This leads to higher-quality applications and a better user experience.
Scalability and Flexibility
: The APIs are designed to handle various use cases, from simple wallet management to complex transactions involving smart contracts and NFTs. This flexibility enables developers to scale their applications efficiently as their needs grow or change.
How These APIs Help Developers Streamline Blockchain Interactions
Unified Interface
: The APIs provide a unified interface for interacting with the Movement blockchain. This reduces the need to work with multiple tools or libraries, allowing developers to perform all necessary actions from a single point of contact.
Reduced Complexity
: By abstracting the underlying blockchain operations, the APIs reduce the complexity involved in implementing blockchain features. Developers can perform tasks like wallet creation, transaction signing, and minting NFTs without needing deep knowledge of cryptography, consensus algorithms, or blockchain architecture.
Error Handling and Validation
: The APIs include built-in error handling and validation, which helps developers avoid common mistakes and ensures that only valid transactions are processed. This improves reliability and reduces the time spent troubleshooting and debugging.
Improved Interoperability
: These APIs are designed to be easily integrated with existing systems and frameworks. This interoperability allows developers to quickly add blockchain capabilities to their applications, whether they are building a new dApp or enhancing an existing web or mobile app.
Extensive Documentation and Support
: The comprehensive documentation provides clear instructions, example code, and best practices for using the APIs effectively. This support helps developers get up to speed quickly, reducing the learning curve associated with blockchain development.
Optimized for Performance
: The APIs are optimized for performance, ensuring that blockchain operations such as wallet creation and transaction processing are handled efficiently. This reduces latency and enhances the overall performance of applications, providing a seamless experience for end users.
By leveraging these APIs, developers can streamline their blockchain interactions, reduce development time, and focus on building innovative applications. The APIs provide a robust, secure, and scalable foundation for any project requiring blockchain capabilities, enabling developers to harness the full potential of the Movement blockchain with ease.
Previous
LYNC Unity Movement SDK
Next
Pre-requisites
Last updated 
5 months ago
Pre-requisites | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Pre-requisites
To integrate Lync's wallet creation and transaction APIs into your application, you need to have the following things ready with you -
API key from the LYNC Dashboard (
Generate your API key here
).
X_API_KEY (Shared by the LYNC team) 
Once you have the above keys with you, you can start the integration of APIs in your project.
Previous
Wallet Creation and Transaction APIs
Next
Integration
Last updated 
2 months ago
Integration | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Integration
In this Section, you will learn about the integration of the APIs provided by LYNC for creating an on-chain wallet on Movement and performing blockchain transactions on the Movement blockchain network.
Our wallet creation and transaction APIs provide a simple yet powerful way to interact with blockchain by providing simple API endpoints that you can integrate into your application and get access to blockchain interactions without worrying about the other complexities of blockchain.
This section explores the following functionalities that Lync provides through its APIs for users:
API overview
Creating a new wallet
Get already created wallet
Mint NFT transactions
In the upcoming sections, we will learn about all the above API functionalities in detail.
Previous
Pre-requisites
Next
API Overview
Last updated 
2 months ago
API Overview | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Integration
API Overview
Here's a basic overview of the API endpoints provided by Lync for wallet creation and transactions on the Movement blockchain network.
These APIs enables the management of wallets by providing endpoints for creating new wallets and retrieving existing ones. Each wallet is associated with a unique address and private key. These APIs also facilitate the minting of NFT transactions and any generic transactions on the Movement blockchain network. You can easily integrate mint NFT transactions and any generic transactions on Movement using our APIs.
BASE_URL - 
https://server-aptos-sdk.lync.world/api-movement
Routes -
To create a new wallet
 - {{ BASE_URL }}/generate_wallet/create_wallet
To get already created wallet
 - {{ BASE_URL }}/generate_wallet/get_wallet
Mint NFT transactions
 - {{ BASE_URL }}/generate_wallet/mint_nft
In the upcoming sections, we will learn about the usage of all the above API endpoints individually.
Note -
Ensure to replace 
{{ BASE_URL }}
 with the actual base URL: 
https://server-aptos-sdk.lync.world/api-movement
.
Always use secure storage practices for private keys, as they are essential for managing wallet access.
Previous
Integration
Next
Create a new wallet
Last updated 
5 months ago
Create a new wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Integration
Create a new wallet
Create a new wallet
POST
 
/generate_wallet/create_wallet
This endpoint generates a new wallet for the user. Upon creation, a new wallet address and private key are generated. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation and it will return a newly created wallet's details, including the wallet address and private key. It's recommended to securely store the private key since it is required to access and manage the wallet.
Headers
Name
Value
Content-Type
application/json
x_api_key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shivam.purohit@live.in)
apiKey
string
Your api key generated from official website of Lync
network
number
5
Response
200
201
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "Account data fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": true,


  "status": 201,


  "message": "Account Created On Chain Successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


    "apiKey": "<Your api key generated from official website of Lync>",


    "network": "<1 or 2 (1 for Mainnet & 2 for Testnet)>",


    "email": "<user email id>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Internal server error"


}
Previous
API Overview
Next
Get already created wallet
Last updated 
5 months ago
Get already created wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Integration
Get already created wallet
Get already created wallet
POST
 
/generate_wallet/get_wallet
This endpoint allows the retrieval of an existing wallet using the email ID of the user and the network on which the account exists. When a wallet is created using the 
create API
, it is associated with an email address that can be used to retrieve the wallet details, including the wallet address and private key. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation.
Headers
Name
Value
Content-Type
application/json
x-api-key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shivam.purohit@live.in)
apiKey
string
Your api key generated from official website of Lync
network
number
5
Response
200
400
404
500
Copy
{


  "success": true,


  "status": 200,


  "message": "User profile fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "email": "<user email id>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 404,


  "message": "No user registered"


}
Copy
{


  "success": false,


  "status": 400,


  "message": "Internal server error"


}
Previous
Create a new wallet
Next
Mint NFT transactions
Last updated 
5 months ago
Mint NFT transactions | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
Wallet Creation and Transaction APIs
Integration
Mint NFT transactions
Mint NFT transactions
POST
 
/generate_wallet/mint_nft
This endpoint facilitates the minting of a new Non-Fungible Token (NFT) on the Movement blockchain. Users can mint a new NFT by specifying some contract information, such as the contract address, contract name, function name, arguments, and other properties. This endpoint requires api key authentication and the necessary transaction parameters, including the wallet address initiating the minting process.
Headers
Name
Value
Content-Type
application/json
x-api-key
Your_X_API_Key
Body
Name
Type
Description
contractAddress
string
Contract address
contractName
string
Name of contract
functionName
string
Function you want to do mint transaction on
privateAddress
string
User's private key
publicAddress
string
User's account address
arguments
Array of objects
Object of  
{ argument: string, type: number }
 If the function accepts any arguments
network
number
5
usePaymaster
boolean
true
 to sponsor the transaction or 
false
 if user pays for the transaction
apiKey
string
Your api key generated from official website of Lync
Response
200
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "success",


  "data": {


    "transactionHash": "<transaction hash of successfull mint transaction>",


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Something went wrong",


  "errorMessage": "<specific error message from server>"


}
Example Request Body
Copy
{


  "network": 5,


  "contractName": "LyncCards",


  "contractAddress": "0xd170636f5bd6c77dc1ae86dea1a3cc9d45926765b8240b7c4503c684a301fa82",


  "functionName": "mint_nft",


  "privateAddress": "0x90bd883b359961954c59ee6a273e5f3165e606ce14fe27183aa61214d4fd8cfc",


  "publicAddress": "0x758b7dba6b61226ea919480edd0e8e20624a1318593f1cb663be8968f6e6e081", 


  "arguments": [


    {


      "argument": "1",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    },


    {


      "argument": "2",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    }


  ],


  "usePaymaster": true, 


  "apiKey": "B30D905974544D082BFEA8A727534195",


}
Previous
Get already created wallet
Next
LYNC Paymaster - Supporting Movement
Last updated 
5 months ago
LYNC Paymaster - Supporting Movement | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Missing LYNC between Dapps and Users
Key challenges include:
LYNCing dApps to Users: Bridging the Gap with Paymaster
Who should LYNC ?
LYNC for Users
Movement Labs
LYNC Paymaster - Supporting Movement
Unlock user engagement and drive adoption with LYNC's gasless transactions, incentivizing users, enhancing their experience, and integrating seamlessly with your game, dApp, or DeFi platform.
Missing LYNC between Dapps and Users
In the rapidly evolving world of blockchain technology, user onboarding and transaction experiences remain significant hurdles for widespread adoption. Decentralized Applications (DApps) often present complexities that can deter potential users, particularly those unfamiliar with blockchain mechanics. 
Key challenges include:
Mandatory Wallet Balance for Gas Fees:
 Users need APT tokens to cover gas fees, which requires buying tokens, completing KYC procedures, and transferring from exchanges to wallets. This multi-step process can be cumbersome and discouraging, especially for those new to Web3.
Protracted Onboarding Process: 
New users encounter a lengthy process involving KYC, buying crypto, setting up wallets, and connecting to DApps. This process can take days, causing potential users to abandon the application before they even start.
Technical Proficiency Requirements:
 Engaging with blockchain applications often requires understanding complex technical details, such as using wallets like Pontem and Petra, signing transactions, and managing gas fees, which can be challenging for users.
Volatile and High Gas Fees: 
The fluctuating nature of gas fees can significantly impact the user experience. High fees during network congestion can deter users from engaging with DApps, while the unpredictability adds to the overall frustration.
LYNCing dApps to Users: Bridging the Gap with Paymaster
What is the LYNC Paymaster ?
LYNC Paymaster is designed to address these challenges head-on, streamlining the user experience and enhancing the onboarding process for dApp built on the Aptos blockchain. By integrating the LYNC Paymaster, developers can offer a more intuitive and seamless experience for their users. Key features include:
Sponsored Transactions:
 LYNC Paymaster allows dApp to sponsor transactions for their end-users, eliminating the need for users to maintain a minimum of APT token balance for gas fees. This removes a significant barrier to entry, enabling users to interact with the application without the hassle of acquiring and managing cryptocurrencies.
Simplified Onboarding:
 By sponsoring transactions, LYNC Paymaster reduces the onboarding friction. Users can start engaging with dApp immediately, bypassing the lengthy process of KYC, purchasing tokens, and wallet setup. This leads to higher conversion rates and improved user retention.
User-Friendly Integration:
 LYNC Paymaster abstracts the technical complexities involved in blockchain interactions. Users no longer need to understand or manage gas fees, sign transactions manually, or adjust RPC settings. This makes the application accessible to a broader audience, including non-crypto-savvy users.
Stable Transaction Costs:
 By sponsoring gas fees, LYNC Paymaster shields users from the volatility of transaction costs. This ensures a consistent and predictable user experience, encouraging more frequent interactions with the dApp.
Enhanced Transaction Reliability:
 LYNC Paymaster optimizes the transaction process, reducing the likelihood of pending or failed transactions. Users can enjoy a smoother and more reliable interaction with the application, fostering trust and satisfaction.
Who should LYNC ?
LYNC Paymaster benefits developers and Web3 projects by simplifying user onboarding and boosting retention. By sponsoring transactions, it creates a smoother user experience, encouraging ongoing engagement. Developers can also leverage subscription models or premium features with sponsored transactions, opening new revenue streams. This competitive edge attracts users seeking hassle-free blockchain experiences, expanding the user base and driving broader adoption.
Here are the benefits for different industries:
Gaming:
Seamless Gameplay: 
Game developers can sponsor transactions for in-game activities such as basic gameplay, deposits, and withdrawals, removing friction for players.
Enhanced Engagement: 
By eliminating gas fees, players can enjoy a more immersive experience, leading to increased engagement and retention.
Micro transactions:
 Enables cost-effective micro transactions, enhancing the in-game economy and allowing for new monetization strategies.
Decentralized Application (dApp)
Simplified Onboarding: 
By sponsoring transactions, LYNC Paymaster removes the need for users to manage APT token balances and navigate complex blockchain interactions, making onboarding smoother.
Increased Adoption: 
Easier access to dApps encourages more users to try and use the applications, driving adoption.
Enhanced User Retention: 
A frictionless experience helps retain users by removing barriers and improving overall satisfaction.
 
Social Media:
Lower Onboarding Hurdles: 
Social platforms like forums or networks can sponsor transactions for posting, commenting, and other basic actions, reducing barriers to entry.
Increased Participation:
 By making it easier for users to interact without worrying about gas fees, platforms can foster a more active and engaged community.
User-Generated Content:
 Encourages more user-generated content and interactions, enhancing the overall value and vibrancy of the platform.
Marketplaces:
Reduced Barriers:
 Transaction sponsorship can lower the barriers for users browsing listings, placing bids, or making purchases on decentralized marketplaces.
Enhanced User Experience:
 Users can interact with the marketplace seamlessly, without needing to manage crypto wallets or gas fees.
Increased Sales: 
Facilitates smoother transactions, potentially increasing sales and user satisfaction.
LYNC Paymaster offers a transformative approach to transaction management and user onboarding across various industries. By sponsoring transactions, LYNC Paymaster removes the need for users to maintain an APT token balance and manage complex blockchain interactions, making it easier for them to engage with decentralized applications dApp).
LYNC for Users
No Fee:
 Enjoy transactions without costs through LYNC Paymaster's sponsored plans.
Easy Access: 
Explore and use DApps without financial barriers.
Flexible Subscriptions:
 Choose affordable plans for predictable costs.
Simplified Entry:
 Start using blockchain services without managing wallets or gas fees.
Exclusive Benefits:
 Get seamless, fee-free access via whitelist inclusion.
Previous
Mint NFT transactions
Next
How to Register on LYNC Dashboard
Last updated 
6 months ago
How to Register on LYNC Dashboard | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Introduction
Let’s Get Started
Create a new project
Get your API Key
Movement Labs
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
Setting up the paymaster is quick and takes under 5 minutes. LYNC Paymaster is fully no-code, allowing developers to integrate with just a few clicks.
Previous
LYNC Paymaster - Supporting Movement
Next
How to Create Paymaster
Last updated 
2 months ago
Introduction
To begin using the paymaster and sponsoring transactions, you need to register an account on LYNC Dashboard. The registration process is straightforward and only requires connecting with your email.
Let’s Get Started
Navigate to 
LYNC Dashboard
. You can proceed by choosing to continue with Email, Google, or GitHub.
After Successful Login, the user will be redirected directly to the Dashboard Home Page.
Create a new project
The developer can create a new project just by following these steps:
On the Home page, click on “Create New Project” and a pop-up will open.
Enter your Project Name and Description.
Select Platform and Category from the dropdown
In Chain, choose Move
Click “Next” to register your dApp.
Get your API Key
After creating the project, an API Key will be generated. Copy this value, as you will need it to integrate the LYNC SDK (Paymaster) into your project, whether it's a game, dApp, DeFi application, or more.
LYNC Dashboard login
API Key from LYNC Dashboard
How to Create Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Paymaster - Supporting Movement
How to Create Paymaster
Paymaster is only supported on Movement Porto testnet for now.
Previous
How to Register on LYNC Dashboard
Next
How to Fund the Paymaster
Last updated 
2 months ago
Once the Project is created, you need to create a Paymaster and register your smart contracts. You will need your deployed smart contract's address.
After Project registration, click “Paymaster” on the Project page.
Create a Paymaster on Movement Porto Testnet
Once done, the Paymaster can be funded by Petra Wallet, Pontem Wallet or Exchanges.
You can copy the Paymaster Address and fund or view it on chain on 
Movement Explorer.
Paymaster Section
How to Fund the Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Paymaster - Supporting Movement
How to Fund the Paymaster
The paymaster can be funded from any wallet supporting Movement like Petra or Pontem and exchanges.
Previous
How to Create Paymaster
Next
Module & Function Whitelist
Last updated 
2 months ago
Once the Paymaster is created, To use the paymaster and sponsoring transactions, you need to fund Paymaster.
To fund the paymaster, copy the Paymaster address using copy button.
Open any wallet which have APT token 
(Using Pontem Wallet)
Click on send and transfer APT to Paymaster Address
Once done, you can see the balance update on the dashboard
Copy Paymaster Address
Pontem Wallet
Send funds to paymaster
Module & Function Whitelist | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Paymaster - Supporting Movement
Module & Function Whitelist
Projects can whitelsit module & function to support sponsor transactions for the users
Previous
How to Fund the Paymaster
Next
How to Integrate Paymaster
Last updated 
2 months ago
To begin using the paymaster and sponsoring transactions, you need to whitelist the Module and Function you want to sponsor the users for, Once the Paymaster is created.
Click on the “Add Contracts” button, it will open a new page. 
Click on "Add New Contract"
Enter the contract address, and it will fetch the write methods.
You can whitelist those methods which you want paymaster to sponsor the transactions for.
Once done, you can see the list of all the contracts with Module & Function Whitelist
Paymaster details
Module & Function Whitelist
List of contracts
How to Integrate Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Movement Labs
LYNC Paymaster - Supporting Movement
How to Integrate Paymaster
JavaScript/ TypeScript
Previous
Module & Function Whitelist
Next
JavaScript/ TypeScript
JavaScript/ TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Install the SDK
Import the dependencies
Get API Keys from LYNC Dashboard
The performPaymasterTransaction function
Using the performPaymasterTransaction function
Movement Labs
LYNC Paymaster - Supporting Movement
How to Integrate Paymaster
JavaScript/ TypeScript
Easily integrate in your JS/TS application using the sdk.
LYNC Paymaster SDK supporting movement on 
npmjs
: 
https://www.npmjs.com/package/lync-paymaster-movement-sdk
Install the SDK
Copy
npm install lync-paymaster-movement-sdk --save
Import the dependencies
Copy
import { performPaymasterTransaction } from "lync-paymaster-movement-sdk";


import { Network } from "@aptos-labs/ts-sdk";
Get API Keys from 
LYNC Dashboard
Copy
// From LYNC Dashboard


const apiKey = "LYNC API KEY Dashboard";




// Get this from LYNC


const lyncAuthKey = "Get this from LYNC Support";
The 
performPaymasterTransaction
 function
Copy
import { 


  CommittedTransactionResponse, 


  InputEntryFunctionData, 


  Network 


} from "@aptos-labs/ts-sdk";




/**


 * The data returned from a paymaster transaction.


 * @param {CommittedTransactionResponse} receipt - The transaction receipt.


 * @param {CommittedTransactionResponse} accountCreationReceipt - The account creation receipt.


 * @param {string} privateKey - The private key for the account.


 */


interface PaymasterTransactionReturnData {


  receipt: CommittedTransactionResponse;


  accountCreationReceipt: CommittedTransactionResponse;


  privateKey: string;


}




/**


 * The account information.


 * @param {string} privateKey - The private key for the account.


 * @param {string} accountAddress - The account address.


 */


interface AccountInfo {


  privateKey: string;


  accountAddress: string;


}




/**


 * Performs a paymaster transaction using the LYNC paymaster API.


 *


 * @param {string} lyncAuthKey - The LYNC API key for authentication.


 * @param {Network} network - The network to perform the transaction on. Should be CUSTOM for movement networks.


 * @param {string} apiKey - The LYNC API key for authentication.


 * @param {InputEntryFunctionData} inputTransaction - The input data for the transaction.


 * @param {boolean} showLogs - Whether to show logs or not.


 * @param {"porto" | "suzuka"} movementNetwork - The movement network to use(optional). Required if network is CUSTOM.


 * @param {AccountInfo} accountData - The account data(privateKey and accountAddress) for the transaction(optional). If not provided, a new account will be generated.


 * @returns {Promise<PaymasterTransactionReturnData>} The data returned from a paymaster transaction.


 */


async function performPaymasterTransaction(


  lyncAuthKey: string,


  network: Network,


  apiKey: string,


  inputTransaction: InputEntryFunctionData,


  showLogs: boolean,


  movementNetwork?: "porto" | "suzuka",


  accountData?: AccountInfo,


): Promise<PaymasterTransactionReturnData> ;




Using the 
performPaymasterTransaction
 function
Copy
const accountData = {


  privateKey: "0x....",


  accountAddress: "0x...."


};




const data = await performPaymasterTransaction(


  lyncAuthKey,


  Network.CUSTOM, // For movement networks


  apiKey,


  {


    function: "0x1::aptos_account::transfer", // entry function


    functionArguments: [


      "0x587f66c999fed81c8872c5ddabed1e7049c790d750d2a796313a32702dcff962", // to address


      "100000000" // 1 APT = 100000000


    ]


  },


  false, // show logs or not


  "porto", // For porto movement testnet


  accountData // optional - will generate a new account if not provided


);




console.log(data);


Previous
How to Integrate Paymaster
Next
LYNC Paymaster - Supporting Supra L1
Last updated 
2 months ago
LYNC Paymaster - Supporting Supra L1 | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Missing LYNC between Dapps and Users
Key challenges include:
LYNCing dApps to Users: Bridging the Gap with Paymaster
Who should LYNC ?
LYNC for Users
Supra
LYNC Paymaster - Supporting Supra L1
Unlock user engagement and drive adoption with LYNC's gasless transactions, incentivizing users, enhancing their experience, and integrating seamlessly with your game, dApp, or DeFi platform.
Missing LYNC between Dapps and Users
In the rapidly evolving world of blockchain technology, user onboarding and transaction experiences remain significant hurdles for widespread adoption. Decentralized Applications (DApps) often present complexities that can deter potential users, particularly those unfamiliar with blockchain mechanics. 
Key challenges include:
Mandatory Wallet Balance for Gas Fees:
 Users need APT tokens to cover gas fees, which requires buying tokens, completing KYC procedures, and transferring from exchanges to wallets. This multi-step process can be cumbersome and discouraging, especially for those new to Web3.
Protracted Onboarding Process: 
New users encounter a lengthy process involving KYC, buying crypto, setting up wallets, and connecting to DApps. This process can take days, causing potential users to abandon the application before they even start.
Technical Proficiency Requirements:
 Engaging with blockchain applications often requires understanding complex technical details, such as using wallets like Pontem and Petra, signing transactions, and managing gas fees, which can be challenging for users.
Volatile and High Gas Fees: 
The fluctuating nature of gas fees can significantly impact the user experience. High fees during network congestion can deter users from engaging with DApps, while the unpredictability adds to the overall frustration.
LYNCing dApps to Users: Bridging the Gap with Paymaster
What is the LYNC Paymaster ?
LYNC Paymaster is designed to address these challenges head-on, streamlining the user experience and enhancing the onboarding process for dApp built on the Aptos blockchain. By integrating the LYNC Paymaster, developers can offer a more intuitive and seamless experience for their users. Key features include:
Sponsored Transactions:
 LYNC Paymaster allows dApp to sponsor transactions for their end-users, eliminating the need for users to maintain a minimum of APT token balance for gas fees. This removes a significant barrier to entry, enabling users to interact with the application without the hassle of acquiring and managing cryptocurrencies.
Simplified Onboarding:
 By sponsoring transactions, LYNC Paymaster reduces the onboarding friction. Users can start engaging with dApp immediately, bypassing the lengthy process of KYC, purchasing tokens, and wallet setup. This leads to higher conversion rates and improved user retention.
User-Friendly Integration:
 LYNC Paymaster abstracts the technical complexities involved in blockchain interactions. Users no longer need to understand or manage gas fees, sign transactions manually, or adjust RPC settings. This makes the application accessible to a broader audience, including non-crypto-savvy users.
Stable Transaction Costs:
 By sponsoring gas fees, LYNC Paymaster shields users from the volatility of transaction costs. This ensures a consistent and predictable user experience, encouraging more frequent interactions with the dApp.
Enhanced Transaction Reliability:
 LYNC Paymaster optimizes the transaction process, reducing the likelihood of pending or failed transactions. Users can enjoy a smoother and more reliable interaction with the application, fostering trust and satisfaction.
Who should LYNC ?
LYNC Paymaster benefits developers and Web3 projects by simplifying user onboarding and boosting retention. By sponsoring transactions, it creates a smoother user experience, encouraging ongoing engagement. Developers can also leverage subscription models or premium features with sponsored transactions, opening new revenue streams. This competitive edge attracts users seeking hassle-free blockchain experiences, expanding the user base and driving broader adoption.
Here are the benefits for different industries:
Gaming:
Seamless Gameplay: 
Game developers can sponsor transactions for in-game activities such as basic gameplay, deposits, and withdrawals, removing friction for players.
Enhanced Engagement: 
By eliminating gas fees, players can enjoy a more immersive experience, leading to increased engagement and retention.
Micro transactions:
 Enables cost-effective micro transactions, enhancing the in-game economy and allowing for new monetization strategies.
Decentralized Application (dApp)
Simplified Onboarding: 
By sponsoring transactions, LYNC Paymaster removes the need for users to manage APT token balances and navigate complex blockchain interactions, making onboarding smoother.
Increased Adoption: 
Easier access to dApps encourages more users to try and use the applications, driving adoption.
Enhanced User Retention: 
A frictionless experience helps retain users by removing barriers and improving overall satisfaction.
 
Social Media:
Lower Onboarding Hurdles: 
Social platforms like forums or networks can sponsor transactions for posting, commenting, and other basic actions, reducing barriers to entry.
Increased Participation:
 By making it easier for users to interact without worrying about gas fees, platforms can foster a more active and engaged community.
User-Generated Content:
 Encourages more user-generated content and interactions, enhancing the overall value and vibrancy of the platform.
Marketplaces:
Reduced Barriers:
 Transaction sponsorship can lower the barriers for users browsing listings, placing bids, or making purchases on decentralized marketplaces.
Enhanced User Experience:
 Users can interact with the marketplace seamlessly, without needing to manage crypto wallets or gas fees.
Increased Sales: 
Facilitates smoother transactions, potentially increasing sales and user satisfaction.
LYNC Paymaster offers a transformative approach to transaction management and user onboarding across various industries. By sponsoring transactions, LYNC Paymaster removes the need for users to maintain an APT token balance and manage complex blockchain interactions, making it easier for them to engage with decentralized applications dApp).
LYNC for Users
No Fee:
 Enjoy transactions without costs through LYNC Paymaster's sponsored plans.
Easy Access: 
Explore and use DApps without financial barriers.
Flexible Subscriptions:
 Choose affordable plans for predictable costs.
Simplified Entry:
 Start using blockchain services without managing wallets or gas fees.
Exclusive Benefits:
 Get seamless, fee-free access via whitelist inclusion.
Previous
JavaScript/ TypeScript
Next
How to Register on LYNC Dashboard
Last updated 
6 months ago
How to Register on LYNC Dashboard | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Introduction
Let’s Get Started
Create a new project
Get your API Key
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
Setting up the paymaster is quick and takes under 5 minutes. LYNC Paymaster is fully no-code, allowing developers to integrate with just a few clicks.
Previous
LYNC Paymaster - Supporting Supra L1
Next
How to Create Paymaster
Last updated 
2 months ago
Introduction
To begin using the paymaster and sponsoring transactions, you need to register an account on LYNC Dashboard. The registration process is straightforward and only requires connecting with your email.
Let’s Get Started
Navigate to 
LYNC Dashboard
. You can proceed by choosing to continue with Email, Google, or GitHub.
After Successful Login, the user will be redirected directly to the Dashboard Home Page.
Create a new project
The developer can create a new project just by following these steps:
On the Home page, click on “Create New Project” and a pop-up will open.
Enter your Project Name and Description.
Select Platform and Category from the dropdown
In Chain, choose Move
Click “Next” to register your dApp.
Get your API Key
After creating the project, an API Key will be generated. Copy this value, as you will need it to integrate the LYNC SDK (Paymaster) into your project, whether it's a game, dApp, DeFi application, or more.
LYNC Dashboard login
API Key from LYNC Dashboard
How to Create Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Supra
LYNC Paymaster - Supporting Supra L1
How to Create Paymaster
Paymaster is supported on both Supra Mainnet and Supra Testnet.
Previous
How to Register on LYNC Dashboard
Next
How to Fund the Paymaster
Last updated 
1 month ago
Once the Project is created, you need to create a Paymaster and register your smart contracts. You will need your deployed smart contract's address.
After Project registration, click “Paymaster” on the Project page.
Create a Paymaster on Supra Testnet
Once done, the Paymaster can be funded by StarKey Wallet or Exchanges.
You can copy the Paymaster Address and fund or view it on chain on 
SupraScan
.
Paymaster Section
How to Fund the Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Supra
LYNC Paymaster - Supporting Supra L1
How to Fund the Paymaster
The paymaster can be funded from any wallet supporting Supra like StarKey wallet and exchanges.
Previous
How to Create Paymaster
Next
Module & Function Whitelist
Last updated 
1 month ago
Once the Paymaster is created, To use the paymaster and sponsoring transactions, you need to fund Paymaster.
To fund the paymaster, copy the Paymaster address using copy button.
Open any wallet which have APT token 
(Using Pontem Wallet)
Click on send and transfer APT to Paymaster Address
Once done, you can see the balance update on the dashboard
Copy Paymaster  Address
Pontem Wallet
Send funds to paymaster
Module & Function Whitelist | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Supra
LYNC Paymaster - Supporting Supra L1
Module & Function Whitelist
Projects can whitelsit module & function to support sponsor transactions for the users
Previous
How to Fund the Paymaster
Next
How to Integrate Paymaster
Last updated 
1 month ago
To begin using the paymaster and sponsoring transactions, you need to whitelist the Module and Function you want to sponsor the users for, Once the Paymaster is created.
Click on the “Add Contracts” button, it will open a new page. 
Click on "Add New Contract"
Enter the contract address, and it will fetch the write methods.
You can whitelist those methods which you want paymaster to sponsor the transactions for.
Once done, you can see the list of all the contracts with Module & Function Whitelist
Paymaster details
Module & Function Whitelist
List of contracts
How to Integrate Paymaster | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Supra
LYNC Paymaster - Supporting Supra L1
How to Integrate Paymaster
JavaScript/ TypeScript
Previous
Module & Function Whitelist
Next
JavaScript/ TypeScript
JavaScript/ TypeScript | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Install the SDK
Import the dependencies
Get API Keys from LYNC Dashboard
The performPaymasterTransaction function
Using the performPaymasterTransaction function
Supra
LYNC Paymaster - Supporting Supra L1
How to Integrate Paymaster
JavaScript/ TypeScript
Easily integrate in your JS/TS application using the sdk.
LYNC Paymaster SDK supporting supra on 
npmjs
:  
https://www.npmjs.com/package/lync-paymaster-supra-sdk
Install the SDK
Copy
npm install lync-paymaster-supra-sdk --save
Import the dependencies
Copy
import { performPaymasterTransaction } from "lync-paymaster-supra-sdk";


import { BCS } from "supra-l1-sdk";
Get API Keys from 
LYNC Dashboard
Copy
// From LYNC Dashboard


const apiKey = "LYNC API KEY Dashboard";




// Get this from LYNC


const lyncAuthKey = "Get this from LYNC Support";
The 
performPaymasterTransaction
 function
Copy
import {


  TxnBuilderTypes,


  TransactionResponse


} from "supra-l1-sdk";




interface PaymasterTransactionReturnData {


  receipt: TransactionResponse;


  accountCreationReceipt: TransactionResponse;


  privateKey: string;


}




/**


 * The account information.


 * @param {string} privateKey - The private key for the account.


 * @param {string} accountAddress - The account address.


 */


interface AccountInfo {


  privateKey: string;


  accountAddress: string;


}




function performPaymasterTransaction(


  lyncAuthKey: string,


  supraNetwork: "testnet_supra" | "mainnet_supra",


  apiKey: string,


  inputTransaction: {


    entryFnStr: `0x${string}::${string}::${string}`;


    entryFnTypeArgs?: TxnBuilderTypes.TypeTag[];


    entryFnArgs: Uint8Array[];


  },


  showLogs: boolean,


  accountData?: AccountInfo,


): Promise<PaymasterTransactionReturnData>;




Using the 
performPaymasterTransaction
 function
Copy
const accountData = {


  privateKey: "0x....",


  accountAddress: "0x...."


};




const data = await performPaymasterTransaction(


  lyncAuthKey,


  "testnet_supra", // "testnet_supra" or "mainnet_supra",


  apiKey,


   {


      entryFnStr:


        "0x1b89ab160c9ec18b5ee37f6d2774b5e8a9433c620a98bad062b6b738bd829316::tst_unity::set_data_num_u32",


      entryFnArgs: [BCS.bcsSerializeU32(10)],


  },


  false, // show logs or not


  accountData // optional - will generate a new account if not provided


);




console.log(data);


Previous
How to Integrate Paymaster
Next
LYNC Unity SUPRA SDK
Last updated 
1 month ago
LYNC Unity SUPRA SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating LYNC SUPRA SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via LYNC SUPRA SDK in Unity
Transaction Flow:
Gasless Transaction
Some common bugs and their resolutions
Supra
LYNC Unity SUPRA SDK
SUPRA Unity SDK is a no-code Modular Unity SDK supporting PC (MacOS and Windows), Mobile (IOS and Android) and WebGL on SUPRA Blockchain.
Previous
JavaScript/ TypeScript
Next
LYNC Unity Fuel SDK
Last updated 
8 days ago
Platform Supported:
 PC (Windows and MacOs), Mobile (IOS and Android) and WebGl

Network Supported:
 SUPRA Testnet and Mainnet
This release includes the following:
Social Logins
StarKey wallet login
Custom Transactions in Social Login and Web3 Wallet like StarKey
Paymaster inbuilt to sponsor transactions for your users.
Get your API Key
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC Unity SUPRA SDK from 
here
Example Project: 
https://github.com/LYNC-WORLD/LYNC-Supra-Unity-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the LYNC SUPRA SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating LYNC SUPRA SDK in Unity
There is 1 Example Projects present in the SDK: 
Assets/LYNC-SUPRA-SDK/SUPRA/SUPRAExample.unity
You can find the example scene in the folders. Simply pass the API key in LyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC SUPRA SDK. Attach LYNC Manager Prefab(Assets/LYNC-SUPRA-SDK/LYNC Manager.prefab), on the starting scene.
This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose Network -> TESTNET
Sponsor Transactions -> If you want to sponsor transactions for users (To setup Paymaster go to 
LYNC Dashboard
)
Login Options -> Allowing users to choose which login method to login from
Pass a deep link name (example: LYNCSupra/gameName etc.)
Integrating Login or Transaction Layer via LYNC SUPRA SDK in Unity
The Sample Code for Login can be found at SUPRAExample.cs.
Make sure to Import LYNC.
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            OnWalletConnected(wallet);


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


        


    }
To Check if the user is logged in or not:
Copy
using LYNC;




private AuthBase authBase;




    authBase = await AuthBase.LoadSavedAuth();


        if (authBase.WalletConnected)


        {


            // User is Already Login


            publicAddress.text = _authBase.PublicAddress; //Get Wallet Address


        }


        else{


             // Ask user to login


        }
To Login directly:
Copy
LyncManager.Instance.WalletAuth.ConnectWallet((wallet) =>


        {


                publicAddress.text = _authBase.PublicAddress; //Get Wallet Address


        });
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout(); 
Transaction Flow:
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee.
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction.
Gasless Transaction
To Enable Gasless Transactions or to Sponsor Transactions for your users, 
Set Sponsor Transactions as true, go to 
LYNC Dashboard
 to setup the paymaster. 
To do transactions, SUPRAExample.cs can be taken as a reference.
Pass in the Contract Address, Function Name and Arguments.
Arguments are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
Copy
TransactionResult txResult = await LyncManager.Instance.TransactionsManager.SendTransaction(transaction);
You can create a public Transaction Object, pass in the parameters and hit the function call where you want to do the transactions
Copy
public Transaction transaction;




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(transaction);




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


Or You can create a Transaction Object, 
Copy
public Transaction mintTxn;




//LyncManager.Instance.TransactionsManager.SendTransaction( new Transaction(ContractAddress, ContractName, FunctionName,ListOfArguments));




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(


new Transaction("0x1b89ab160c9ec18b5ee37f6d2774b5e8a9433c620a98bad062b6b738bd829316","tst_unity","set_data_bytes",arguments));




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


List of Arguments: 
Copy
//List<TransactionArgument>{


//    new TransactionArgument{ argument = value, type = ARGUMENT_TYPE.STRING }


//};




List<TransactionArgument> arguments = new List<TransactionArgument>{


    new TransactionArgument{ argument = "0xb66b180422a4886dac85b8f68cc42ec1c6bafc824e196d437fdfd176192c25fccfc10e47777699420eec0c54a0176861a353a43dd45b338385e1b975709f2000", type = ARGUMENT_TYPE.STRING }


};
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key​
Transaction Object
Add newtonsoft Json
LYNC Unity Fuel SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating LYNC Fuel SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via LYNC Fuel SDK in Unity
Transaction Flow:
ABI Fetcher
Gasless Transaction
Some common bugs and their resolutions
Fuel
LYNC Unity Fuel SDK
Fuel Unity SDK is a no-code Modular Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS) on Fuel Blockchain.
Previous
LYNC Unity SUPRA SDK
Next
LYNC NFT Deployer
Last updated 
4 months ago
Platform Supported:
 PC (Windows and MacOs) and Mobile (Android and iOS)

Network Supported:
 Fuel Testnet and Mainnet (Coming Soon)
This release includes the following:
Social Logins
Fuelet Wallet Login
Custom Transactions in Social Login and Web3 Wallet like Fuelet
Paymaster inbuilt to sponsor transactions for your users.
Get your API Key
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC Unity Fuel SDK from 
Here​
Example Project: 
https://github.com/LYNC-WORLD/Fuel-Unity-SDK
​
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the LYNC Fuel SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating LYNC Fuel SDK in Unity
There is 1 Example Projects present in the SDK: 
Assets/LYNC-FUELET-SDK/FUELET/Example.unity
You can find the example scene in the folders. Simply pass the API key in LyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Fuel SDK. Attach LYNC Manager Prefab(Assets/LYNC-FUELET-SDK/LYNC Manager.prefab), on the starting scene.
This will serve as the starting point for your project. In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose Network -> TESTNET
Sponsor Transactions -> If you want to sponsor transactions for users (Please contact 
LYNC
 to setup Paymaster)
Login Options -> Allowing users to choose which login method to login from

Pass a deep link name (example: lyncfuel/gameName etc.)
Integrating Login or Transaction Layer via LYNC Fuel SDK in Unity
The Sample Code for Login can be found at Example.cs.
Make sure to Import LYNC.
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            OnWalletConnected(wallet);


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


        


    }
To Check if the user is logged in or not:
Copy
using LYNC;




private AuthBase authBase;




    authBase = await AuthBase.LoadSavedAuth();


        if (authBase.WalletConnected)


        {


            // User is Already Login


            publicAddress.text = _authBase.PublicAddress; //Get Wallet Address


        }


        else{


             // Ask user to login


        }
To Login directly:
Copy
LyncManager.Instance.WalletAuth.ConnectWallet((wallet) =>


        {


                publicAddress.text = _authBase.PublicAddress; //Get Wallet Address


        });
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout(); 
Transaction Flow:
ABI Fetcher
You will need ABI of the function to hit transaction, it's a rather complex process. To simply that, We have built a ABI Fetcher.
Link to ABI Fetcher: 
https://fuel-abi-fetcher.lync.world/
To get ABI of a function, pass Function Name and Contract ABI
For Example:
Function Name
Copy
get_global_score
ABI
Copy
{


    "encoding": "1",


    "types": [


      {


        "typeId": 0,


        "type": "()",


        "components": [],


        "typeParameters": null


      },


      {


        "typeId": 1,


        "type": "b256",


        "components": null,


        "typeParameters": null


      },


      {


        "typeId": 2,


        "type": "bool",


        "components": null,


        "typeParameters": null


      },


      {


        "typeId": 3,


        "type": "enum AccessError",


        "components": [


          {


            "name": "NotOwner",


            "type": 0,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 4,


        "type": "enum Errors",


        "components": [


          {


            "name": "GAME_SESSION_NOT_STARTED",


            "type": 0,


            "typeArguments": null


          },


          {


            "name": "GAME_SESSION_ALREADY_STARTED",


            "type": 0,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 5,


        "type": "enum Identity",


        "components": [


          {


            "name": "Address",


            "type": 8,


            "typeArguments": null


          },


          {


            "name": "ContractId",


            "type": 9,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 6,


        "type": "enum InitializationError",


        "components": [


          {


            "name": "CannotReinitialized",


            "type": 0,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 7,


        "type": "enum State",


        "components": [


          {


            "name": "Uninitialized",


            "type": 0,


            "typeArguments": null


          },


          {


            "name": "Initialized",


            "type": 5,


            "typeArguments": null


          },


          {


            "name": "Revoked",


            "type": 0,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 8,


        "type": "struct Address",


        "components": [


          {


            "name": "bits",


            "type": 1,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 9,


        "type": "struct ContractId",


        "components": [


          {


            "name": "bits",


            "type": 1,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 10,


        "type": "struct OwnershipSet",


        "components": [


          {


            "name": "new_owner",


            "type": 5,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 11,


        "type": "struct OwnershipTransferred",


        "components": [


          {


            "name": "new_owner",


            "type": 5,


            "typeArguments": null


          },


          {


            "name": "previous_owner",


            "type": 5,


            "typeArguments": null


          }


        ],


        "typeParameters": null


      },


      {


        "typeId": 12,


        "type": "u256",


        "components": null,


        "typeParameters": null


      }


    ],


    "functions": [


      {


        "inputs": [


          {


            "name": "owner",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "constructor",


        "output": {


          "name": "",


          "type": 0,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "read",


              "write"


            ]


          }


        ]


      },


      {


        "inputs": [],


        "name": "owner",


        "output": {


          "name": "",


          "type": 7,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "read"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "new_owner",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "change_owner",


        "output": {


          "name": "",


          "type": 0,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "write"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "end_game_session",


        "output": {


          "name": "",


          "type": 0,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "write"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "get_game_session_score",


        "output": {


          "name": "",


          "type": 12,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "read"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "get_game_session_started",


        "output": {


          "name": "",


          "type": 2,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "read"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "get_global_score",


        "output": {


          "name": "",


          "type": 12,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "read"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          }


        ],


        "name": "start_new_game_session",


        "output": {


          "name": "",


          "type": 0,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "write"


            ]


          }


        ]


      },


      {


        "inputs": [


          {


            "name": "id",


            "type": 5,


            "typeArguments": null


          },


          {


            "name": "score_to_add",


            "type": 12,


            "typeArguments": null


          }


        ],


        "name": "update_game_session_increase_score",


        "output": {


          "name": "",


          "type": 0,


          "typeArguments": null


        },


        "attributes": [


          {


            "name": "storage",


            "arguments": [


              "write"


            ]


          }


        ]


      }


    ],


    "loggedTypes": [


      {


        "logId": "2161305517876418151",


        "loggedType": {


          "name": "",


          "type": 6,


          "typeArguments": []


        }


      },


      {


        "logId": "16280289466020123285",


        "loggedType": {


          "name": "",


          "type": 10,


          "typeArguments": []


        }


      },


      {


        "logId": "4571204900286667806",


        "loggedType": {


          "name": "",


          "type": 3,


          "typeArguments": []


        }


      },


      {


        "logId": "12970362301975156672",


        "loggedType": {


          "name": "",


          "type": 11,


          "typeArguments": []


        }


      },


      {


        "logId": "7573363117586927569",


        "loggedType": {


          "name": "",


          "type": 4,


          "typeArguments": []


        }


      }


    ],


    "messagesTypes": [],


    "configurables": []


  }














There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee.
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction.
Gasless Transaction
To Enable Gasless Transactions or to Sponsor Transactions for your users, 
Set Sponsor Transactions as true, and 
contact LYNC team to setup your paymaster
To do transactions, Example.cs can be taken as a reference.
Pass in the Contract Address, Function Name, ABI of that function and Arguments.
Arguments are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
Copy
TransactionResult txResult = await LyncManager.Instance.TransactionsManager.SendTransaction(transaction);
You can create a public Transaction Object, pass in the parameters and hit the function call where you want to do the transactions
Copy
public Transaction transaction;




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(transaction);




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


Or You can create a Transaction Object, 
Copy
public Transaction mintTxn;




//LyncManager.Instance.TransactionsManager.SendTransaction( new Transaction(ContractAddress, ContractName, FunctionName,ListOfArguments));




TransactionResult txData = await LyncManager.Instance.TransactionsManager.SendTransaction(


new Transaction("0x55db3f109405348dd4ce271dc92a39a6e1cbc3d78cf71f6bf128b1c8a9dfac33","tst_unity","set_data_bytes",arguments));




if (txData.success)


    SuccessfulTransaction(txData.hash, "MINT");


else


    ErrorTransaction(txData.error);


List of Arguments: 
Copy
//List<TransactionArgument>{


//    new TransactionArgument{ argument = value, type = ARGUMENT_TYPE.STRING }


//};




List<TransactionArgument> arguments = new List<TransactionArgument>{


    new TransactionArgument{ argument = "0xb66b180422a4886dac85b8f68cc42ec1c6bafc824e196d437fdfd176192c25fccfc10e47777699420eec0c54a0176861a353a43dd45b338385e1b975709f2000", type = ARGUMENT_TYPE.STRING }


};
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Assets -> Import Package -> Custom Package
SDK Folder Structure
Example Projects
Pass LYNC API Key​
Login Options
LYNC Fuel ABI Fetcher
Sponsor Transactions
Transaction Object
Add newtonsoft Json
LYNC NFT Deployer | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Link to NFT Deployer on Fuel -
Key Features:
Fuel
LYNC NFT Deployer
Launch, manage, and deploy smart contracts on Fuel network easily - no blockchain knowledge required!
Previous
LYNC Unity Fuel SDK
Next
Introduction
Last updated 
1 month ago
LYNC Fuel NFT Deployer is a no-code Smart contract Deployment Platform that simplifies the process of creating and managing NFTs, even to users who have no experience with blockchain technology. 
It supports Non-fungible NFTs (unique digital assets) and Semi-fungible NFTs (multiple edition NFTs). It allows users to build individual NFTs or entire collections, customize attributes, and deploy them on the Fuel blockchain with just a few easy steps. LYNC NFT Deployer  makes launching NFTs and collection much more accessible and straightforward.
Link to NFT Deployer on Fuel -
Key Features:
Different NFT Options -

Users can deploy different types of NFT contracts:
1/1 NFTs -> These NFTs are unique and only have one copy.
Multiple Edition -> These NFTs have n number of copies.
Collection -> This can be divided into 2 parts
1/1 NFT :
 In a 1/1 NFT contract, creator can choose to have as many quantity of unique NFTs. For example: 1000 NFT collection (1000 NFTS where all are a Unique Copies or Unique Assets, like a rare NFT which only 1 user can hold)
Multiple Edition
 : In a multiple edition NFT contract, creator can choose to have as many copies of NFT. For example: 1000 NFT collection (1000 copies of same NFT, like a common in-game asset)
No Blockchain Knowledge Needed -

This is a no-code platform designed for everyone, whether you're new to the world of NFTs or an experienced blockchain user. With a simple, step-by-step process, it takes care of all the complex technical stuff behind the scenes. This way, anyone can easily create and manage their NFTs.
Secure and Transparent -

All NFT deployments are recorded on the Fuel blockchain, which ensures that each transaction is permanent and easily verifiable. This helps in building trust with users and protects the integrity of their digital assets.
Support for Multiple Wallets - 

The Fuel NFT Deployer allows you to connect Fuel wallets such as 
Fuel Wallet
, 
Fuelet
 etc, Ethereum wallets such as 
Metamask
 etc, and other compatible wallets with the Fuel network. This ensures that users can choose a wallet that fits their needs, making the platform more accessible.
Fuel Deployer | Lync
NFT deployer on Fuel blockchain
LYNC's NFT Deployer on Fuel Blockchain Network
Introduction | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
What is the NFT Deployer?
Why is the NFT Deployer Required?
What are Non-fungible, Semi-fungible Tokens, and Collections?
Why LYNC's NFT Deployer on Fuel?
Fuel
LYNC NFT Deployer
Introduction
What is the NFT Deployer?
The 
Fuel NFT Deployer
 is a web application that enables anyone to create and deploy Nonfungible Tokens (NFTs), Semi-fungible Tokens (SFTs), and NFT Collections on the Fuel blockchain network even without knowledge of blockchain or coding skills. By connecting their wallets and following simple instructions, users can mint and manage NFTs or collections effortlessly.
Why is the NFT Deployer Required?
The 
Fuel NFT Deployer
 eliminates the requirement of blockchain knowledge and other complexity by providing a straightforward platform where anyone can deploy NFTs or NFT collections without the need for technical knowledge. It is required because it:
Makes NFT deployment accessible to all, from individual artists and content creators to businesses and brands.
Streamlines the process, reducing time and effort compared to traditional methods.
Minimizes the costs associated with hiring developers or acquiring specialized blockchain skills.
Empowers users by giving them full control over their assets and creations without relying on intermediaries.
What are Non-fungible, Semi-fungible Tokens, and Collections?
Non-fungible Tokens (NFTs): U
nique digital assets that represent ownership or proof of authenticity of a specific item or piece of content on the blockchain. Each NFT is distinct, meaning no two NFTs are alike, making them ideal for representing digital art, collectibles, music, videos, and more.
Semi-fungible Tokens (SFTs): 
These tokens are identical and can be exchanged for one another (like a currency). SFTs are useful for cases like event tickets, gaming assets, or vouchers, where multiple identical items are created, but their state changes after use.
NFT Collections: 
A set of NFTs grouped under a common theme or project. Collections can consist of either non-fungible or semi-fungible tokens. For example, an artist could create a collection of digital artworks, or a game developer could create a collection of in-game assets. Collections help organize NFTs and add value through curated offerings.
Why LYNC's NFT Deployer on Fuel?
The 
Fuel NFT Deployer
 offers a range of features that make it a valuable tool for creators, developers, businesses, and anyone interested in NFTs:
A simple UI that guides users through the entire process of deploying NFTs or collections. No coding or technical skills are required.
Supports both non-fungible and semi-fungible tokens, as well as collections.
Ensures that user have complete control over their assets. 
We do not hold or manage any private keys
, providing a secure environment for NFT deployment.
A budget-friendly solution for NFT creation and management.
Allows anyone to participate in the NFT ecosystem — regardless of their knowledge of blockchain technology.
Users can mint their assets in just a few clicks, avoiding the lengthy processes associated with traditional deployment methods.
Fuel NFT Deployer empowers more people to participate in this new digital economy. By lowering entry barriers, we enable a more diverse range of creators, businesses, and developers to explore and benefit from NFTs, encouraging innovation and expanding the reach of blockchain technology.
Previous
LYNC NFT Deployer
Next
Getting Started
Last updated 
4 months ago
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Connect Your Wallet
Choose NFT Type for Deployment
Fuel
LYNC NFT Deployer
Getting Started
Connect Your Wallet
To deploy NFTs using the Fuel NFT Deployer, you first need to connect your wallet. Follow these steps to connect your wallet:
Navigate to our web application to start the NFT deployment process.
Click the 
'Connect Wallet'
 button, which is located at the top right corner of the page.
A popup will appear. Choose from supported options like Fuel Wallets, Ethereum Wallets, or any other compatible wallet.
Follow the specific instructions provided by the wallet of your choice to connect to NFT Deployer.
After authorizing the connection, you will see your wallet address displayed on the top right corner of the page.
Once connected, you're ready to deploy your NFTs or collections directly from our portal.
NOTE -
Ensure your wallet is funded with sufficient tokens required for gas fees during the deployment process.
Choose NFT Type for Deployment
Once your wallet is connected, you can choose the type of NFT you want to deploy:
Nonfungible NFT (1/1 NFTs)
Semi-fungible NFT (Multiple Editions)
NFT Collections
After selecting the type of NFT you want to deploy, you will be guided through easy steps to customize and mint your digital asset.
Upon successful deployment, your NFT or NFT collection will be live on the Fuel blockchain. You will be able to manage, track, and interact with them directly from your connected wallet.
Previous
Introduction
Next
Deploying Your NFTs
Last updated 
4 months ago
Deploying Your NFTs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fill Out the Deployment Form
1. Choose the Type of Contract
2. Access the Deployment Form
3. Fill in the Required Details
Deploy the Contract
1. Review the Details
2. Deploy the Contract
3. View Deployed Contract Details
Mint Tokens Within the Contract
1. Select the Deployed Contract
2. Mint Tokens
3. Specify Minting Details
Fuel
LYNC NFT Deployer
Deploying Your NFTs
In this section, you will learn about launching an NFT, an SFT, or an entire collection of NFTs or SFTs. Our platform will guide you through every step of the deployment process.
Fill Out the Deployment Form
1. Choose the Type of Contract
Nonfungible Tokens -

NFTs are unique digital assets. Each Nonfungible NFT is distinct and cannot be replicated.
Examples:
 Digital art, rare collectibles, unique game items.
Semi-fungible NFT -

 SFTs are the type of digital assets that
 
can be exchanged for one another (like a currency). SFTs are useful where multiple identical items are created, but their state changes after use.
Examples:
 Limited edition items where multiple copies exist, in-game currency with a fixed supply, and event tickets.
NFT Collections -

This option is for deploying a group of related NFTs or SFTs. Collections allow you to deploy multiple digital assets of the same type under a single contract.
Examples:
 A series of digital art pieces from the same artist, a collection of themed game items, or a set of collectible cards.
2. Access the Deployment Form
Start by connecting your wallet to the Fuel NFT Deployer.
Choose the NFT type to get started with the deployment.
Within the "Deploy Contract" page, you’ll find the deployment form. You will have to input all the necessary information about your NFT contracts in the Form to get started with the deployment process.
3. Fill in the Required Details
Contract Name -

Provide a unique name for your NFT contract. This name will help identify your contract within the blockchain network and should be descriptive of its content or purpose.
Symbol -

Choose a symbol for your NFT or collection. This is often a short, memorable abbreviation that represents your NFT in transactions and listings.
Other Relevant Properties -

Depending on the type of NFT you’re deploying, you may need to fill out additional properties. These can include the token category, cost, max supply, and max mint per user (in case of collection).
By following these steps and filling out the form with detailed and accurate information, you ensure that your NFTs or NFT collections are properly set up to be deployed on the Fuel blockchain network.
Deploy the Contract
1. 
Review the Details
Before deploying the smart contract, you need to verify that all the information you've provided is correct. This is crucial to ensure that your contract functions as intended and to avoid any issues after deployment.
Check the details you've entered. This includes the contract name, contract symbol, and other attributes of your NFT contract or collection. Ensure that this information is accurate.
Confirm that you've selected the correct type of contract. Different contracts (e.g., NFTs, SFTs) have different functionalities and requirements.
Ensure that you are connected to 
Fuel Testnet
 and that your network settings (such as gas fees and network configurations) are correctly set.
2. 
Deploy the Contract
Once you have reviewed and confirmed all the details, you can proceed with deploying the smart contract.
Click on the "Deploy Contract" button to initiate the deployment process.
The platform will handle the backend processes, such as compiling the contract code, building your contract, and finalizing the contract on the blockchain network.
Depending on the blockchain network, the deployment process might take some time. You'll need to wait for the completion of contract deployment process.
3. 
View Deployed Contract Details
After the deployment process is complete, you can view the details of your deployed contract.
Navigate to the "Your Contracts" section to view the list of all your deployed contracts.
Click on the specific contract you want to view. You will be able to see detailed information such as:
Contract Address
: The unique address assigned to your deployed contract on the blockchain.
Contract Name: 
The name of your contract you have set during contract deployment.
Contract Symbol: 
The symbol for your contract you have set during the deployment.
Token Type
: The type of token your contract represents (e.g., 1/1 NFTs, Multiple Edition SFTs, or collection).
Network
: The blockchain network where the contract is deployed (e.g., Fuel Testnet).
By following these steps, you can successfully deploy a smart contract and manage it through the web application.
Mint Tokens Within the Contract
1. 
Select the Deployed Contract
After deploying your NFT smart contract on the blockchain, it will appear in the "Your Contracts" section of the web application interface. This is the list of all contracts you have deployed, where you can select the one you want to use for minting tokens.
Click on the desired contract. This will take you to the contract details page where you can mint the tokens or view already minted tokens.
2. 
Mint Tokens
Minting is the process of creating new tokens (NFTs or SFTs) based on the selected contract. Depending on the type of token you want to create, the process will differ.
For Nonfungible Tokens: 
Each NFT is unique and distinct. You will mint one token at a time, with each token having its unique 
Asset ID
.
For Semi-fungible Tokens: 
Semi-fungible tokens can be created in groups or batches. Unlike non-fungible tokens, these tokens are interchangeable within the same batch but have unique 
Asset IDs
 between batches.
What is an 
Asset ID
 for a minted token?
On the Fuel blockchain, an 
Asset ID
 is a unique identifier for a minted token that is used to interact with an asset on the network. Each minted token (in case of NFTs) or batch of tokens (in case of SFTs) is assigned a unique 64-bit hash that is used to identify the asset and interact with the asset. Unlike the EVM, the sending and receiving of these assets can be done independently of the asset contract using the 
Asset ID
.
3. 
Specify Minting Details
When you initiate the minting process, you'll need to provide specific details about the NFTs you're creating.
Upload the image or other media of your digital asset. If you are uploading a video or an audio, you will be required to provide a thumbnail representing the poster of your digital asset.
Enter the other details like the title and description of your digital asset specifying the identity of your digital asset.
You will also need to provide the name of the creator of this digital asset - this can be the same user that is minting the asset or any other user that may be related to the digital asset.
In the case of minting the SFTs, you will also required to enter how many editions you want to create of the current asset. This will mint the given no of copies of current digital asset, which will be represented by the same 
Asset ID
 on the Fuel blockchain.
You can also specify other properties of the digital asset that can be used to describe the digital asset that you are minting. However, adding additional properties is completely optional and digital assets can be deployed without specifying the additional properties.
Once you've entered all the required details, click the "Mint" button to execute the minting process. This action will create a digital asset as specified and add it to the blockchain.
A unique 
Asset ID 
 will be assigned to the minted asset or batch of assets (in the case of SFTs). This unique Asset ID can be used to digitally identify the asset on the fuel blockchain independently.
You can find the 
Asset ID
 of an already minted asset by clicking the "Tokens" tab on the contract details page and finding the minted token as shown in the figure below:
Congratulations! You've now successfully navigated the NFT minting process. By selecting the appropriate deployed contract and specifying the minting details, you’ve created new NFTs that are now live on the blockchain.
Previous
Getting Started
Next
Launch Your Entire Collection
Last updated 
4 months ago
Asset ID can be found by clicking on the "Tokens" tab
Launch Your Entire Collection | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
LYNC NFT Deployer
Deploying Your NFTs
Launch Your Entire Collection
This 
"Collection" 
option is used when you're deploying a full set of tokens, rather than a single item. Collections allow you to group multiple tokens under a single deployment, making it easier to manage and launch a series of related digital assets.
Provide Collection Details
Upload an image that represents your collection. This is often a visual that represents the essence of your entire collection and will be displayed on the claimer page that will be created for your collection where users can mint the tokens.
Enter a unique contract name and unique symbol for your collection. This contract name will be used as an identifier of your collection and will be displayed on the claimer page along with the contract address and collection image.
Choose Contract Type
Non-Fungible NFT Contract (1/1 NFT) - 
Ideal for digital assets that are unique and not interchangeable. Each token is distinct and has its properties. Nonfungible tokens are a variant of the ERC-721 on EVM standard.
Semi-Fungible NFT Contract (Multiple Editions) -

This contract type is suited for digital assets where multiple copies or editions of the same item exist. Semi-fungible tokens allow for a single contract to manage multiple types of tokens.
Input Metadata and Supply Details
Provide the URI (Uniform Resource Identifier) for the token metadata. This URI points to where the metadata for each digital asset is stored, usually on a decentralized storage network like IPFS (InterPlanetary File System).
Set a limit on the number of assets that can be minted per wallet address.
Specify the total number of digital assets available in your collection.
Enter the cost required to mint each asset. This is the price that users will pay to acquire an asset from your collection.
Once you’ve filled in all the details and reviewed them, click on the "Deploy" button. This will initiate the process of deploying your collection on the Fuel blockchain. This involves paying a deployment fee (gas fee) and will make your collection available for minting by users.
By following these detailed steps, you'll be able to effectively deploy your collection, ensuring all necessary information is included and configured correctly.
Share and Manage the Claimer Page
Find the Claimer Page for Your NFT Collection
After deploying your collection using the Fuel NFT Deployer, go to the "Your Contracts" section on your dashboard.
In this section, you will see a list of all the contracts you've deployed. Look for the specific collection contract you want to share.
Each collection will have an associated Claimer Page URL. Click on this URL or copy it to access the Claimer Page for your collection.
The Claimer Page URL is the link you’ll share with your community, friends, or customers. This URL directs users to a page where they can interact with your collection.
Previous
Deploying Your NFTs
Next
Troubleshooting and FAQs
Last updated 
4 months ago
Provide Collection Details
Choose Contract Type
Input Metadata and Supply Details
Share and Manage the Claimer Page
Find the Claimer Page for Your NFT Collection
Claimer Page for Non-Fungible (1/1) NFTs
Claimer Page for Semi-Fungible (Multiple Edition) NFTs
Troubleshooting and FAQs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
What is the difference between deploying Multiple Edition (or 1/1 NFTs) and Collection?
What if I cannot connect my wallet?
Collections give me an option to select either a Multiple or 1/1 NFT. However, I couldn't find an option to add multiple of these in the same collection.
What to do if the wallet currently does not detect which network am I on - if it's the local node or the Testnet - at the moment.
How do I handle failed transactions?
Is there a fee for deploying NFTs?
How can I check the status of my deployed NFTs?
What should I do if I forget my wallet password or recovery phrase?
How do I verify the success of my NFT deployment?
What if my NFT appears to be missing or does not show up in my wallet?
What if I encounter performance issues with the NFT platform?
Fuel
LYNC NFT Deployer
Troubleshooting and FAQs
What is the difference between deploying Multiple Edition (or 1/1 NFTs) and Collection?
Deploying a 
single edition (1/1 NFT)
 creates a unique, one-of-a-kind token with no duplicates, making it ideal for exclusive assets. 
Multiple Edition NFTs
 involve creating several identical copies of the same token, which allows for a limited run of the same design.
Deploying a 
Collection
 involves creating a group of NFTs, which can include either single-edition or multiple-edition tokens, and allows for the organization and management of various related NFTs under one contract.
What if I cannot connect my wallet?
Ensure your wallet supports the Fuel network by checking its settings and permissions. You might need to enable specific dApps or network configurations. Also, make sure you're using the latest wallet version.
Collections give me an option to select either a Multiple or 1/1 NFT. However, I couldn't find an option to add multiple of these in the same collection.
In Fuel NFT Deployer, collections are designed to categorize NFTs based on their type - 
"1/1" (single-edition)
 or 
"Multiple" (multiple editions)
. This design is required for managing your NFTs within a single collection to maintain clarity and organization. Each collection is dedicated to one type to ensure ease of management and consistency in your NFT offerings.
What to do if the wallet currently does not detect which network am I on - if it's the local node or the Testnet - at the moment.
Ensure that your wallet is configured correctly for network detection. Check if you have manually selected the appropriate network in your wallet settings. If the issue persists, verify that your local node or testnet setup is properly connected and accessible.
How do I handle failed transactions?
Transaction failures may happen during high network traffic or if your wallet has insufficient funds. Try waiting for a less busy time, and ensure you have sufficient balance in your wallet for deployment and gas fees. Review any error messages for clues on resolving the issue.
Is there a fee for deploying NFTs?
Deploying NFTs on the Fuel blockchain requires a gas fee. Ensure you have sufficient funds to cover the deployment cost, which can vary based on contract complexity and network conditions.
How can I check the status of my deployed NFTs?
Use 
Fuel's blockchain explorer
 or your wallet's transaction history to check the status of your NFT deployment. You can also view and manage your NFTs through the dashboard in Fuel NFT Deployer for detailed token information and status.
What should I do if I forget my wallet password or recovery phrase?
Follow the wallet's password recovery instructions and securely store your recovery phrase. Without the recovery phrase, wallet or fund recovery might be impossible.
How do I verify the success of my NFT deployment?
Check your deployment transaction status using 
Fuel's blockchain explorer
 by entering the transaction ID. Verify if it was confirmed and included in the blockchain. Once deployed, review the confirmation message or receipt in Fuel NFT Deployer to ensure the successful creation of your NFT collection.
What if my NFT appears to be missing or does not show up in my wallet?
There might be a delay in syncing your NFT; try refreshing your wallet or waiting a few minutes. Ensure your wallet is on the correct blockchain network.
What if I encounter performance issues with the NFT platform?
Check the Fuel NFT Deployer platform or blockchain network for any issues or maintenance affecting performance. Ensure your browser is up to date and your device has sufficient resources for smooth operation.
By addressing these common issues and questions, you can ensure a smoother experience with Fuel NFT Deployer. If you encounter any additional problems or have further questions, don’t hesitate to reach out to our support team for assistance.
Previous
Launch Your Entire Collection
Next
LYNC Fuel Lootbox
Last updated 
4 months ago
LYNC Fuel Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
LYNC Fuel Lootbox
Previous
Troubleshooting and FAQs
Next
Getting Started
Last updated 
1 month ago
Loot boxes
 are virtual mystery boxes in games that contain randomized in-game items. Loot boxes play a crucial role in keeping players engaged by creating a sense of anticipation and excitement around what they might receive. This element of surprise encourages players to keep playing while driving significant revenue for game developers through in-game purchases.
On Chain Lootboxes
On-chain loot boxes
 are a new, blockchain-based version of these virtual mystery boxes. These loot boxes use blockchain technology and smart contracts to manage every step of the process in a decentralized and transparent way. The use of blockchain ensures that no one can tamper with or manipulate the outcome, providing players with a fair and trustworthy experience
Link to LYNC Fuel Lootbox
Randomization and Its Importance
Randomization
 is the process that ensures each reward within a loot box is distributed in an unpredictable and unbiased way. It's a key component in creating and managing loot boxes because it directly impacts the player experience and the fairness of the system. The excitement of opening a loot box comes from the uncertainty of what it might contain, which is made possible by effective randomization. Randomization is crucial for creating and managing loot boxes because:
The unpredictable nature of rewards makes opening loot boxes exciting and engaging for players.
Proper randomization means every player has an equal chance of winning any given reward, preventing favoritism or manipulation.
When players know that the randomization is genuinely fair and transparent, they are more likely to engage with the game and its loot boxes.
LYNC's Fuel Lootbox
Introducing our new lootbox on Fuel blockchain, designed to easily create, open lootboxes, and claim rewards, such as NFTs and tokens, directly within the web application interface. Our web application provides a simple yet powerful solution for creating and using an on-chain lootbox, claiming rewards in the form of NFTs and tokens on the Fuel blockchain network, ensuring a smooth and hassle-free user experience. With just a few clicks, users can unlock the full potential of randomness and blockchain transactions, enabling users to easily interact with the lootboxes within the web application's interface.
What is inside a Lootbox
Our on-chain loot boxes are filled with a mix of 
Non-fungible Tokens (NFTs - similar to ERC721 in EVM standards) and Fungible Tokens (FTs - similar to ERC20 in EVM standards)
, making every opening a unique and exciting experience. The contents of these boxes are chosen using a randomization method known as the 
Verifiable Random Function (VRF)
, which is an on-chain mechanism that ensures complete fairness and transparency in selecting rewards.
NFTs
 represent unique, one-of-a-kind digital rewards that players can receive when they open a loot box. Because NFTs are non-fungible, each one has its distinct value and properties, making them highly desirable to players who want something unique and collectible.
Fungible tokens (FTs)
 are digital currencies that can be used within the game’s ecosystem. Players can earn these tokens through loot boxes and use them for in-game purchases, to unlock new levels, or trade them with other players. Because FTs are compatible with external marketplaces, they offer players a way to exchange their in-game rewards for other digital assets or even real-world currency.
By including these different types of NFTs and tokens, our loot boxes provide a richer and more dynamic experience. The use of the 
VRF (Verifiable Random Function)
 ensures that every time a loot box is opened, the reward selection process is genuinely random and unbiased, enhancing trust and fairness in the reward system.
On Chain Lootboxes
Link to LYNC Fuel Lootbox
Randomization and Its Importance
LYNC's Fuel Lootbox
What is inside a Lootbox
Fuel Lootbox
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
LYNC Fuel Lootbox
Getting Started
Connect Your Wallet
To create and use a lootbox using the LYNC's Fuel Lootbox, you first need to connect your wallet.
Navigate to our web application to start the creation of a lootbox, open a lootbox, and claim rewards.
Locate and click the 
'Connect Wallet'
 button, it is located at the top right corner of the page.
A popup will appear, asking you to select your preferred wallet. Choose from supported options like Fuel Wallet, Fuel Development Wallet, and Fuelet Wallet.
Depending on the wallet type selected, you will be guided through the connection process. Follow the specific instructions provided by the wallet to connect to the web application.
After authorizing the connection, You will see your wallet address displayed on the top right corner.
Once connected, you're ready to start creating, opening lootboxes, and claiming rewards directly from our Fuel lootbox portal.
Note:
 Ensure your wallet is funded with sufficient tokens required for gas fees during the lootbox creation and claiming process.
Previous
LYNC Fuel Lootbox
Next
Creating a Lootbox
Last updated 
4 months ago
Creating a Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Choose Assets to Include in the Lootbox
NFTs (Non-Fungible Tokens):
FTs (Fungible Tokens):
Review and Confirm Deployment
Fuel
LYNC Fuel Lootbox
Creating a Lootbox
Previous
Getting Started
Next
Opening a Lootbox
Last updated 
4 months ago
Creating a lootbox on Fuel Lootbox involves depositing assets (NFTs and FTs) and setting parameters that will control how rewards are distributed when someone opens the lootbox.
Before creating a lootbox, the user needs to connect to the Fuel Lootbox web application using their Fuel Wallet. Once connected, the user can navigate to the section where they can create a new lootbox.
Choose Assets to Include in the Lootbox
NFTs (Non-Fungible Tokens):
Deposit NFTs
: For each NFT the user deposits, they need to input the corresponding 
Asset ID
. The NFTs must already exist in the user’s wallet to add them to the lootbox.
What is an 
Asset ID
 for a minted token?
On the Fuel blockchain, an 
Asset ID
 is a unique identifier for a minted token that is used to interact with an asset on the network. Each minted token (in case of NFTs) or batch of tokens (in case of SFTs) is assigned a unique 64-bit hash that is used to identify the asset and interact with the asset. Unlike the EVM, the sending and receiving of these assets can be done independently of the asset contract using the 
Asset ID
.
You can use 
LYNC's Contract Deployer on Fuel
 to mint NFTs and find Asset IDs to include in the lootbox. You can refer to the 
Fuel NFT Deployer documentation
 to know more about 
Asset IDs
 and where to find them.
Specify Range
: After adding the NFTs, the user specifies the range of how many NFTs can be given out when the lootbox is opened.
For instance, if the user deposits 5 NFTs, they may specify that the lootbox should give out between 1 and 3 NFTs. This range defines how many NFTs the system will randomly select when the lootbox is opened.
FTs (Fungible Tokens):
Deposit Tokens
: The user will need to select which FTs they want to deposit into the lootbox. The FTs must also already be deployed and available in the user’s wallet. For each FT the user deposits, they need to input the corresponding 
Asset ID
.
Specify Range
: Similar to NFTs, the user defines the range for how many FTs will be given when the lootbox is opened.
Deposit Amount: 
For each FT, the user needs to specify the total amount of FT they want to deposite to the lootbox. This deposit amount will be available to the users who opens the lootbox and will be distributed to them within the specified range until all the FTs are distributed to the users.
Review and Confirm Deployment
Before finalizing the lootbox, the user can review all the details, including NFTs and FTs and their asset IDs respectively. Once everything is reviewed, the user can find the 
"Create Lootbox"
 button and click the button to confirm the creation of the lootbox.
Once the lootbox is created, it becomes available for opening. At this point, the lootbox is visible in the user interface, and ready for opening. If desired, the user can share the lootbox with others, or they may choose to open it themselves.
Each lootbox created using the Fuel lootbox web application has a unique lootbox ID, which is used to identify the lootboxes and items in them uniquely. Users can share their created lootboxes with other users as well for opening the lootboxes and claiming rewards.
Each lootbox created by the user is available on the "Your Lootboxes" page. User can view their created lootboxes on this page and they can also see the status of their created lootboxes - whether they are still "active" or "empty".
A lootbox remains active "active" untill all the rewards inside the lootboxes are distributed. After all the rewards are distributed, lootbox becomes empty and will no longer be available for opening to other users.
IMPORTANT NOTES -
Users can only deposit NFTs and FTs that already exist in their wallet. Fuel Lootbox does not support creating or minting new tokens.
Although the user sets specific ranges for both NFTs and FTs, the system will handle the randomization process. For example, if the user defines that the lootbox will give out between 1-3 NFTs, the number and selection of NFTs are random within this range when the box is opened.
Each lootbox can be opened and claimed multiple per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards as many times as they want until the lootbox becomes empty.
LYNC Fuel Lootbox Homepage
Form to Add NFTs to the Lootbox
Form to Add FTs to the Lootbox
Users can Review All the Assets Deposited to the Lootbox
Lootbox is Ready to Open After the Successful Creation
Opening a Lootbox | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Initiate the Opening
Random Reward Selection
Fuel
LYNC Fuel Lootbox
Opening a Lootbox
Previous
Creating a Lootbox
Next
Claiming the Rewards
Last updated 
4 months ago
Once a lootbox is created, users (or others) can open the lootbox by pressing the 'Open' button, revealing the randomized rewards.
To open a lootbox, the user must be connected to the Fuel Lootbox platform using their Fuel Wallet. This ensures that the rewards from the lootbox will be deposited directly into their wallet after opening.
These lootboxes may include lootboxes they created themselves or the lootboxes shared with them by others.
Initiate the Opening
After finding the lootbox, the user will see an 
“Open Lootbox”
 button on the open lootbox page. Upon clicking this button, the lootbox opening process is initiated, triggering the randomization of rewards inside the box.
To enhance the user experience and add a fun, visual element to the process, Fuel Lootbox incorporates an animated sequence when opening the lootbox. This adds excitement and suspense. The lootbox will display an animation, giving the user the feeling of actually “unlocking” something.
Random Reward Selection
While the animation is playing, the Fuel Lootbox system is in the background selecting the rewards based on the user-defined parameters that were set during lootbox creation.
If the lootbox contains NFTs, the system will randomly select some NFTs (within the range defined during lootbox creation) and choose which specific NFTs from the deposited pool will be given as a reward.
Similarly, for FTs (fungible tokens), the system will select a random number of tokens from the specified range and choose how many tokens will be given to the user.
The selection process is entirely random, ensuring each opening is unique and unpredictable.
If the user receives NFTs, they will see the details of which specific NFTs have been awarded to them. Similarly, if the lootbox includes FTs (fungible tokens), the user will see how many tokens they’ve received and the type of token.
After the rewards are revealed, the user must claim them to finalize the process and transfer the assets into their wallet. A “Claim” button will appear on the web page to claim the randomly selected rewards. Clicking this button initiates the final step of transferring the NFTs and FTs (fungible tokens) to the user’s Fuel Wallet.
Once the user clicks the claim button, the rewards are automatically deposited into their connected Fuel Wallet. The NFTs and FTs are directly transferred into the user’s wallet. The user can now view their claimed assets in their Fuel Wallet immediately.
Important Notes -
Each lootbox can be opened and claimed multiple per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards as many times as they want until the lootbox becomes empty.
Once the lootbox is opened and the random rewards are determined, there is no option to change or modify the outcome. This randomness adds excitement and unpredictability to each opening.
Even if a user opens a lootbox but decides not to claim the rewards, they cannot reopen the box to try again.
Lootbox is Ready to Open
Opening a Lootbox Requires Approval from User's Connected Wallet
Users can Claim the Randomly Selected Rewards After Opening the Lootbox
Claiming Rewards Requires Approval from User's Connected Wallet
Claiming the Rewards | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
LYNC Fuel Lootbox
Claiming the Rewards
Previous
Opening a Lootbox
Next
Conclusion
Last updated 
4 months ago
Before claiming rewards, the user must have completed the lootbox opening process. The rewards have been displayed on the screen, showing which NFTs and FTs the user has received.
After opening the lootbox, the user should review the rewards that were revealed. This ensures that the user understands what they are about to claim.
The user will see the details of each NFT and the number of FTs (fungible tokens) they have received. To proceed with claiming the rewards, the user needs to click the 
"Go to Rewards"
 button. This action initiates the final step of the process. 
Clicking the 
"Go to Rewards"
 button will take the action to complete the transfer of the rewards from the lootbox to the user’s Fuel Wallet. The action will update the lootbox status to reflect that the rewards have been claimed, and the lootbox can no longer be used or reopened.
The Fuel Lootbox backend system performs the necessary operations to ensure the NFTs and FTs are correctly moved from the lootbox to the user’s wallet.
After processing, the rewards are deposited into the user’s Fuel Wallet. The user can immediately view the claimed NFTs and FTs in their Fuel Wallet.
There is no need for the user to perform any additional actions to see the rewards in their wallet. The lootbox's status is updated to reflect that it has been used, and no further actions can be taken with that lootbox.
Important Notes -
Each lootbox can only be claimed once. After the rewards are claimed, the user cannot claim additional rewards from the same lootbox.
Once rewards are claimed and transferred to the wallet, the action cannot be reversed. Users should ensure they want to claim the rewards before finalizing the action.
The rewards are accessible in the user’s wallet immediately after claiming, providing instant satisfaction and seamless integration with the user’s Fuel Wallet.
Users can View the Rewards they Get After Opening the Lootbox
Rewards Obtained by the User on Opening the Lootbox
Conclusion | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
LYNC Fuel Lootbox
Conclusion
Fuel Lootbox offers an engaging and dynamic experience for users interested in exploring the world of NFTs and FTs. The platform combines the use of randomness with the excitement of digital asset rewards, creating a unique and interactive environment for all participants.
Fuel Lootbox makes discovering digital assets both exciting and enjoyable. To start, you can create your lootboxes by adding your NFTs and FTs. You get to decide how many of each type will be randomly given out, tailoring each lootbox to your preferences. When it comes to opening a lootbox, it’s like unwrapping a surprise gift. Once the lootbox is open and you’ve seen your rewards, just click “Claim,” and your NFTs and tokens are instantly added to your wallet.
The whole process is designed to be user-friendly and fun, with smooth animations and quick reward transfers making it enjoyable from start to finish. Keep in mind that each lootbox can be opened and claimed multiple per wallet address until the lootbox is empty. Users can open the lootbox and claim rewards as many times as they want until the lootbox becomes empty. Overall, Fuel Lootbox offers a playful and engaging way to explore and collect digital assets, ensuring that every experience is filled with excitement and surprise.
Previous
Claiming the Rewards
Next
Wallet Creation and Transaction APIs
Last updated 
4 months ago
Wallet Creation and Transaction APIs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Key Highlights
Why These APIs Are Important
How These APIs Help Developers Streamline Blockchain Interactions
Fuel
Wallet Creation and Transaction APIs
This documentation aims to provide all the necessary information for developers to successfully integrate Fuel blockchain features into their applications. By offering detailed explanations, practical examples, and best practices, it ensures developers can confidently implement wallet creation, NFT minting, and transaction functionalities in a secure and efficient manner.
These API provides endpoints for managing wallets and facilitating transactions on the Fuel blockchain. It includes routes for creating and retrieving wallets, minting NFTs, and executing generic transactions. These APIs are designed for developers who need to interact programmatically with the Fuel blockchain, enabling a wide range of blockchain-based applications such as dApps, financial services, and NFT marketplaces.
Key Highlights
Wallet Management
: The page begins with wallet management APIs, outlining the steps to create new wallets or retrieve existing wallets. It emphasizes the importance of securely handling private keys and demonstrates how to manage wallet operations programmatically.
Transaction Management
: The next section focuses on transaction management, including minting NFTs and sending generic transactions. These routes allow developers to perform complex blockchain operations with ease. The documentation provides detailed examples of how to format requests for different transaction types, making it easy for developers to get started.
Error Handling
: Each route includes a section on possible errors and their meanings, helping developers understand common pitfalls and troubleshoot issues effectively.
Security Considerations
: The documentation emphasizes security best practices, such as using HTTPS for all requests and securely storing private keys, which are essential for protecting users’ assets on the blockchain.
Use Cases and Examples
: Throughout the page, practical examples are provided to illustrate common use cases, such as creating a new user wallet, minting NFTs for digital art, or sending tokens for in-app purchases. These examples help developers visualize how the APIs can be integrated into real-world applications.
Developer-Friendly Format
: The page is designed to be developer-friendly, with clear formatting, example code snippets, and straightforward explanations. This format makes it easy for developers of all experience levels to understand and implement the APIs.
Comprehensive Reference
: Serving as a one-stop reference, the page covers all aspects of wallet and transaction management on the Fuel blockchain. It ensures developers have all the information they need to build and maintain blockchain-based applications efficiently.
Why These APIs Are Important
Simplified Blockchain Interactions
: The APIs abstract the complexities of blockchain interactions, such as wallet management, transaction signing, and broadcasting. Developers do not need to understand the low-level details of blockchain protocols, which significantly reduces the time and effort required to integrate blockchain functionality.
Enhanced Security
: By providing secure endpoints for wallet creation and transaction management, the APIs help developers implement best security practices without the need to design and build these features from scratch. This reduces the risk of vulnerabilities and ensures that sensitive data, such as private keys, is handled securely.
Faster Development Cycle
: The APIs allow developers to quickly build and deploy blockchain applications by providing ready-to-use functionalities like wallet creation, NFT minting, and transaction processing. This accelerates the development process and helps teams bring their products to market faster.
Standardization and Consistency
: Using a well-defined set of APIs ensures that all blockchain operations follow a standardized format. This consistency simplifies debugging, maintenance, and upgrades, making it easier for developers to work in teams or hand off projects.
Focus on Core Functionality
: With these APIs handling the core blockchain interactions, developers can focus on building the unique features and user experiences that differentiate their applications. This leads to higher-quality applications and a better user experience.
Scalability and Flexibility
: The APIs are designed to handle various use cases, from simple wallet management to complex transactions involving smart contracts and NFTs. This flexibility enables developers to scale their applications efficiently as their needs grow or change.
How These APIs Help Developers Streamline Blockchain Interactions
Unified Interface
: The APIs provide a unified interface for interacting with the Fuel blockchain. This reduces the need to work with multiple tools or libraries, allowing developers to perform all necessary actions from a single point of contact.
Reduced Complexity
: By abstracting the underlying blockchain operations, the APIs reduce the complexity involved in implementing blockchain features. Developers can perform tasks like wallet creation, transaction signing, and minting NFTs without needing deep knowledge of cryptography, consensus algorithms, or blockchain architecture.
Error Handling and Validation
: The APIs include built-in error handling and validation, which helps developers avoid common mistakes and ensures that only valid transactions are processed. This improves reliability and reduces the time spent troubleshooting and debugging.
Improved Interoperability
: These APIs are designed to be easily integrated with existing systems and frameworks. This interoperability allows developers to quickly add blockchain capabilities to their applications, whether they are building a new dApp or enhancing an existing web or mobile app.
Extensive Documentation and Support
: The comprehensive documentation provides clear instructions, example code, and best practices for using the APIs effectively. This support helps developers get up to speed quickly, reducing the learning curve associated with blockchain development.
Optimized for Performance
: The APIs are optimized for performance, ensuring that blockchain operations such as wallet creation and transaction processing are handled efficiently. This reduces latency and enhances the overall performance of applications, providing a seamless experience for end users.
By leveraging these APIs, developers can streamline their blockchain interactions, reduce development time, and focus on building innovative applications. The APIs provide a robust, secure, and scalable foundation for any project requiring blockchain capabilities, enabling developers to harness the full potential of the Fuel blockchain with ease.
Previous
Conclusion
Next
Pre-requisites
Last updated 
4 months ago
Pre-requisites | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Wallet Creation and Transaction APIs
Pre-requisites
To integrate LYNC's wallet creation and transaction APIs into your application, you need to have the following things ready with you -
API key from the official LYNC's website (
Generate your API key here
).
X_API_KEY (Shared by the LYNC team) 
Once you have the above keys with you, you can start the integration of APIs in your project.
Previous
Wallet Creation and Transaction APIs
Next
Integration
Last updated 
4 months ago
Integration | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Wallet Creation and Transaction APIs
Integration
In this Section, you will learn about the integration of the APIs provided by LYNC for creating an on-chain wallet on Fuel and performing blockchain transactions on the Fuel blockchain network.
Our wallet creation and transaction APIs provide a simple yet powerful way to interact with blockchain by providing simple API endpoints that you can integrate into your application and get access to blockchain interactions without worrying about the other complexities of blockchain.
This section explores the following functionalities that LYNC provides through its APIs for users:
API overview
Creating a new wallet
Get already created wallet
In the upcoming sections, we will learn about all the above API functionalities in detail.
Previous
Pre-requisites
Next
API Overview
Last updated 
4 months ago
API Overview | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Wallet Creation and Transaction APIs
Integration
API Overview
Here's a basic overview of the API endpoints provided by LYNC for wallet creation and transactions on the Fuel blockchain network.
These APIs enables the management of wallets by providing endpoints for creating new wallets and retrieving existing ones. Each wallet is associated with a unique address and private key. These APIs also facilitate the minting of NFT transactions and any generic transactions on the Fuel blockchain network. You can easily integrate mint NFT transactions and any generic transactions on Fuel using our APIs.
BASE_URL - 
https://server-fuel-sdk.lync.world/wallet
Routes -
To create a new wallet
 - {{ BASE_URL }}/create-wallet
To get already created wallet
 - {{ BASE_URL }}/get_wallet
In the upcoming sections, we will learn about the usage of all the above API endpoints individually.
Note -
Ensure to replace 
{{ BASE_URL }}
 with the actual base URL:  
https://server-fuel-sdk.lync.world
.
Always use secure storage practices for private keys, as they are essential for managing wallet access.
Previous
Integration
Next
Create a new wallet
Last updated 
4 months ago
Create a new wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Wallet Creation and Transaction APIs
Integration
Create a new wallet
Create a new wallet
POST
 
https://server-fuel-sdk.lync.world/wallet/create-wallet
This endpoint generates a new wallet for the user. Upon creation, a new wallet address and private key are generated. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and LYNC's API key for request validation and it will return a newly created wallet's details, including the wallet address and private key. It's recommended to securely store the private key since it is required to access and manage the wallet.
Headers
Name
Value
Content-Type
application/json
x_api_key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shanu@lync.world)
apiKey
string
Your api key generated from 
LYNC Dashboard
network
string
1 or 2 ( 1 for mainnet and 2 for testnet)
Copy
{


    "email": "<email address>", // mobile: <mobile>


    "apiKey": "<api key>",


    "network": 2


}
Response
201
400
403
500
Copy
{


    "message": "Wallet created successfully",


    "status": 201,


    "success": true,


    "data": {


        "id": "6703d1687903fc2b1991d545",


        "publicKey": "Public Key",


        "privateKey": "Private Key"


    }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


    "message": "Header is required.",


    "success": false,


    "statuscode": 403


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Internal server error"


}
Previous
API Overview
Next
Get already created wallet
Last updated 
1 month ago
Get already created wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Wallet Creation and Transaction APIs
Integration
Get already created wallet
Get already created wallet
POST
 
/get-wallet
This endpoint allows the retrieval of an existing wallet using the email ID of the user and the network on which the account exists. When a wallet is created using the 
create API
, it is associated with an email address that can be used to retrieve the wallet details, including the wallet address and private key. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and LYNC's API key for request validation.
Headers
Name
Value
Content-Type
application/json
x-api-key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shanu@lync.world)
apiKey
string
Your api key generated from official website of Lync
network
string
testnet or mainnet
Copy
{


    "email": "<email address>", // mobile: <mobile>


    "apiKey": "<api key>",


    "network": "testnet"


}
Response
200
400
404
500
Copy
{


  "success": true,


  "status": 200,


  "message": "User profile fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "email": "<user email id>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 404,


  "message": "No user registered"


}
Copy
{


  "success": false,


  "status": 400,


  "message": "Internal server error"


}
Previous
Create a new wallet
Next
Fuel Marketplace NPM SDK
Last updated 
4 months ago
Fuel Marketplace NPM SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Fuel Marketplace NPM SDK
Previous
Get already created wallet
Next
Getting Started
Last updated 
21 days ago
Introducing marketplace NPM SDK on Fuel blockchain. Powered by LYNC, it allows anyone to create their own decentralized marketplace, including listing and buying non-fungible tokens (NFTs) and semi-fungible tokens (SFTs) in a few lines of code. This SDK provides a simple but powerful and organized solution for developers looking to create their marketplace applications on Fuel, ensuring a smooth, easy, and hassle-free development experience.
NOTE - The current SDK version supports creating and trading tokens only on the 
Fuel testnet
.
Example application
Package link on 
npmjs
View code on GitHub
View example application code on GitHub
Example application
Package link on npmjs
View code on GitHub
View example application code on GitHub
LYNC Marketplace - Join the new era of in-game asset with Web3.0
Example marketplace application on Fuel blockchain
https://www.npmjs.com/package/@lyncworld/fuel-marketplace
www.npmjs.com
Link to package on npmjs
https://github.com/LYNC-WORLD/fuel-marketplace-NPM-SDK
github.com
Link to package code on GitHub
https://github.com/LYNC-WORLD/Fuel-Marketplace-Frontend
github.com
Link to example marketplace application code on GitHub
Getting Started | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Prerequisites
Installing the Package
Fuel
Fuel Marketplace NPM SDK
Getting Started
Prerequisites
Before you begin integrating Fuel Marketplace SDK, make sure you have the following prerequisites:
Node.js (version 20 or above) installed on your system.
NPM (version 10 or above) or Yarn (latest version) installed on your system.
Installing the Package
You can install the package using either 
npm
 or 
yarn
. Follow these steps:
Open your preferred terminal.
Navigate to your project's directory.
Run the following command:
Copy
npm install --save @lyncworld/fuel-marketplace@latest
Or
Copy
yarn add @lyncworld/fuel-marketplace
Congratulations! You have successfully installed 
@lyncworld/fuel-marketplace
 into your project. If you encounter any issues or have any questions, feel free to reach out to our support team for assistance.
Previous
Fuel Marketplace NPM SDK
Next
Using the SDK
Last updated 
22 days ago
Using the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Fuel Marketplace NPM SDK
Using the SDK
In this Section, you will learn about the various hooks, services, and functions provided by the SDK to create a marketplace Dapp on the Fuel blockchain.
Our marketplace SDK provides a variety of hooks, services, and functions to create a marketplace Dapp including:
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
In the upcoming sections, we will learn about all the above functionalities individually.
Previous
Getting Started
Next
Using hooks to get the marketplace data
Last updated 
22 days ago
Using hooks to get the marketplace data | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
useAllNftsInCollection
useCollections
useListings
useNft
Fuel
Fuel Marketplace NPM SDK
Using the SDK
Using hooks to get the marketplace data
The SDK provides a set of hooks that you can use to get the marketplace data. Here is the list of hooks provided by the SDK:
useAllNftsInCollection
This hook returns all the NFTs in a collection. You can use this hook to get all the NFTs in a collection.
Copy
import { Networks, useAllNftsInCollection } from '@lyncworld/fuel-marketplace';




const { fetching, data, error } = useAllNftsInCollection({


  network: Networks.Testnet,


  // Select from "NFT" or "SEMI_FT" according to actual token standard


  nftStandard: 'SEMI_FT',


  // Replace this demo contract address with actual contract address


  contractAddress: '0x...',


});
Returns -
Copy
{


  fetching: boolean;


  data: TokensInCollection[];


  error: unknown


}
Types -
Copy
interface TokensInCollection {


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


  description: string;


  contractAddress: `0x${string}`;


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  contractName: string;


  contractSymbol: string;


}
useCollections
This hook returns all the collections whose at least one token is listed on the marketplace.
Copy
import { Networks, useCollections } from '@lyncworld/fuel-marketplace';




const { fetching, data, error } = useCollections({


  network: Networks.Testnet,


  // You can pass the limit to get the top N collections or remove it to get all collections


  limit: 10,


});
Returns -
Copy
{


  fetching: boolean;


  data: MarketplaceCollections[];


  error: unknown


}
Types -
Copy
interface MarketplaceCollections {


  contractAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  collectionName: string;


  collectionSymbol: string;


  floorPrice: string;


  totalItemsListed: number;


  bannerImage: string;


}
useListings
This hook returns all the tokens listed on the marketplace for buying.
Copy
import { Networks, useListings } from '@lyncworld/fuel-marketplace';




const { fetching, data, error } = useListings({


  network: Networks.Testnet,


  // You can pass the limit to get the top N listings or remove it to get all listings


  limit: 10,


});
Returns -
Copy
{


  fetching: boolean;


  data: MarketplaceListings[];


  error: unknown


}
Types -
Copy
interface MarketplaceListings {


  listingId: number;


  isActive: boolean;


  nftAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenQuantity: number;


  pricePerItem: string;


  sellerAddress: `0x${string}`;


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


}
useNft
This hook return all the listing details of a specific token by its contract address, token standard, and token ID.
Copy
import { Networks, useNft } from '@lyncworld/fuel-marketplace';




const { fetching, data, error } = useNft({


  network: Networks.Testnet,


  // Select from "NFT" or "SEMI_FT" according to actual token standard


  nftStandard: 'SEMI_FT',


  // Replace this demo contract address with actual contract address of the token


  contractAddress: '0x...',


  // Replace this demo token id with actual token id (or sub id) of the token


  tokenId: '0x...',


  // You can pass the limit to get the top N listing or remove it to get all the listing of the token


  limit: 10,


});
Returns -
Copy
{


  fetching: boolean;


  data: NftDetails;


  error: unknown


}
Types -
Copy
interface NftDetails {


  listingData: OmittedMarketplaceListings[];


  nftMetadata: NftMetadata;


}




interface OmittedMarketplaceListings


  extends Omit<MarketplaceListings, 'tokenName' | 'tokenImage' | 'tokenAssetMedia'> {}




interface MarketplaceListings {


  listingId: number;


  isActive: boolean;


  nftAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenQuantity: number;


  pricePerItem: string;


  sellerAddress: `0x${string}`;


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


}




interface NftMetadata {


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


  description: string;


}
Previous
Using the SDK
Next
Using services provided by the SDK to list, buy, and manage tokens
Last updated 
22 days ago
Using services provided by the SDK to list, buy, and manage tokens | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Listing a token on the marketplace
Buying a listed token on the marketplace
Modify a listing on the marketplace
Cancel a listing on the marketplace
Fuel
Fuel Marketplace NPM SDK
Using the SDK
Using services provided by the SDK to list, buy, and manage tokens
The SDK provides a set of services that you can use to list and buy tokens or modify and cancel a listing. In the following section, we will look into the services provided by the SDK.
For performing list token, buy token, modify listing, or cancel listing services on the marketplace using the SDK, you will need to create an instance of 
MarketplaceClient
 class provided by the SDK. Here is an example of creating a new instance of 
MarketplaceClient
 class using the SDK::
Copy
import { MarketplaceClient, Networks } from '@lyncworld/fuel-marketplace';




const marketplaceClient = new MarketplaceClient(


  Networks.Testnet,


  wallet // Wallet of the user who is performing the action


);
After creating an instance of 
MarketplaceClient
 class, you can utilize various services provided by the 
MarketplaceClient
 class. Here is the complete list of the services and an example function for performing listing a token, buying a token, modifying a listing, and canceling a listing:
Listing a token on the marketplace
You can call the 
useListTokenService
 function provided by the 
MarketplaceClient
 class followed by the 
setProperties
 and 
execute
 methods to list a token on the marketplace. Here is an example call of how you can list a token on the marketplace:
Copy
const response = await marketplaceClient


  .useListTokenService()


  .setProperties(


    '0x...', // asset id of the token to be listed


    '0x...', // contract address of the token to be listed


    '0x...', // token id (or sub id) of the token to be listed


    0.0002, // price per item of the token to be listed


    4, // quantity of the token to be listed (always 1 for NFT)


    'SEMI_FT' // token standard of the token to be listed (choose from NFT or SEMI_FT)


  )


  .execute();




if (response.success) {


  alert('Token listed successfully.');


  console.log('Transaction data: ', response.data);


} else {


  alert('Error listing token.');


  console.error('Error listing token: ', { error: response.error });


}
Buying a listed token on the marketplace
You can call the 
useBuyTokenService
 function provided by the 
MarketplaceClient
 class followed by the 
setProperties
 and 
execute
 methods to buy a token on the marketplace. Here is an example call of how you can buy a token on the marketplace:
Copy
const response = await marketplaceClient


  .useBuyTokenService()


  .setProperties(


    '0x...', // listing id of the token to be bought


    2, // quantity of the token to be bought (always 1 for NFT)


    0.0002 // price per item of the token to be bought


  )


  .execute();




if (response.success) {


  alert('Token bought successfully.');


  console.log('Transaction data: ', response.data);


} else {


  alert('Error buying token.');


  console.error('Error buying token: ', { error: response.error });


}
Modify a listing on the marketplace
You can call the 
useModifyListingService
 function provided by the 
MarketplaceClient
 class followed by the 
setProperties
 and 
execute
 methods to modify an already listed token on the marketplace. Here is an example call of how you can modify a listing on the marketplace:
Copy
const response = await marketplaceClient


  .useModifyListingService()


  .setProperties(


    '0x...', // listing id of the token to be modified


    0.0001 // new price per item of the listed token to be modified


    2, // number of tokens to be added or removed from the listing (always 0 for NFT)


    "0x..." // asset id of the token to be modified (only required for SFT - send undefined for NFT)


  )


  .execute();




if (response.success) {


  alert('Listing modified successfully.');


  console.log('Transaction data: ', response.data);


} else {


  alert('Error modifying listing.');


  console.error('Error modifying listing: ', { error: response.error });


}
Cancel a listing on the marketplace
You can call the 
useCancelListingService
 function provided by the 
MarketplaceClient
 class followed by the 
setProperties
 and 
execute
 methods to cancel an already listed token on the marketplace. Here is an example call of how you can cancel a listing on the marketplace:
Copy
const response = await marketplaceClient


  .useCancelListingService()


  .setProperties(


    '0x...' // listing id of the token to be canceled


  )


  .execute();




if (response.success) {


  alert('Listing cancelled successfully.');


  console.log('Transaction data: ', response.data);


} else {


  alert('Error canceling listing.');


  console.error('Error canceling listing: ', { error: response.error });


}
Previous
Using hooks to get the marketplace data
Next
Some useful functions provided by the SDK
Last updated 
22 days ago
Some useful functions provided by the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Fuel Marketplace NPM SDK
Using the SDK
Some useful functions provided by the SDK
The SDK also provides some useful functions that you can use to implement search functionality and check if a token is owned by a given wallet address or not. Here is the complete list of the functions:
searchMarketplace
This function allows you to search for a token on the marketplace by providing a search query. Here is an example call of how you can search for a token on the marketplace:
Copy
import { Networks, searchMarketplace } from '@lyncworld/fuel-marketplace';




const response = searchMarketplace(


  Networks.Testnet,


  '0x...' // contract address, token id, asset id, or seller address to search


);
Returns -
Copy
{


  success: boolean;


  data: MarketplaceListings[];


  error: unknown


}
Types -
Copy
interface MarketplaceListings {


  listingId: number;


  isActive: boolean;


  nftAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenQuantity: number;


  pricePerItem: string;


  sellerAddress: `0x${string}`;


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


}
checkNftOwnership
This function allows you to check if a token is owned by a given wallet address or not. Here is an example call of how you can check if a token is owned by a given wallet address:
Copy
import { checkNftOwnership, Networks } from '@lyncworld/fuel-marketplace';




const response = checkNftOwnership(


  wallet, // wallet of the user to check the ownership


  '0x...' // contract address of the token to check the ownership


  "0x..." // token id (or sub id) of the token to check the ownership


  "SEMI_FT" // token standard of the token to check the ownership (choose from NFT or SEMI_FT)


);
Returns -
Copy
{


  success: true;


  data: {


    contractAddress: `0x${string}`;


    subId: `0x${string}`;


    nftStandard: 'NFT' | 'SEMI_FT';


  }


}
Or
Copy
{


  success: false;


  error: string[];


}
Previous
Using services provided by the SDK to list, buy, and manage tokens
Next
Error codes for the SDK
Last updated 
22 days ago
searchMarketplace
checkNftOwnership
Error codes for the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Fuel Marketplace NPM SDK
Using the SDK
Error codes for the SDK
The various hooks, services, and functions provided by the SDK can return different error codes in case of an error. Here is the list of error codes that you can expect from the SDK:
Copy
enum MarketplaceErrorCodes {


  InsufficientBalance = 'InsufficientBalance',


  InvalidArgumentsError = 'InvalidArgumentsError',


  InvalidNetworkArgument = 'InvalidNetworkArgument',


  NetworkRequestError = 'NetworkRequestError',


  PropertyUndefinedError = 'PropertyUndefinedError',


  ServerError = 'ServerError',


}
InsufficientBalance
 - The wallet does not have enough balance to perform the action.
InvalidArgumentsError
 - The arguments provided to a function are invalid or undefined.
InvalidNetworkArgument
 - The network argument provided to a function is invalid.
NetworkRequestError
 - There was an error thrown while making a 
http
 network request.
PropertyUndefinedError
 - A required property is undefined or not det properly for a class.
ServerError
 - There was an error thrown by the internal functions call in the SDK.
Previous
Some useful functions provided by the SDK
Next
Interfaces and Enums provided by the SDK
Last updated 
22 days ago
Interfaces and Enums provided by the SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Enums
Interfaces
Fuel
Fuel Marketplace NPM SDK
Using the SDK
Interfaces and Enums provided by the SDK
Enums
Copy
enum AllowedProviders {


  FuelProvider = 'FuelProvider',


  WalletProvider = 'WalletProvider',


}




enum Networks {


  Testnet = 'testnet',


}




enum MarketplaceErrorCodes {


  InsufficientBalance = 'InsufficientBalance',


  InvalidArgumentsError = 'InvalidArgumentsError',


  InvalidNetworkArgument = 'InvalidNetworkArgument',


  NetworkRequestError = 'NetworkRequestError',


  PropertyUndefinedError = 'PropertyUndefinedError',


  ServerError = 'ServerError',


}
Interfaces
Copy
interface MarketplaceListings {


  listingId: number;


  isActive: boolean;


  nftAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenQuantity: number;


  pricePerItem: string;


  sellerAddress: `0x${string}`;


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


}




interface MarketplaceCollections {


  contractAddress: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  collectionName: string;


  collectionSymbol: string;


  floorPrice: string;


  totalItemsListed: number;


  bannerImage: string;


}




interface NftDetails {


  listingData: OmittedMarketplaceListings[];


  nftMetadata: NftMetadata;


}




interface OmittedMarketplaceListings


  extends Omit<MarketplaceListings, 'tokenName' | 'tokenImage' | 'tokenAssetMedia'> {}




interface NftMetadata {


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


  description: string;


}




interface TokensInCollection {


  tokenName: string;


  tokenImage: string;


  tokenAssetMedia: string;


  description: string;


  contractAddress: `0x${string}`;


  tokenId: `0x${string}`;


  assetId: `0x${string}`;


  tokenStandard: 'NFT' | 'SEMI_FT';


  contractName: string;


  contractSymbol: string;


}




class MarketplaceError<TErrorData = unknown> extends Error {


  constructor(


    message: string,


    public code: MarketplaceErrorCodes,


    public errorData?: TErrorData


  ) {


    super(message);


    this.name = 'MarketplaceError';


  }


}
Previous
Error codes for the SDK
Next
Support
Last updated 
22 days ago
Support | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Fuel
Fuel Marketplace NPM SDK
Support
If you encounter any issues or have any questions, feel free to reach out to our support team for assistance. We are always here to help you with any queries or concerns you may have.
Telegram
Discord
Email
Previous
Interfaces and Enums provided by the SDK
Next
Wallet Creation and Transaction APIs
Last updated 
22 days ago
Wallet Creation and Transaction APIs | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Key Highlights
Why These APIs Are Important
How These APIs Help Developers Streamline Blockchain Interactions
Metis
Wallet Creation and Transaction APIs
This documentation aims to provide all the necessary information for developers to successfully integrate Metis blockchain features into their applications. By offering detailed explanations, practical examples, and best practices, it ensures developers can confidently implement wallet creation, NFT minting, and transaction functionalities in a secure and efficient manner.
These API provides endpoints for managing wallets and facilitating transactions on the Metis blockchain. It includes routes for creating and retrieving wallets, minting NFTs, and executing generic transactions. These APIs are designed for developers who need to interact programmatically with the Metis blockchain, enabling a wide range of blockchain-based applications such as dApps, financial services, and NFT marketplaces.
Key Highlights
Wallet Management
: The page begins with wallet management APIs, outlining the steps to create new wallets or retrieve existing wallets. It emphasizes the importance of securely handling private keys and demonstrates how to manage wallet operations programmatically.
Transaction Management
: The next section focuses on transaction management, including minting NFTs and sending generic transactions. These routes allow developers to perform complex blockchain operations with ease. The documentation provides detailed examples of how to format requests for different transaction types, making it easy for developers to get started.
Error Handling
: Each route includes a section on possible errors and their meanings, helping developers understand common pitfalls and troubleshoot issues effectively.
Security Considerations
: The documentation emphasizes security best practices, such as using HTTPS for all requests and securely storing private keys, which are essential for protecting users’ assets on the blockchain.
Use Cases and Examples
: Throughout the page, practical examples are provided to illustrate common use cases, such as creating a new user wallet, minting NFTs for digital art, or sending tokens for in-app purchases. These examples help developers visualize how the APIs can be integrated into real-world applications.
Developer-Friendly Format
: The page is designed to be developer-friendly, with clear formatting, example code snippets, and straightforward explanations. This format makes it easy for developers of all experience levels to understand and implement the APIs.
Comprehensive Reference
: Serving as a one-stop reference, the page covers all aspects of wallet and transaction management on the Metis blockchain. It ensures developers have all the information they need to build and maintain blockchain-based applications efficiently.
Why These APIs Are Important
Simplified Blockchain Interactions
: The APIs abstract the complexities of blockchain interactions, such as wallet management, transaction signing, and broadcasting. Developers do not need to understand the low-level details of blockchain protocols, which significantly reduces the time and effort required to integrate blockchain functionality.
Enhanced Security
: By providing secure endpoints for wallet creation and transaction management, the APIs help developers implement best security practices without the need to design and build these features from scratch. This reduces the risk of vulnerabilities and ensures that sensitive data, such as private keys, is handled securely.
Faster Development Cycle
: The APIs allow developers to quickly build and deploy blockchain applications by providing ready-to-use functionalities like wallet creation, NFT minting, and transaction processing. This accelerates the development process and helps teams bring their products to market faster.
Standardization and Consistency
: Using a well-defined set of APIs ensures that all blockchain operations follow a standardized format. This consistency simplifies debugging, maintenance, and upgrades, making it easier for developers to work in teams or hand off projects.
Focus on Core Functionality
: With these APIs handling the core blockchain interactions, developers can focus on building the unique features and user experiences that differentiate their applications. This leads to higher-quality applications and a better user experience.
Scalability and Flexibility
: The APIs are designed to handle various use cases, from simple wallet management to complex transactions involving smart contracts and NFTs. This flexibility enables developers to scale their applications efficiently as their needs grow or change.
How These APIs Help Developers Streamline Blockchain Interactions
Unified Interface
: The APIs provide a unified interface for interacting with the Metis blockchain. This reduces the need to work with multiple tools or libraries, allowing developers to perform all necessary actions from a single point of contact.
Reduced Complexity
: By abstracting the underlying blockchain operations, the APIs reduce the complexity involved in implementing blockchain features. Developers can perform tasks like wallet creation, transaction signing, and minting NFTs without needing deep knowledge of cryptography, consensus algorithms, or blockchain architecture.
Error Handling and Validation
: The APIs include built-in error handling and validation, which helps developers avoid common mistakes and ensures that only valid transactions are processed. This improves reliability and reduces the time spent troubleshooting and debugging.
Improved Interoperability
: These APIs are designed to be easily integrated with existing systems and frameworks. This interoperability allows developers to quickly add blockchain capabilities to their applications, whether they are building a new dApp or enhancing an existing web or mobile app.
Extensive Documentation and Support
: The comprehensive documentation provides clear instructions, example code, and best practices for using the APIs effectively. This support helps developers get up to speed quickly, reducing the learning curve associated with blockchain development.
Optimized for Performance
: The APIs are optimized for performance, ensuring that blockchain operations such as wallet creation and transaction processing are handled efficiently. This reduces latency and enhances the overall performance of applications, providing a seamless experience for end users.
By leveraging these APIs, developers can streamline their blockchain interactions, reduce development time, and focus on building innovative applications. The APIs provide a robust, secure, and scalable foundation for any project requiring blockchain capabilities, enabling developers to harness the full potential of the Metis blockchain with ease.
Previous
Support
Next
Pre-requisites
Last updated 
5 months ago
Pre-requisites | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Pre-requisites
To integrate Lync's wallet creation and transaction APIs into your application, you need to have the following things ready with you -
API key from the official Lync's website (
Generate your API key here
).
X_API_KEY (Shared by the Lync team) 
Once you have the above keys with you, you can start the integration of APIs in your project.
Previous
Wallet Creation and Transaction APIs
Next
Integration
Last updated 
5 months ago
Integration | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Integration
In this Section, you will learn about the integration of the APIs provided by Lync for creating an on-chain wallet on Metis and performing blockchain transactions on the Metis blockchain network.
Our wallet creation and transaction APIs provide a simple yet powerful way to interact with blockchain by providing simple API endpoints that you can integrate into your application and get access to blockchain interactions without worrying about the other complexities of blockchain.
This section explores the following functionalities that Lync provides through its APIs for users:
API overview
Creating a new wallet
Get already created wallet
Mint NFT transactions
In the upcoming sections, we will learn about all the above API functionalities in detail.
Previous
Pre-requisites
Next
API Overview
Last updated 
5 months ago
API Overview | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Integration
API Overview
Here's a basic overview of the API endpoints provided by Lync for wallet creation and transactions on the Metis blockchain network.
These APIs enables the management of wallets by providing endpoints for creating new wallets and retrieving existing ones. Each wallet is associated with a unique address and private key. These APIs also facilitate the minting of NFT transactions and any generic transactions on the Metis blockchain network. You can easily integrate mint NFT transactions and any generic transactions on Metis using our APIs.
BASE_URL - 
https://creatorserver.lync.world/metis
Routes -
To create a new wallet
 - {{ BASE_URL }}/create-wallet
To get already created wallet
 - {{ BASE_URL }}/get-wallet
Mint NFT transactions
 - {{ BASE_URL }}/mint-nft
In the upcoming sections, we will learn about the usage of all the above API endpoints individually.
Note -
Ensure to replace 
{{ BASE_URL }}
 with the actual base URL: 
https://creatorserver.lync.world/metis
.
Always use secure storage practices for private keys, as they are essential for managing wallet access.
Previous
Integration
Next
Create a new wallet
Last updated 
5 months ago
Create a new wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Integration
Create a new wallet
Create a new wallet
POST
 
/create-wallet
This endpoint generates a new wallet for the user. Upon creation, a new wallet address and private key are generated. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation and it will return a newly created wallet's details, including the wallet address and private key. It's recommended to securely store the private key since it is required to access and manage the wallet.
Headers
Name
Value
Content-Type
application/json
x_api_key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shivam.purohit@live.in)
apiKey
string
Your api key generated from official website of Lync
network
number
1 or 2 (1 for mainnet and 2 for testnet)
Response
200
201
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "Account data fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": true,


  "status": 201,


  "message": "Account Created On Chain Successfully.",


  "data": {


    "id": "<ObjectId>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


    "apiKey": "<Your api key generated from official website of Lync>",


    "network": "<1 or 2 (1 for Mainnet & 2 for Testnet)>",


    "email": "<user email id>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Internal server error"


}
Previous
API Overview
Next
Get already created wallet
Last updated 
5 months ago
Get already created wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Integration
Get already created wallet
Get already created wallet
POST
 
/get-wallet
This endpoint allows the retrieval of an existing wallet using the email ID of the user and the network on which the account exists. When a wallet is created using the 
create API
, it is associated with an email address that can be used to retrieve the wallet details, including the wallet address and private key. This endpoint requires the email of the user and network on which the account needs to be created for wallet creation and x-api-key and Lync's API key for request validation.
Headers
Name
Value
Content-Type
application/json
x-api-key
<Your_X_API_Key>
Body
Name
Type
Description
email
string
User email id (Ex. - shivam.purohit@live.in)
apiKey
string
Your api key generated from official website of Lync
network
number
1 or 2 (1 for mainnet and 2 for testnet)
Response
200
400
404
500
Copy
{


  "success": true,


  "status": 200,


  "message": "User profile fetched successfully.",


  "data": {


    "id": "<ObjectId>",


    "email": "<user email id>",


    "accountAddress": "<account address of users newly created wallet>",


    "publicKey": "<public key of users newly created wallet>",


    "privateKey": "<private key of users newly created wallet>"


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 404,


  "message": "No user registered"


}
Copy
{


  "success": false,


  "status": 400,


  "message": "Internal server error"


}
Previous
Create a new wallet
Next
Mint NFT transactions
Last updated 
5 months ago
Mint NFT transactions | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Metis
Wallet Creation and Transaction APIs
Integration
Mint NFT transactions
Mint NFT transactions
POST
 
/mint-nft
This endpoint facilitates the minting of a new Non-Fungible Token (NFT) on the Metis blockchain. Users can mint a new NFT by specifying some contract information, such as the contract address, contract name, function name, arguments, and other properties. This endpoint requires api key authentication and the necessary transaction parameters, including the wallet address initiating the minting process.
Headers
Name
Value
Content-Type
application/json
x-api-key
Your_X_API_Key
Body
Name
Type
Description
contractAddress
string
Contract address
functionName
string
Function you want to do mint transaction on
privateAddress
string
User's private key
publicAddress
string
User's account address
arguments
Array of objects
Object of  
{ argument: string, type: number }
 If the function accepts any arguments
network
number
1 or 2 (1 for mainnet and 2 for testnet)
apiKey
string
Your api key generated from official website of Lync
Response
200
400
500
Copy
{


  "success": true,


  "status": 200,


  "message": "success",


  "data": {


    "transactionHash": "<transaction hash of successfull mint transaction>",


  }


}
Copy
{


  "success": false,


  "status": 400,


  "message": "<error message>"


}
Copy
{


  "success": false,


  "status": 500,


  "message": "Something went wrong",


  "errorMessage": "<specific error message from server>"


}
Example Request Body
Copy
{


  "network": 2,


  "contractAddress": "0xBD38B291206885bB8bceA594E9B2aEE9c0DAc912",


  "functionName": "mintNFT",


  "privateAddress": "0xc58536b5ea99d3b645310765d3fff2d948106b00e4d5adffbb8e16cdc8df4b15",


  "publicAddress": "0x2F9De6C3104EF9Defb98D2Fd5D53DA9306F006EC", 


  "arguments": [


    {


      "argument": "1",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    },


    {


      "argument": "2",


      "type": 1 // (string: 0, number: 1, byte_array: 3, signature: 4)


    }


  ],


  "apiKey": "2595A9814638758B000F2B1C95AFD931",


}
Previous
Get already created wallet
Next
Marketplace
Last updated 
5 months ago
Marketplace | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
LYNC Marketplace NPM SDK allows anyone to create their own decentralized marketplace, including Buy/Sell and Rent/Lend for ERC-721 and ERC-1155 contracts in a few lines of code.
Steps to setup Marketplace NPM inside any project:
Before integrating the marketplace, we will need to integrate 
LYNC Wallet SDK
​
Install Wallet NPM Package: 
npm i lync-wallet-sdk
 and set up wallet integration as 
mentioned here
​
Once done, We are ready to install LYNC Marketplace NPM Package.
Install NPM Package: 
npm install @lync/marketplace
Step 1: Create a .env file to store your private keys
Example .env file:REACT_APP_ALCHEMY_KEY=""
Custom Hooks
​
useAllCollectionNFT
​
​useAllBuyNFT
​
​useAllOwnerNFT
​
​useNFTDetails​
​
useAllNFTForRent
​
List of chains
ChainConfig.MATIC_MUMBAI
ChainConfig.ETH_GOERLI
ChainConfig.ARB_GOERLI
Previous
Mint NFT transactions
Next
Hook: useAllCollectionNFT
Last updated 
8 months ago
Hook: useAllCollectionNFT | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Fetch an entire NFT Collection with its metadata and all NFT's metadata in that collection.
Fetch all NFTs and contracts metadata for a given ERC-721 and ERC-1155 contract and takes in a 
contractAddress
 and 
chainId
.
Interface
Copy
function useAllCollectionNFT( 


contractAddress?:string, 


chainId?: string )
Response
Copy
type useAllCollectionNFTType = {


  allNfts: [{Object}];


  isLoading?: bool;


  contractMetadata?: any;


};
Example Code:
Copy
import {ChainConfig, useAllCollectionNFT} from "@lyncworld/nft-marketplace";




function App() {


    const { allNfts, isLoading, contractMetadata } = 


    useAllCollectionNFT(


        "0x9342b1039949d536b2eb456de198c26362daa523", 


        ChainConfig.MATIC_MUMBAI


    );


}
Not ready to create your own UI yet, don't worry we have got you covered!!
Example Code:
Copy
import {LyncCollection, ChainConfig} from "@lyncworld/nft-marketplace";


<LyncCollection


    bannerImageUrl={


    "https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg"


    }


    collectionDescription={"Welcome"}


    contractAddress={"0xa879c01913f56419605fde494b5c140a6d146a1b"}


    chainId={ChainConfig.MATIC_MUMBAI}


/>
Previous
Marketplace
Next
Hook: useAllBuyNFT
Last updated 
8 months ago
Hook: useAllBuyNFT | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
Hook: useAllBuyNFT
Fetch all NFT of Collection which are available for Buying with metadata.
Fetch all NFTs and their metadata for ERC-721 and ERC-1155, NFTs available to buy and takes in a 
contractAddress
 and 
chainId
.
Interface
Copy
function useAllBuyNFT(


contractAddress?:string,


chainId?:string)
Response
Copy
type useAllBuyNFTType = {


allBuyNFT: [{Object}];


isLoading?: bool;


};
Example Code:
Copy
import {ChainConfig, useAllBuyNFT} from "@lyncworld/nft-marketplace";




function App() {


const { isLoading, allBuyNFT } = useAllBuyNFT(


"0x9342b1039949d536b2eb456de198c26362daa523",


ChainConfig.MATIC_MUMBAI


);




Not ready to create your own UI yet, don't worry we have got you covered!!
Example Code:
Copy
import {ChainConfig, LyncListedNFTToBuy} from "@lyncworld/nft-marketplace";




<LyncListedNFTToBuy 


    contractAddress={"0xa879c01913f56419605fde494b5c140a6d146a1b"}


    chainId={ChainConfig.MATIC_MUMBAI}


/>
Previous
Hook: useAllCollectionNFT
Next
Hook: useAllOwnerNFT
Last updated 
8 months ago
Hook: useAllOwnerNFT | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
Hook: useAllOwnerNFT
Fetch all NFT of a particular wallet address
Fetch all NFTs and their metadata for a given ERC-721 and ERC-1155 contract and takes in  
walletAddress
,
contractAddress
 and 
chainId
.
Interface
Copy
function useAllOwnerNFT(


walletAddress?:string,


contractAddress?:string,


chainId?:string)
Response
Copy
type useAllOwnerNFTType = {


allOwnerNFT: [{Object}];


isLoading?: bool;


};
Example Code:
Copy
import {ChainConfig, useAllOwnerNFT} from "@lyncworld/nft-marketplace";


import { AuthContext } from "lync-wallet-sdk";




function App() {


const {  walletAddress } = useContext(AuthContext);




const { isLoading, allOwnerNFT } = useAllOwnerNFT(


walletAddress,


"0x9342b1039949d536b2eb456de198c26362daa523",


ChainConfig.MATIC_MUMBAI


);


Not ready to create your own UI yet, don't worry we have got you covered!!
Example Code:
Copy
import {AuthContext } from "lync-wallet-sdk";


import {ChainConfig, LyncOwnersNFT} from "@lyncworld/nft-marketplace";




const { provider, walletAddress } = useContext(AuthContext);




<LyncOwnersNFT


contractAddress={"0xd82990166ac626ed191ffeda2a73ba364c340748"}


chainId={ChainConfig.ETH_GOERLI}


ownerAddress={walletAddress}


/>
Previous
Hook: useAllBuyNFT
Next
Hook: useNFTDetails
Last updated 
8 months ago
Hook: useNFTDetails | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
Hook: useNFTDetails
Fetch all details of an NFT, for a given ERC-721 and ERC-1155 contract and takes in 
walletAddress
,
contractAddress
,
tokenId
 and 
chainId
.
Interface
Copy
function useNFTDetails(


walletAddress?:string, 


contractAddress?:string, 


tokenId?:String, 


chainId?:string)
Response
Copy
type useNFTDetails = {


owners?: [array of owner ];


isLoading?: bool;


listingData?:[{listing data if item is listed  ex. price, id, nftAddress, seller etc}],


nftMetaData?:,{nft meta data ex. title, description ,media etc},


lendingData?:,{lendingData if item is on lend ex. lenderAddress, pricePerDay, maxRentDuration etc}


};
Example Code:
Copy
import {ChainConfig, useAllOwnerNFT} from "@lyncworld/nft-marketplace";


import { AuthContext } from "lync-wallet-sdk";




function App() {


const {  walletAddress } = useContext(AuthContext);




const { isLoading, allOwnerNFT } = useAllOwnerNFT(


walletAddress,


"0x9342b1039949d536b2eb456de198c26362daa523",


ChainConfig.MATIC_MUMBAI


);


Not ready to create your own UI yet, don't worry we have got you covered!!
Example Code:
Copy
import {AuthContext} from "lync-wallet-sdk";


import {ChainConfig, LyncNFTDetails} from "@lyncworld/nft-marketplace";




const {provider, walletAddress} = useContext(AuthContext);




<LyncNFTDetails 


contractAddress={"0x9342b1039949d536b2eb456de198c26362daa523"}


chainId={ChainConfig.MATIC_MUMBAI}


tokenId={"1"}


provider={provider}


walletAddress={walletAddress}


/>
Previous
Hook: useAllOwnerNFT
Next
Hook: useAllNFTForRent
Last updated 
8 months ago
Hook: useAllNFTForRent | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
NPM Packages
Marketplace
Hook: useAllNFTForRent
Fetch all NFT which are available to rent
Fetch all details of an NFT, for a given ERC-721 and ERC-1155 contract and takes in 
contractAddress
 and 
chainId
.
Interface
Copy
function useAllNFTForRent(contractAddress?:string, chainId?:string)
Response
Copy
type useAllNFTForRent = {


allNftForRent?: [{}];


isLoading?: bool;


};
Example Code:
Copy
import {ChainConfig, useNFTDetails} from "lync-marketplace";


import { AuthContext } from "lync-wallet-sdk";




function App() {




const {  walletAddress } = useContext(AuthContext);




const {isLoading, allNftForRent } = useNFTDetails(


"0x9342b1039949d536b2eb456de198c26362daa523",


"1",


);


Not ready to create your own UI yet, don't worry we have got you covered!!
Example Code:
Copy
import {ChainConfig,LyncNFTForRent} from "@lyncworld/nft-marketplace";




<LyncNFTForRent 


contractAddress={"0x9342b1039949d536b2eb456de198c26362daa523"}


chainId={ChainConfig.MATIC_MUMBAI}


/>
Previous
Hook: useNFTDetails
Last updated 
8 months ago
LYNC Account Abstraction SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
Metamask Wallet | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get Your API Key 
Installation
Choose blockchain network 
Integrating the Transaction Layer
Integrating Connet Wallet scene into the build 
Products
Metamask Wallet
Previous
LYNC Account Abstraction WebGL SDK
Next
LYNC Metamask PC SDK
Last updated 
8 months ago
LYNC Metamask Wallet SDK is a one-stop solution for game developers to easily integrate Metamask into their game engine and deploy their game on multiple networks with just a few clicks. This SDK allows game developers to monitor gamers’ data via LYNC analytics system and update the SDK without leaving the game engine.
Get Your API Key 
Please get your API key before downloading the SDK from 
here
Installation
Download the LYNC - Metamask Wallet SDK from 
here
Example Project- 
https://github.com/LYNC-WORLD/Metamask-Unity-WebGL-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Metamask Wallet SDK package has finished importing into your Unity project, you can begin integrating it into your game. To do this, open the 
ConnectWallet
 scene provided by the LYNC - Metamask SDK.

                                             
Path : Assets ->LYNC-Metamask-SDK -> Scenes
Choose blockchain network 
If you haven't generated an API Key, please check 
Get Your API Key 
the After opening 
ConnectWallet 
scene, Go to 
Interface. 
In the "Inspector" window, go to the API key & Enter the 
API key
. 
To choose the blockchain network, simply go to the 
CurrentChain
 drop-down menu and pick the network of your preference to deploy your game on.
Integrating the Transaction Layer
The Transactions are divided into 2 parts:
No Code Transactions
Modular Transactions
Note: Make sure to have "TransactionManager.cs" in your scene.
No-code Transaction
 Check the No-Code-Transaction Scene in the Scenes folder.
Check the No-Code TransactionExample GameObject, you can just pass in a few parameters to write on any custom contract inside the game.
Just pass the following parameters:
Contract Address - Type any contract address on the chain you selected in the LYNCInterface GameObject.
ABI - You can get the contract ABI of a verified contract on the explorer.

Function Name - Write the exact function name from the contract
Cost - The cost required to do the transaction, if it's free you can pass 0 else pass the value in wei.
Arguments - The arguments required by the transaction, are left blank if none.
Modular Transactions
Check the No-Code-Transaction Scene in the Scenes folder.
Check the TransactionExample GameObject, it has a TransactionExample.cs file attached. 
This example contains 3 types of transaction transactions, ERC-721, ERC-1155 and ERC-20.
In this example:
send20Trx is a button to disable the button click once the transaction is initiated.
contractAddress - is the contract address for a custom transaction. 
(In this case, it's an ERC-20 contract address on Mumbai Testnet)
ABI - 
You can get the contract ABI of a verified contract on the explorer.
functionName - Write the exact function name from the contract 
(In this case, sendToken)
cost - The cost required to do the transaction, if it's free you can pass 0 else pass the value in wei. (In this case, as the function is not payable the value is 0).
ParametersOfFunctions - You can pass in the arguments required for the transaction. (In this example, the argument is how much amount you want to send, 
10000000000000000 is the value in wei, i.e 0.01 eth.
 You can pass n number of arguments separated with a comma( , ) ).
args - Converts compatible to be a JSON
Sending transaction - 
Copy


TransactionManager.Instance.SendTransaction(LoadingScreen, contractAddress, ABI, functionName, args, cost, On20TrxCompleted, On20TrxFailed);




The above example explains a requirement for doing transactions.




You can use the "TransactionManager.Instance.SendTransaction()" to send transactions from anywhere in the project, make sure to add the TransactionManager.cs file in the scene.
It takes a LoadingScreen GameObject, contractAddress, ABI, functionName, args, and cost, as explained above and 2 more functions of type "System.Action<string>".
These are not compulsory functions but they handle the Transaction Success or Failure.
On20TrxCompleted 
- Handles once the transaction is completed. (It returns a transaction hash).
On20TrxFailed 
- Handles if the transaction failed. (It returns a reason for transaction failure).
Integrating Connet Wallet scene into the build 
To deploy your Unity project, it's necessary to set up the Player Settings in Unity. Follow these steps to select the LYNC WebGL template.
In the "
Build Settings
" window, place 
ConnectWallet
 and 
FetchWallet
 at the top of this section. 
Go to "
Player Settings
" and navigate to "
Resolution and Presentation
".
 Select LYNC - Template
 in WebGL Template
After completing all the necessary steps and configuring the Player Settings with the LYNC WebGL template, you can now build and run your game.
To do this, go to "
File
" on the top menu bar in the Unity editor and select "
Build and Run
." 
Congratulation, you have successfully integrated the Metamask wallet with your favourite blockchain network using LYNC SDK. 

NOTE: If you wish to use wallet address inside game after user's wallet is connected, use:
Copy
PlayerPrefs.GetString("WalletAddress");
If you face any error, while Build and Run.

PLEASE ADD, Unity package install by git link
Copy
com.unity.nuget.newtonsoft-json
Integrate Metamask wallet inside any game using LYNC SDK
Assets -> Import Package -> Custom Package
Assets ->LYNC-Metamask-SDK -> Scenes
Enter the API key
Interface -> CurrentChain -> Choose Your Chain
No Code Transaction Scene
Copy ABI from explorer
Transaction Scene
Assets/LYNC-Metamask-SDK/Scripts/TransactionExample.cs
File -> Build Settings
Add ConnectWallet & FetchWallet Scene to the top of Scenes in Build
Player Settings -> Resolution and Presentation -> Select LYNC - Template
Build and Run 
LYNC Account Abstraction SDK | LYNC
LYNC
Dashboard
Support
More
Dashboard
Support
Search
...
Ctrl +
 K
👋
Introducing LYNC
Products
LYNC Account Abstraction SDK
LYNC Account Abstraction WebGL SDK
Metamask Wallet
LYNC Metamask PC SDK
OKX Wallet
LYNC In-Game Marketplace SDK
NFT Fetcher
No-Code Smart Contract Deployer
EVM Lootbox SDK
Getting Started
Using the SDK
Creating a new lootbox
Opening a lootbox
Claiming rewards
Whitelisting users using lootbox
Lootbox admin functions
Useful information functions from LyncLootBox class
Multicall : opening and claiming multiple lootboxes in a single transaction
Example Codes in React & TypeScript
Example code for creating a new lootbox
Example code for opening a lootbox
Example code for claiming a lootbox
Launch your products on Telegram
Configure Your Telegram Bot
Deploying Your Product on TG
APTOS
LYNC Paymaster - Supporting Aptos
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
Unity
API
JavaScript/ TypeScript
LYNC Unity Aptos SDK
Keyless Accounts
Configure Your OIDC Provider
Integrate Keyless in Unity
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
Send generic transactions on Aptos
LYNC Social Login SDK on Aptos
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Aptos Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Movement Labs
📇
Indexer
How to run index custom data?
Example Queries
Get Token Info
Get Token Balances
Get NFTs Owned by an Account
NFT Deployer
LYNC Social Login SDK on Movement
Getting Started
Using the SDK
Example Codes in React & TypeScript
Types Used in the Methods Provided by the SDK
Other Specification
LYNC Unity Movement SDK
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
LYNC Paymaster - Supporting Movement
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
Supra
LYNC Paymaster - Supporting Supra L1
How to Register on LYNC Dashboard
How to Create Paymaster
How to Fund the Paymaster
Module & Function Whitelist
How to Integrate Paymaster
JavaScript/ TypeScript
LYNC Unity SUPRA SDK
Fuel
LYNC Unity Fuel SDK
LYNC NFT Deployer
Introduction
Getting Started
Deploying Your NFTs
Launch Your Entire Collection
Troubleshooting and FAQs
LYNC Fuel Lootbox
Getting Started
Creating a Lootbox
Opening a Lootbox
Claiming the Rewards
Conclusion
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Fuel Marketplace NPM SDK
Getting Started
Using the SDK
Using hooks to get the marketplace data
Using services provided by the SDK to list, buy, and manage tokens
Some useful functions provided by the SDK
Error codes for the SDK
Interfaces and Enums provided by the SDK
Support
Metis
Wallet Creation and Transaction APIs
Pre-requisites
Integration
API Overview
Create a new wallet
Get already created wallet
Mint NFT transactions
NPM Packages
Marketplace
Hook: useAllCollectionNFT
Hook: useAllBuyNFT
Hook: useAllOwnerNFT
Hook: useNFTDetails
Hook: useAllNFTForRent
Powered by GitBook
On this page
Get your API Key
Installation
Integrating AA SDK in Unity
Setup the Project
Integrating Login or Transaction Layer via Account Abstraction in Unity
Login Flow 
No-Code Login Flow:
Login Flow with Code:
Transaction Flow 
Gasless Transaction
Setup Gasless Transactions with Biconomy
User Paid Transaction
Some common bugs and their resolutions
Products
LYNC Account Abstraction SDK
Previous
Introducing LYNC
Next
LYNC Account Abstraction WebGL SDK
Last updated 
8 months ago
LYNC AA SDK is a no-code Unity SDK supporting PC (MacOS and Windows) and Mobile (Android and iOS). LYNC Unity Account Abstraction SDK, your solution to seamless gamer onboarding in Web3 Games! Enable effortless logins via socials, wallets, email, and more. Integrate swiftly into any game on Mac, Windows, Android, iOS, or browser. Simplify the gaming experience with LYNC AA SDK, connecting gamers effortlessly.
Get your API Key
Please get your API key before downloading the SDK from 
here
​
Installation
Download the LYNC Account Abstraction SDK from 
Here​
Example Project: 
https://github.com/LYNC-WORLD/LYNC-Unity-AA/tree/main/Assets/LYNC-AA-SDK
Import the SDK .unitypackage file to your project. or simply drag and drop .unitypackage file to your project.
Once the Account Abstraction SDK package has finished importing into your Unity project, you can begin integrating it into your game.
The Folder structure looks like this
Integrating AA SDK in Unity
There are 3 Example Projects present in the SDK: 
Assets -> LYNC-AA-SDK -> Example / Example-2 / Example-3
You can find the example scene in the folders. Simply pass the API key in lyncManager GameObject.
To test, Build and Run after adding this scene in (Scene in Build).
Setup the Project
To use LYNC Account Abstraction. Attach LYNC Manager Prefab(Assets/LYNC-AA-SDK/LYNC Manager. prefab), on the starting scene.
This will serve as the starting point for your project.
In LYNC Manager Prefab, be sure to provide the following details:
LYNC API Key (
The API Key can be generated from here
)
Choose chain
Choose Network (Testnet/ Mainnet)
Pass in the Dapp API Key (
The API key can be generated from the Biconomy Dashboard
 )
Web3 Auth Client ID (
The API key can be generated from the Web3 Auth Dashboard
)
Pass a deep link name (example: lync/gameName etc.)
Integrating Login or Transaction Layer via Account Abstraction in Unity
Login Flow 
No-Code Login Flow:
You can attach the Login Example Script in any scene where you want users to login, by dragging and dropping a Button as a Game Object.
Login Flow with Code:
Login and Transactions can be done once the LyncReady action is triggered.
The Sample Code for Login can be found at loginExample.cs, LoginTransactionExample.cs and ExampleLogin.cs
Make sure to Import LYNC.
Copy
using LYNC;


using LYNC.Wallet;
Example (Event Trigger):
LYNC ready Should be a function which has an argument of type "LyncManager"
Copy
LyncManager.onLyncReady += LyncReady;




private void LyncReady(LyncManager Lync)


    {


        // Once LYNC is ready, you can do any steps like Login, Logout, Transactions etc.


        


        //To Login:


        Lync.WalletAuth.ConnectWallet((wallet) =>


        {


            addressTxt.text = "Wallet Address: " + wallet.publicAddress;


            loginDateTxt.text = "Login Date: " + wallet.loginDate.ToString();


            string smartAccountAddress = walletData.SmartAccount;


        });


        


        //To Logout:


        Lync.WalletAuth.Logout();


    }
To Check if the user is logged in or not:
Copy
WalletData walletData = WalletData.TryLoadSavedWallet();


if (walletData.WalletConnected){


    // User is already logged in


}


else{


    // Ask user to login


}
To get the User's wallet address, if the user is logged in
Copy
string EOAWalletAddress = walletData.PublicAddress


string SmartAccountAddress = walletData.SmartAccount


string EmailAddress=  walletData.Email;


string UserName = walletData.UserName;


string IdToken = walletData.IdToken;
To Fetch from PlayerPrefs:
Copy
string publicAddress = PlayerPrefs.GetString("_publicAddress");


string smartAccount = PlayerPrefs.GetString("_smartAccount");


string email = PlayerPrefs.GetString("_email");


string userName = PlayerPrefs.GetString("_userName");


string idToken = PlayerPrefs.GetString("_idToken");
To Login directly:
Copy
LyncManager.Instance.WalletAuth.ConnectWallet(loginUrl, (walletData) =>


{


    // Get all the user's wallet data from "walletData"


});
To Logout directly:
Copy
LyncManager.Instance.WalletAuth.Logout();
Transaction Flow 
There are two methods for proceeding with a transaction:
Gasless Transaction -
 Game Developer/ Game Studio will be sponsoring the transaction fee (Function Name: 
SendTransaction
).
User Paid Transaction- 
The Gamer/ User will be responsible for paying the gas fee and cost if any, required to do the transaction (Function Name: 
SendUserPaidTransaction
).
Gasless Transaction
The limitation with gasless transaction is that, you can't have a cost required in the smart contract.
To do transactions, TokenExample.cs and LoginTransactionExample.cs can be taken as a reference.
Pass in the Contract Address and Function Name Example: MintNFT(). MintNFT(unit256 id, unit256 amount)
Args are not compulsory parameters, but if the function accepts any argument, make sure to pass them.
To do it from the script:
Copy
LyncManager.Instance.blockchainMiddleware.SendTransaction(contractAddress, functionName, args, onSuccess,onError);
onSuccess: Once the transactions are completed, this handles what to do.
onError: If the transactions failed, this handles what to do.
Setup Gasless Transactions with Biconomy
To enable gasless transactions via Biconomy, Register a new paymaster on the 
Biconomy Dashboard
. 
Make sure you select the version: 1.0.1
Once done, Get the API Key and Pass it to the 
LYNC Manager
.
Setup the gas tank, in Policies create a new one and pass the contract address
That's it, now you can do the gasless transaction on this contract address passing in the LYNC AA SDK.
User Paid Transaction
This will require gamers/ users to have some funds in their wallet on the chain you are using. There are two ways, You can ask users to send some tokens to this smart account or use LYNC on-ramp/ off-ramp for gamers allowing them to add funds via credit/ debit card, Apple Pay, Google Pay etc.
User Paid Transactions are similar to Gasless transactions to use, there is only one more parameter required to send is cost in ethers (ex. 0.1).
Copy
LYNC.LyncManager.Instance.blockchainMiddleware.SendUserPaidTransaction(contractAddress, functionName, arguments,cost, On721TrxCompleted, onError);
You can see the 
Assets/LYNC-AA-SDK/Example-2/TransactionExample.cs
 example script as a reference.
Some common bugs and their resolutions
Problem: 
Newtonsoft JSON is missing.
Solution
: Please, Add this as a git URL in adding package
Copy
com.unity.nuget.newtonsoft-json
Example Projects
Pass LYNC API Key​
Assets -> Import Package -> Custom Package
SDK Folder Structure
Attach loginExample Script
Assets -> LYNC-AA-SDK -> Example-2 -> loginExample.cs
Token Transactions
Biconomy API Key
Contract Address setup
